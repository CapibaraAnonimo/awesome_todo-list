var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.544,1,2.076]],["body/controllers/AppController.html",[0,2.574,1,3.462,2,2.127,3,0.55,4,0.487,5,0.487,6,3.704,7,0.55,8,1.832,9,5.01,10,1.947,11,0.032,12,0.911,13,4.438,14,1.513,15,1.102,16,0.744,17,1.394,18,3.036,19,3.704,20,0.55,21,0.021,22,2.861,23,2.333,24,1.283,25,4.438,26,0.027,27,0.027]],["title/modules/AppModule.html",[28,1.544,29,2.076]],["body/modules/AppModule.html",[1,3.331,2,2.211,3,0.433,4,0.383,5,0.383,11,0.033,16,0.853,17,1.096,18,3.087,19,2.914,20,0.433,21,0.017,26,0.023,27,0.023,28,2.477,29,4.062,30,1.835,31,1.835,32,2.25,33,2.25,34,1.835,35,3.331,36,2.25,37,2.914,38,2.914,39,2.914,40,3.404,41,3.404,42,3.404,43,2.974,44,2.25,45,2.25,46,3.491,47,3.349,48,3.491,49,2.534,50,1.835,51,3.491,52,0.947,53,3.491,54,3.491,55,1.334,56,3.491,57,3.491,58,1.191,59,3.491,60,3.491,61,0.538,62,4.614,63,3.491,64,3.491,65,3.491,66,3.491,67,2.25,68,3.491,69,1.673,70,2.024,71,2.534,72,3.491,73,2.534,74,3.491,75,2.674,76,3.491]],["title/injectables/AppService.html",[18,1.693,77,1.193]],["body/injectables/AppService.html",[3,0.568,4,0.504,5,0.504,7,0.568,8,1.868,9,5.065,11,0.032,12,0.941,14,1.564,15,1.124,16,0.636,17,1.44,18,2.879,20,0.568,21,0.022,24,1.326,26,0.027,27,0.027,77,2.029,78,2.658,79,3.827,80,4.585,81,4.585,82,4.585]],["title/guards/AuthGuard.html",[83,2.338,84,2.076]],["body/guards/AuthGuard.html",[3,0.378,4,0.335,5,0.335,7,0.378,8,1.436,11,0.033,12,0.99,14,1.436,15,0.864,16,0.757,17,0.958,20,0.598,21,0.015,24,1.395,26,0.021,27,0.021,61,0.841,75,2.796,77,1.56,84,2.715,85,3.05,86,2.214,87,2.535,88,5.202,89,2.395,90,4.212,91,1.848,92,3.05,93,4.711,94,5.784,95,3.05,96,1.787,97,1.395,98,1.787,99,4.212,100,5.202,101,3.05,102,3.05,103,2.214,104,4.212,105,4.711,106,3.05,107,3.109,108,3.05,109,4.027,110,1.966,111,2.546,112,1.966,113,2.546,114,2.214,115,2.538,116,2.214,117,4.027,118,1.229,119,2.546,120,2.546,121,3.05,122,3.05,123,3.05,124,3.05,125,5.202,126,3.05,127,3.057,128,1.218,129,3.05,130,3.516,131,1.603,132,3.05,133,2.214,134,2.546,135,3.05,136,3.05,137,3.05,138,3.05]],["title/classes/CreateTaskDto.html",[21,0.015,139,1.693]],["body/classes/CreateTaskDto.html",[3,0.379,4,0.336,5,0.336,7,0.379,10,2.119,11,0.033,12,0.991,15,1.159,16,0.424,20,0.379,21,0.02,26,0.021,27,0.021,52,1.068,55,1.752,61,0.744,128,1.22,139,2.217,140,1.132,141,4.346,142,2.219,143,1.266,144,1.505,145,3.356,146,4.217,147,2.022,148,4.217,149,4.217,150,4.217,151,4.217,152,4.217,153,4.217,154,1.438,155,4.345,156,3.505,157,3.057,158,4.398,159,4.346,160,4.346,161,3.52,162,4.714,163,3.057,164,3.057,165,3.057,166,3.057,167,4.217,168,1.929,169,4.217,170,3.061,171,3.057,172,3.057,173,4.217,174,4.346,175,2.551,176,2.551,177,4.346,178,3.061,179,1.772,180,3.057,181,3.52,182,3.057,183,2.551,184,1.607,185,2.551,186,2.445,187,3.057,188,3.057]],["title/classes/CreateUserDto.html",[21,0.015,189,1.693]],["body/classes/CreateUserDto.html",[3,0.284,4,0.252,5,0.252,7,0.284,10,2.001,11,0.032,12,0.936,15,1.12,16,0.475,20,0.284,21,0.022,26,0.017,27,0.017,52,1.051,58,1.401,61,0.702,67,3.719,69,2.831,97,1.668,115,1.006,128,1.318,140,0.849,143,0.47,144,0.991,145,2.21,147,1.644,154,1.169,158,4.45,160,3.806,161,1.914,162,4.074,174,2.862,175,1.914,176,1.914,177,4.074,179,1.329,181,4.556,189,1.802,190,3.543,191,1.478,192,3.429,193,3.429,194,3.429,195,1.644,196,3.597,197,4.108,198,2.292,199,2.862,200,2.862,201,3.429,202,2.292,203,4.556,204,3.429,205,2.292,206,4.559,207,2.489,208,3.429,209,3.806,210,2.292,211,3.429,212,2.292,213,4.559,214,6.056,215,3.806,216,3.806,217,3.806,218,4.559,219,5.459,220,4.559,221,4.559,222,4.559,223,4.559,224,4.559,225,4.559,226,4.559,227,2.292,228,2.292,229,2.862,230,2.292,231,2.862,232,3.429,233,3.429,234,2.862,235,2.292,236,2.21,237,2.862,238,2.292,239,2.292,240,3.429,241,2.292,242,2.489,243,1.329,244,1.914,245,1.664,246,1.664,247,1.914,248,1.914,249,1.914,250,1.914,251,2.292,252,3.429,253,2.292,254,2.292,255,2.292,256,1.914,257,2.292]],["title/injectables/IsUniqueConstraint.html",[42,1.867,77,1.193]],["body/injectables/IsUniqueConstraint.html",[3,0.42,4,0.372,5,0.372,7,0.42,8,1.543,11,0.032,12,1.045,14,1.543,15,1.045,16,0.753,17,1.065,20,0.42,21,0.022,22,2.185,23,1.782,24,1.308,26,0.022,27,0.022,42,2.952,58,1.931,61,0.784,75,1.965,77,1.676,78,1.965,87,2.856,91,1.488,96,1.887,97,1.571,98,1.887,103,2.378,115,2.235,120,2.83,131,1.782,179,1.965,193,3.777,236,2.916,243,3.15,244,2.83,256,2.83,258,2.83,259,4.525,260,3.39,261,5.824,262,3.39,263,4.525,264,6.041,265,3.39,266,3.777,267,4.525,268,5.093,269,3.39,270,2.169,271,4.525,272,4.525,273,1.782,274,3.284,275,3.39,276,4.525,277,3.39,278,3.39,279,3.39,280,3.39,281,4.525,282,3.39,283,3.39,284,3.39]],["title/classes/LoginResponse.html",[21,0.015,285,2.076]],["body/classes/LoginResponse.html",[3,0.3,4,0.266,5,0.266,7,0.3,8,1.217,11,0.033,12,1.109,14,1.217,15,1.325,16,0.335,20,0.3,21,0.012,24,0.7,26,0.018,27,0.018,52,1.329,58,1.597,61,0.832,69,2.832,89,2.663,91,1.566,96,1.322,97,1.741,98,1.322,118,0.975,128,1.226,140,0.896,143,0.87,144,1.032,147,1.711,154,1.217,168,2.002,196,3.809,285,3.218,286,4.629,287,1.56,288,3.018,289,5.969,290,3.079,291,1.757,292,3.57,293,2.461,294,2.714,295,3.132,296,2.461,297,4.993,298,2.02,299,2.02,300,2.02,301,2.02,302,2.98,303,2.42,304,2.069,305,1.886,306,1.438,307,2.98,308,1.403,309,2.177,310,1.757,311,2.02,312,2.02,313,2.02,314,2.42,315,1.757,316,2.02,317,1.757,318,2.02]],["title/classes/SignInDto.html",[21,0.015,319,1.867]],["body/classes/SignInDto.html",[3,0.54,4,0.479,5,0.479,7,0.54,11,0.032,12,1.091,15,1.224,20,0.54,21,0.021,26,0.026,27,0.026,61,0.819,67,3.942,69,2.932,140,1.616,143,0.895,144,1.261,154,1.812,203,4.98,319,3.081,320,4.785,321,3.641,322,4.362,323,4.362,324,4.362]],["title/entities/Task.html",[55,0.931,305,1.298]],["body/entities/Task.html",[3,0.27,4,0.239,5,0.239,7,0.27,10,2.204,11,0.033,12,1.031,15,1.232,16,0.552,20,0.27,21,0.01,24,1.452,26,0.016,27,0.016,52,1.255,55,1.778,58,1.125,61,0.864,70,1.262,89,2.669,97,1.622,107,1.404,118,2.328,128,0.954,143,1.17,154,1.125,155,3.994,159,2.754,168,1.475,170,2.395,178,2.395,184,2.509,186,3.115,195,1.581,236,3.077,270,2.408,273,1.145,294,1.262,296,1.734,305,1.79,309,1.604,325,1.818,326,3.982,327,3.982,328,3.324,329,3.982,330,3.982,331,3.982,332,3.788,333,3.708,334,3.299,335,3.324,336,2.178,337,3.708,338,2.178,339,2.754,340,2.178,341,2.395,342,2.754,343,3.225,344,2.754,345,2.178,346,2.178,347,2.178,348,3.299,349,2.178,350,2.575,351,1.581,352,3.299,353,1.818,354,2.754,355,4.193,356,1.818,357,3.299,358,2.178,359,3.299,360,2.178,361,3.299,362,3.299,363,2.178,364,3.299,365,2.178,366,3.299,367,2.178,368,1.818,369,1.581,370,2.178,371,1.818,372,1.818,373,1.818,374,2.178,375,1.818]],["title/controllers/TaskController.html",[0,1.544,376,2.076]],["body/controllers/TaskController.html",[0,1.634,2,0.818,3,0.211,4,0.187,5,0.187,7,0.211,8,1.328,10,2.092,11,0.033,12,0.978,14,1.912,15,1.214,16,0.661,17,0.536,20,0.211,21,0.008,22,1.1,23,0.897,24,1.379,26,0.013,27,0.013,52,0.932,55,1.827,61,0.699,87,3.066,96,1.682,97,1.313,98,1.682,103,1.434,115,1.197,128,1.514,131,1.434,139,2.603,143,0.978,144,1.313,145,1.759,147,2.177,168,2.298,184,2.811,195,1.308,293,1.434,306,1.099,309,2.057,350,1.581,376,1.759,377,1.424,378,1.424,379,2.277,380,1.759,381,2.277,382,2.277,383,2.277,384,2.277,385,1.759,386,4.069,387,2.51,388,2.277,389,1.759,390,1.759,391,2.927,392,2.845,393,1.424,394,1.706,395,1.706,396,2.927,397,3.296,398,5.446,399,3.788,400,1.424,401,1.706,402,2.927,403,2.51,404,1.424,405,1.706,406,1.706,407,3.251,408,2.51,409,3.251,410,1.1,411,1.706,412,1.706,413,1.1,414,1.424,415,1.706,416,1.759,417,2.197,418,2.277,419,2.728,420,2.728,421,2.277,422,1.1,423,3.036,424,1.424,425,1.706,426,2.51,427,2.927,428,1.424,429,2.468,430,1.706,431,1.706,432,2.277,433,2.845,434,1.424,435,1.424,436,1.424,437,1.792,438,1.424,439,1.1,440,1.98,441,1.759,442,1.706,443,1.239,444,1.1,445,1.424,446,1.706,447,1.424,448,1.424,449,3.894,450,1.706,451,3.791,452,1.706,453,2.728,454,2.728,455,1.706,456,1.706,457,1.706,458,1.424,459,1.424,460,1.706,461,1.424,462,1.424,463,1.706,464,1.706,465,1.706,466,1.706,467,1.424,468,1.424,469,1.706]],["title/modules/TaskModule.html",[28,1.544,40,1.867]],["body/modules/TaskModule.html",[2,2.453,3,0.508,4,0.451,5,0.451,11,0.032,16,0.85,17,1.289,20,0.508,21,0.02,26,0.025,27,0.025,28,2.674,30,2.157,31,2.157,32,2.645,33,2.645,34,2.157,35,3.595,36,2.645,40,3.553,43,3.299,44,2.645,45,2.645,47,2.978,49,2.978,50,2.157,52,1.05,55,1.186,351,2.978,376,3.595,437,3.221,438,3.425,444,2.645,470,3.425,471,3.425,472,4.103,473,4.103,474,4.103]],["title/classes/TaskResponseDto.html",[21,0.015,399,2.076]],["body/classes/TaskResponseDto.html",[3,0.266,4,0.236,5,0.236,7,0.266,8,1.113,11,0.033,12,1.098,14,1.113,15,1.288,16,0.611,20,0.266,21,0.016,24,0.621,26,0.016,27,0.016,52,0.905,55,1.852,58,1.825,61,0.824,89,2.663,91,1.432,96,1.634,97,0.944,98,1.209,118,0.865,128,1.142,140,0.795,143,1.219,144,1.275,154,1.113,155,4.181,156,3.884,168,1.924,184,3.027,186,3.24,195,1.564,207,3.443,215,3.96,231,1.792,234,1.792,287,1.384,288,2.104,290,3.443,291,1.558,294,1.892,296,2.812,304,1.892,305,1.777,306,1.777,309,2.012,310,1.558,332,3.626,335,4.17,343,2.369,350,2.557,368,2.724,371,1.792,372,1.792,373,1.792,375,1.792,399,3.662,444,1.384,475,4.575,476,3.263,477,3.263,478,4.41,479,2.147,480,2.147,481,2.147,482,2.147,483,2.147,484,3.263,485,2.147,486,3.263,487,3.263,488,2.147,489,2.147,490,2.147,491,1.792,492,2.147,493,1.792,494,2.147,495,2.147,496,2.147,497,2.147,498,2.147,499,2.147,500,2.147,501,2.147,502,2.147,503,2.147,504,2.147,505,1.792,506,2.147,507,2.147]],["title/injectables/TaskService.html",[77,1.193,437,1.693]],["body/injectables/TaskService.html",[3,0.187,4,0.165,5,0.165,7,0.187,8,0.841,11,0.033,12,0.969,14,1.854,15,1.187,16,0.655,17,0.473,20,0.187,21,0.007,23,1.296,24,1.414,26,0.012,27,0.012,50,0.791,52,1.098,55,1.848,61,0.697,71,2.627,77,0.913,78,0.873,87,2.764,89,1.082,91,1.082,96,1.677,97,1.309,98,1.677,103,2.813,107,0.97,115,0.661,127,2.272,128,1.455,131,1.902,139,2.379,143,0.929,144,1.24,147,1.735,168,2.329,184,2.483,195,1.182,270,1.501,273,0.791,293,1.296,306,0.993,309,1.903,315,1.093,350,2.098,351,1.093,369,2.272,380,1.589,385,1.589,386,3.817,387,2.333,388,2.058,389,1.589,390,1.589,391,2.764,392,2.058,393,2.058,396,2.764,397,2.627,402,2.764,403,2.333,404,2.058,407,3.021,408,1.589,410,1.589,413,1.589,416,1.589,417,1.589,422,1.589,423,2.834,426,2.333,427,2.764,428,2.058,429,2.314,437,1.296,439,0.97,440,1.79,441,1.589,444,0.97,445,1.257,505,1.257,508,1.257,509,2.465,510,2.058,511,2.465,512,2.465,513,2.465,514,3.549,515,1.506,516,2.613,517,1.506,518,2.465,519,1.506,520,2.465,521,2.058,522,2.627,523,1.506,524,3.579,525,1.506,526,2.465,527,2.465,528,1.506,529,1.79,530,3.943,531,1.506,532,2.058,533,1.506,534,1.429,535,1.506,536,3.778,537,1.257,538,1.506,539,1.257,540,1.506,541,1.506,542,1.506,543,1.257,544,1.257,545,2.058,546,1.506,547,3.021,548,3.992,549,3.992,550,3.992,551,2.465,552,2.465,553,2.613,554,3.13,555,1.506,556,2.613,557,2.613,558,1.257,559,1.506,560,1.506,561,2.465,562,1.506,563,1.506]],["title/classes/UpdateTaskDto.html",[21,0.015,423,1.867]],["body/classes/UpdateTaskDto.html",[3,0.547,4,0.485,5,0.485,11,0.032,16,0.742,20,0.547,21,0.021,26,0.026,27,0.026,55,1.548,115,2.349,139,2.319,140,1.635,142,3.203,143,0.905,144,1.548,156,3.885,306,1.777,423,3.102,440,3.203,534,3.102,564,3.203,565,3.45,566,4.467,567,4.809,568,5.352,569,4.412,570,3.203,571,3.203]],["title/classes/UpdateTaskStatusDto.html",[21,0.015,429,1.867]],["body/classes/UpdateTaskStatusDto.html",[3,0.513,4,0.454,5,0.454,7,0.513,10,1.815,11,0.032,12,0.849,16,0.713,20,0.513,21,0.025,26,0.025,27,0.025,55,1.776,61,0.637,140,1.532,143,0.849,144,1.487,154,1.754,158,3.734,179,2.398,183,4.294,184,3.336,185,4.294,186,3.56,429,2.982,564,3.734,565,3.316,572,3.453,573,4.136,574,4.136]],["title/classes/UpdateUserDto.html",[21,0.015,575,1.867]],["body/classes/UpdateUserDto.html",[3,0.561,4,0.498,5,0.498,11,0.032,16,0.754,20,0.561,21,0.022,26,0.027,27,0.027,52,1.116,140,1.678,143,0.93,144,1.572,189,2.381,191,2.92,306,1.825,534,3.152,565,3.505,566,4.539,567,3.782,570,3.289,571,3.289,575,3.152,576,3.782,577,5.438,578,3.289]],["title/entities/User.html",[52,0.661,305,1.298]],["body/entities/User.html",[3,0.271,4,0.24,5,0.24,7,0.271,10,2.207,11,0.033,12,1.032,15,1.298,16,0.458,20,0.271,21,0.01,24,1.454,26,0.016,27,0.016,52,1.268,55,1.592,58,1.127,61,0.865,67,3.55,69,2.64,70,1.266,73,2.4,89,2.671,91,0.958,97,1.76,118,2.329,128,0.631,143,0.448,154,1.127,168,1.478,170,2.4,178,3.904,196,3.55,209,4.198,236,3.081,237,3.33,270,2.41,273,1.148,294,1.266,296,1.738,305,1.792,309,1.792,328,3.33,333,3.714,337,4.49,339,2.76,341,2.4,342,2.76,350,1.916,353,1.823,354,2.76,355,4.198,356,1.823,386,2.896,579,1.823,580,3.989,581,3.989,582,3.989,583,3.989,584,2.184,585,2.184,586,2.184,587,3.306,588,2.184,589,2.184,590,3.306,591,2.184,592,2.184,593,2.184,594,3.306,595,3.989,596,2.184,597,3.989,598,2.184,599,3.989,600,2.184,601,3.989,602,2.184,603,3.306,604,2.184,605,2.184,606,2.184]],["title/controllers/UserController.html",[0,1.544,607,2.076]],["body/controllers/UserController.html",[0,1.802,2,0.951,3,0.246,4,0.218,5,0.218,7,0.246,8,1.443,10,2.125,11,0.033,12,0.994,14,1.9,15,1.161,16,0.723,17,0.623,20,0.246,21,0.01,22,1.279,23,1.043,24,1.4,26,0.015,27,0.015,52,1.294,61,0.705,73,2.23,87,2.973,96,1.696,97,1.324,98,1.696,103,2.545,105,1.657,115,0.871,118,1.514,128,0.888,131,1.043,143,0.939,144,1.324,168,2.279,189,2.742,195,1.473,288,1.98,293,1.615,295,3.105,306,1.238,308,1.15,309,1.951,319,2.807,341,2.23,378,1.657,379,2.565,380,1.98,381,2.565,382,2.565,383,2.565,384,2.565,385,1.98,387,2.728,389,1.98,390,1.98,391,2.728,396,2.728,397,2.729,400,1.657,402,2.728,403,1.98,408,1.98,409,2.565,410,1.279,413,1.279,414,1.657,416,1.98,417,2.423,418,2.565,422,1.279,424,1.657,426,1.98,427,2.728,432,2.565,433,2.565,434,1.657,435,1.657,436,1.657,439,1.279,441,1.279,443,1.441,447,1.657,448,1.657,451,3.822,458,1.657,459,1.657,461,1.657,462,1.657,467,1.657,468,1.657,521,2.565,522,3.072,529,2.23,532,2.565,534,1.781,575,3.172,578,2.23,607,1.98,608,1.657,609,4.215,610,2.565,611,1.657,612,1.984,613,1.984,614,2.565,615,5.218,616,1.984,617,1.984,618,1.984,619,1.984,620,3.072,621,3.072,622,1.984,623,1.984,624,1.984,625,1.984,626,1.976,627,1.657,628,1.984,629,1.657,630,1.657,631,1.984,632,3.759,633,1.984,634,1.984,635,1.984,636,1.984,637,1.984,638,1.984,639,1.984,640,1.984,641,1.984,642,1.984]],["title/modules/UserModule.html",[28,1.544,41,1.867]],["body/modules/UserModule.html",[2,2.317,3,0.465,4,0.412,5,0.412,11,0.033,16,0.864,17,1.177,20,0.465,21,0.018,26,0.024,27,0.024,28,2.564,30,1.971,31,1.971,32,2.417,33,2.417,34,1.971,35,3.448,36,2.417,41,3.471,43,3.116,44,2.417,45,2.417,47,2.721,49,2.721,50,1.971,52,0.769,75,2.173,84,3.116,110,2.417,112,2.417,113,3.13,114,2.721,133,2.721,134,3.13,200,3.13,308,2.173,607,3.448,626,3.147,627,3.13,630,3.13,643,3.13,644,3.13,645,3.749,646,3.749,647,3.749,648,4.834,649,3.749,650,3.749,651,3.749,652,3.749,653,3.749,654,3.749,655,3.749]],["title/classes/UserResponse.html",[21,0.015,295,1.867]],["body/classes/UserResponse.html",[3,0.328,4,0.291,5,0.291,7,0.328,8,1.3,11,0.033,12,1.106,14,1.3,15,1.31,16,0.367,20,0.328,21,0.013,24,0.765,26,0.019,27,0.019,52,1.328,58,1.666,61,0.83,69,2.883,89,2.639,91,1.162,96,1.412,97,1.768,98,1.412,118,1.066,128,1.291,140,0.981,143,0.916,144,1.102,147,1.827,154,1.3,168,1.997,196,3.877,287,1.706,288,3.148,290,3.241,291,2.766,293,2.567,294,2.831,295,3.45,296,2.567,298,3.181,299,2.21,300,2.21,301,2.21,302,3.181,304,2.209,305,1.968,306,1.535,307,3.181,308,1.534,309,2.085,310,1.922,311,2.21,312,2.21,313,2.21,316,2.21,317,1.922,318,2.21,656,4.637,657,2.647,658,2.647]],["title/injectables/UserService.html",[77,1.193,626,1.693]],["body/injectables/UserService.html",[3,0.214,4,0.189,5,0.189,7,0.214,8,0.938,11,0.033,12,0.982,14,1.829,15,1.12,16,0.71,17,0.541,20,0.214,21,0.008,23,0.906,24,1.384,26,0.014,27,0.014,50,0.906,52,1.3,61,0.703,69,1.645,70,1.594,71,2.843,77,1.019,78,0.999,87,2.693,89,1.207,91,1.207,93,3.996,96,1.69,97,1.319,98,1.69,103,3.116,107,1.111,109,2.296,110,1.111,115,1.506,127,2.491,128,1.437,130,1.439,131,2.059,143,0.878,144,0.992,145,1.773,147,1.318,168,2.272,189,2.516,195,1.318,270,1.645,273,0.906,285,1.111,293,1.446,304,1.594,305,1.838,306,1.108,308,0.999,309,1.724,315,1.251,317,1.251,319,2.27,369,1.996,380,1.773,385,1.773,387,2.525,389,1.773,390,1.773,391,2.525,396,2.525,402,2.525,403,1.773,408,1.773,410,1.773,413,1.773,416,1.773,417,2.759,421,2.296,422,1.773,426,1.773,427,2.525,439,1.111,441,1.111,443,1.251,510,2.296,514,2.843,516,2.296,522,2.843,524,4.149,529,1.996,530,3.808,534,1.594,536,3.572,537,1.439,539,1.439,543,3.269,544,3.269,545,2.865,547,2.865,553,2.296,556,2.296,557,2.296,558,1.439,565,1.773,575,2.97,578,1.996,609,3.269,610,2.296,611,2.296,614,2.296,626,2.059,629,1.439,659,1.439,660,2.75,661,2.75,662,2.75,663,2.75,664,1.724,665,1.724,666,1.724,667,3.917,668,1.724,669,1.724,670,1.724,671,2.75,672,2.75,673,1.724,674,1.724,675,1.724,676,2.75,677,1.724,678,1.724,679,1.724,680,1.724,681,1.724,682,1.724,683,1.724,684,1.724,685,1.724,686,1.724,687,1.724,688,1.724,689,1.724,690,1.724,691,1.724,692,1.724,693,1.724,694,1.724,695,1.724]],["title/coverage.html",[696,3.173]],["body/coverage.html",[0,2.383,1,2.083,5,0.355,6,2.698,11,0.032,18,1.699,21,0.029,26,0.022,27,0.022,34,1.699,42,1.873,52,0.663,55,1.267,58,1.494,61,0.498,77,1.974,79,2.698,83,2.346,84,2.083,86,3.608,112,2.083,116,2.346,118,1.302,128,0.935,139,1.699,141,2.698,142,3.18,189,1.699,190,3.18,191,3.204,242,2.346,243,2.54,245,2.346,246,4.445,258,2.698,285,2.083,286,2.698,287,3.204,295,1.873,296,1.699,305,1.765,319,1.873,320,2.698,321,2.698,325,2.698,376,2.083,377,2.698,399,2.083,423,1.873,429,1.873,437,1.699,475,2.698,508,2.698,564,3.18,572,2.698,575,1.873,576,2.698,579,2.698,607,2.083,608,2.698,626,1.699,656,2.698,659,2.698,696,2.346,697,3.232,698,3.232,699,4.381,700,2.698,701,4.381,702,5.743,703,6.227,704,3.232,705,3.232,706,3.232,707,5.329,708,4.381,709,3.232,710,3.232,711,4.381,712,5.329,713,2.698,714,3.232,715,3.232,716,3.232,717,3.232,718,3.232,719,3.232,720,3.232,721,2.346,722,3.232,723,3.232]],["title/dependencies.html",[31,2.033,724,2.255]],["body/dependencies.html",[11,0.033,17,1.394,21,0.026,26,0.027,27,0.027,31,2.333,50,2.333,110,2.861,111,3.704,114,3.221,179,2.572,273,2.333,332,3.221,491,3.704,493,3.704,570,3.221,571,3.221,725,5.775,726,4.438,727,4.438,728,4.438,729,4.438,730,4.438,731,4.438,732,4.438,733,4.438,734,4.438,735,4.438,736,4.438,737,4.438,738,4.438,739,4.438]],["title/miscellaneous/enumerations.html",[740,1.186,741,3.228]],["body/miscellaneous/enumerations.html",[7,0.589,11,0.031,26,0.028,27,0.028,55,1.376,186,3.245,270,2.851,343,3.453,740,2.087,741,3.971,742,4.757,743,4.757,744,4.757,745,4.757,746,4.757,747,4.757,748,5.598,749,5.598]],["title/miscellaneous/functions.html",[740,1.186,750,3.228]],["body/miscellaneous/functions.html",[7,0.577,11,0.029,26,0.027,27,0.027,34,3.098,58,1.885,61,0.717,96,1.725,97,1.346,98,1.725,242,4.012,243,2.698,266,3.886,274,4.012,700,3.886,721,4.012,740,2.043,750,3.886,751,4.655,752,3.886,753,4.655,754,6.098,755,4.655]],["title/index.html",[7,0.335,756,2.702,757,2.702]],["body/index.html",[4,0.427,11,0.032,26,0.024,27,0.024,143,0.797,199,3.241,514,2.819,696,2.819,758,3.883,759,3.883,760,4.943,761,3.883,762,3.883,763,3.883,764,3.883,765,3.883,766,3.883,767,5.438,768,3.883,769,3.883,770,3.883,771,5.438,772,6.141,773,3.883,774,3.883,775,3.883,776,6.044,777,3.883,778,3.883,779,4.943,780,3.883,781,3.883,782,3.883,783,3.883,784,4.943,785,4.943,786,3.883,787,3.883,788,3.883,789,4.943,790,4.943,791,3.883,792,3.883,793,3.883,794,3.883,795,3.883,796,3.241,797,3.883,798,3.883,799,3.883,800,3.883,801,3.883,802,3.883,803,3.883,804,3.883,805,3.883,806,3.241,807,3.883,808,3.883,809,3.883,810,3.883,811,3.883,812,3.883,813,3.241]],["title/modules.html",[30,2.298]],["body/modules.html",[11,0.028,26,0.028,27,0.028,29,3.135,30,2.556,40,2.819,41,2.819,796,5.011,814,6.003,815,6.003,816,6.003]],["title/overview.html",[817,3.649]],["body/overview.html",[2,1.993,11,0.031,18,2.95,26,0.025,27,0.025,28,1.993,29,4.122,30,2.186,31,2.186,32,2.681,33,2.681,34,2.186,35,2.681,36,2.681,37,3.472,38,3.472,39,3.472,40,3.498,41,3.498,42,3.253,43,3.327,44,2.681,45,2.681,70,2.411,78,2.411,83,3.019,140,1.541,207,3.019,216,3.472,217,3.472,229,4.308,437,2.95,470,3.472,471,3.472,626,2.95,643,3.472,644,3.472,817,3.472,818,4.159]],["title/properties.html",[154,1.319,724,2.255]],["body/properties.html",[11,0.032,26,0.028,27,0.028,143,1.014,154,1.685,806,4.125,813,4.125,819,4.942,820,4.942,821,4.942]],["title/miscellaneous/typealiases.html",[740,1.186,822,3.867]],["body/miscellaneous/typealiases.html",[7,0.606,11,0.028,26,0.028,27,0.028,58,1.941,61,0.877,243,2.837,274,4.132,721,4.132,740,2.148,752,4.086,823,4.895,824,4.895]],["title/miscellaneous/variables.html",[740,1.186,825,3.228]],["body/miscellaneous/variables.html",[7,0.54,11,0.032,15,0.895,26,0.026,27,0.026,61,0.819,75,2.528,86,3.166,112,3.426,116,3.858,117,3.641,118,2.141,119,3.641,133,3.166,190,3.166,191,3.426,245,3.858,246,3.166,247,3.641,248,3.641,249,3.641,250,3.641,270,2.86,304,2.528,344,4.98,713,3.641,740,1.914,825,3.641,826,5.315,827,4.362,828,4.362,829,4.362]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":820,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["1/1",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":587,"title":{},"body":{"entities/User.html":{}}}],["16",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["2",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{},"overview.html":{}}}],["2/2",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["3.6.0",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["36",{"_index":167,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["4",{"_index":818,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["6/7",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":159,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{}}}],["60s",{"_index":654,"title":{},"body":{"modules/UserModule.html":{}}}],["7.8.1",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8,16",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["8.12.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["9/9",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["9])(?=.*[a",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["_creationdate",{"_index":326,"title":{},"body":{"entities/Task.html":{}}}],["_description",{"_index":327,"title":{},"body":{"entities/Task.html":{}}}],["_email",{"_index":580,"title":{},"body":{"entities/User.html":{}}}],["_id",{"_index":328,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["_name",{"_index":581,"title":{},"body":{"entities/User.html":{}}}],["_password",{"_index":582,"title":{},"body":{"entities/User.html":{}}}],["_status",{"_index":329,"title":{},"body":{"entities/Task.html":{}}}],["_tasks",{"_index":583,"title":{},"body":{"entities/User.html":{}}}],["_title",{"_index":330,"title":{},"body":{"entities/Task.html":{}}}],["_user",{"_index":331,"title":{},"body":{"entities/Task.html":{}}}],["_username",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["access_token",{"_index":289,"title":{},"body":{"classes/LoginResponse.html":{}}}],["address",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["adheres",{"_index":150,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["admin",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["aliases",{"_index":823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allows",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["alpha",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["already",{"_index":283,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["amazing",{"_index":797,"title":{},"body":{"index.html":{}}}],["api",{"_index":149,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["app",{"_index":774,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":648,"title":{},"body":{"modules/UserModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":766,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":268,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["args.constraints[0",{"_index":275,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["array",{"_index":403,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["assigned",{"_index":173,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["associated",{"_index":350,"title":{},"body":{"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["async",{"_index":87,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["atleast",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth.guard",{"_index":630,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["authguard",{"_index":84,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["author",{"_index":806,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["awesome_todo",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":798,"title":{},"body":{"index.html":{}}}],["bearer",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{}}}],["body",{"_index":433,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":816,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":814,"title":{},"body":{"modules.html":{}}}],["building",{"_index":761,"title":{},"body":{"index.html":{}}}],["business",{"_index":511,"title":{},"body":{"injectables/TaskService.html":{}}}],["canactivate",{"_index":88,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":99,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{}}}],["character",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":181,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["characters'})@isalphanumeric('es",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters'})@isnotempty({message",{"_index":161,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["characters.'})@maxlength(30",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars.'})@isunique({tablename",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":21,"title":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponse.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":140,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponse.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":470,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":471,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":643,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":644,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["column({type",{"_index":333,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["completion",{"_index":419,"title":{},"body":{"controllers/TaskController.html":{}}}],["console.log(task",{"_index":555,"title":{},"body":{"injectables/TaskService.html":{}}}],["const",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constraint",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["constraint.ts",{"_index":258,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"coverage.html":{}}}],["constraint.ts:12",{"_index":262,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constraint.ts:14",{"_index":269,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constraint.ts:26",{"_index":265,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constructor",{"_index":91,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["constructor(entitymanager",{"_index":260,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constructor(id",{"_index":291,"title":{},"body":{"classes/LoginResponse.html":{},"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["constructor(jwtservice",{"_index":92,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(name",{"_index":606,"title":{},"body":{"entities/User.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["constructor(taskrepository",{"_index":515,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(title",{"_index":370,"title":{},"body":{"entities/Task.html":{}}}],["constructor(userrepository",{"_index":664,"title":{},"body":{"injectables/UserService.html":{}}}],["constructs",{"_index":368,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["contain",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":396,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["context",{"_index":102,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.getclass",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":124,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('task",{"_index":446,"title":{},"body":{"controllers/TaskController.html":{}}}],["controller('user",{"_index":631,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cosntants",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{}}}],["coverage",{"_index":696,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":306,"title":{},"body":{"classes/LoginResponse.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":448,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["create(createtaskdto",{"_index":393,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["create(createuserdto",{"_index":611,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["created",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createquerybuilder('task",{"_index":549,"title":{},"body":{"injectables/TaskService.html":{}}}],["createquerybuilder('user",{"_index":544,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["createquerybuilder(tablename",{"_index":279,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["creates",{"_index":293,"title":{},"body":{"classes/LoginResponse.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["createtaskdto",{"_index":139,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createtaskdto.description",{"_index":542,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtaskdto.title",{"_index":541,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtaskdto.user_id",{"_index":546,"title":{},"body":{"injectables/TaskService.html":{}}}],["createuserdto",{"_index":189,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":682,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.name",{"_index":679,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":681,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.username",{"_index":680,"title":{},"body":{"injectables/UserService.html":{}}}],["creating",{"_index":145,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["creation",{"_index":521,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["creationdate",{"_index":335,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["creationdate(value",{"_index":365,"title":{},"body":{"entities/Task.html":{}}}],["creationdate.tolocaledatestring('es",{"_index":495,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["crud",{"_index":384,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["current",{"_index":478,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["data",{"_index":147,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["database",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["dataexist",{"_index":276,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["date",{"_index":332,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"dependencies.html":{}}}],["day",{"_index":496,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["decorator.ts",{"_index":721,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":344,"title":{},"body":{"entities/Task.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":259,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["defaultmessage(validationarguments",{"_index":263,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["defines",{"_index":382,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["delete",{"_index":417,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":467,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":532,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["deletes",{"_index":416,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleting",{"_index":662,"title":{},"body":{"injectables/UserService.html":{}}}],["deletion",{"_index":420,"title":{},"body":{"controllers/TaskController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":143,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["description(value",{"_index":360,"title":{},"body":{"entities/Task.html":{}}}],["details",{"_index":522,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["development",{"_index":775,"title":{},"body":{"index.html":{}}}],["digit",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{}}}],["documentation",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":749,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":144,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["dto.ts",{"_index":321,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["dto.ts:13",{"_index":323,"title":{},"body":{"classes/SignInDto.html":{}}}],["dto.ts:8",{"_index":324,"title":{},"body":{"classes/SignInDto.html":{}}}],["dto/create",{"_index":439,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/login",{"_index":677,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/signin",{"_index":629,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/task",{"_index":442,"title":{},"body":{"controllers/TaskController.html":{}}}],["dto/update",{"_index":441,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user",{"_index":628,"title":{},"body":{"controllers/UserController.html":{}}}],["e2e",{"_index":786,"title":{},"body":{"index.html":{}}}],["each",{"_index":341,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["ecret",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":762,"title":{},"body":{"index.html":{}}}],["email",{"_index":196,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["email(value",{"_index":602,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":620,"title":{},"body":{"controllers/UserController.html":{}}}],["ensures",{"_index":146,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["entities",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"entities/Task.html":{},"entities/User.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["entities/task.entity",{"_index":444,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{}}}],["entities/user.entity",{"_index":308,"title":{},"body":{"classes/LoginResponse.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":305,"title":{"entities/Task.html":{},"entities/User.html":{}},"body":{"classes/LoginResponse.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entitymanager",{"_index":261,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["enum",{"_index":343,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":741,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["es",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{}}}],["example",{"_index":771,"title":{},"body":{"index.html":{}}}],["execute",{"_index":687,"title":{},"body":{"injectables/UserService.html":{}}}],["executioncontext",{"_index":100,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exist",{"_index":284,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["existing",{"_index":534,"title":{},"body":{"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["expiresin",{"_index":653,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["expose",{"_index":488,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["express",{"_index":111,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":566,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["extracttokenfromheader",{"_index":90,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":104,"title":{},"body":{"guards/AuthGuard.html":{}}}],["factory",{"_index":486,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["field",{"_index":281,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":387,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findallbyuser",{"_index":388,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["findallbyuser(@param('id",{"_index":456,"title":{},"body":{"controllers/TaskController.html":{}}}],["findallbyuser(id",{"_index":404,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["finding",{"_index":661,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":389,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":459,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":410,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["fns",{"_index":493,"title":{},"body":{"classes/TaskResponseDto.html":{},"dependencies.html":{}}}],["format",{"_index":492,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["formatted",{"_index":615,"title":{},"body":{"controllers/UserController.html":{}}}],["found",{"_index":530,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":760,"title":{},"body":{"index.html":{}}}],["full",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["function",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":750,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":342,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["get(':id",{"_index":458,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["get(':id')@httpcode(httpstatus.ok",{"_index":617,"title":{},"body":{"controllers/UserController.html":{}}}],["get('user/:id",{"_index":455,"title":{},"body":{"controllers/TaskController.html":{}}}],["get()@httpcode(httpstatus.ok",{"_index":400,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["getexists",{"_index":280,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":551,"title":{},"body":{"injectables/TaskService.html":{}}}],["getone",{"_index":547,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["getrepository(tablename",{"_index":278,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["getting",{"_index":756,"title":{"index.html":{}},"body":{}}],["given",{"_index":369,"title":{},"body":{"entities/Task.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["global",{"_index":651,"title":{},"body":{"modules/UserModule.html":{}}}],["grow",{"_index":793,"title":{},"body":{"index.html":{}}}],["guard",{"_index":83,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":85,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handles",{"_index":510,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["handling",{"_index":379,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["hello",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":803,"title":{},"body":{"index.html":{}}}],["host",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["hour",{"_index":499,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["httpcode",{"_index":435,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.created",{"_index":447,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.created)@post",{"_index":394,"title":{},"body":{"controllers/TaskController.html":{}}}],["httpcode(httpstatus.ok",{"_index":451,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok)@delete(':id",{"_index":414,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok)@get(':id",{"_index":411,"title":{},"body":{"controllers/TaskController.html":{}}}],["httpcode(httpstatus.ok)@get('user/:id",{"_index":405,"title":{},"body":{"controllers/TaskController.html":{}}}],["httpcode(httpstatus.ok)@patch(':id",{"_index":424,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok)@patch('status/:id",{"_index":430,"title":{},"body":{"controllers/TaskController.html":{}}}],["https://nestjs.com",{"_index":810,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":436,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["id",{"_index":168,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/LoginResponse.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["id(value",{"_index":356,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["identifier",{"_index":296,"title":{},"body":{"classes/LoginResponse.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["implements",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["in_progress",{"_index":748,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["including",{"_index":660,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":418,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["initialize",{"_index":605,"title":{},"body":{"entities/User.html":{}}}],["injectable",{"_index":77,"title":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":537,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["injectrepository(task",{"_index":538,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectrepository(user",{"_index":539,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["input",{"_index":194,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["installation",{"_index":770,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":773,"title":{},"body":{"index.html":{}}}],["instance",{"_index":294,"title":{},"body":{"classes/LoginResponse.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["interacts",{"_index":513,"title":{},"body":{"injectables/TaskService.html":{}}}],["is_public_key",{"_index":116,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalphanumeric",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isalphanumeric('es",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":574,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["isenum(taskstatus",{"_index":183,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty",{"_index":177,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty({message",{"_index":197,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispublic",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":174,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@length(36",{"_index":166,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isstring()@maxlength(60",{"_index":164,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isstring()@minlength(2",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(5",{"_index":157,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isuniqeinterface",{"_index":274,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["isunique",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isunique(options",{"_index":753,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isuniqueconstraint",{"_index":42,"title":{"injectables/IsUniqueConstraint.html":{}},"body":{"modules/AppModule.html":{},"injectables/IsUniqueConstraint.html":{},"coverage.html":{},"overview.html":{}}}],["join",{"_index":800,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":297,"title":{},"body":{"classes/LoginResponse.html":{}}}],["jwtconstants",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{}}}],["jwtmodule",{"_index":647,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":650,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtservice",{"_index":93,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserService.html":{}}}],["kamil",{"_index":807,"title":{},"body":{"index.html":{}}}],["key",{"_index":558,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["leftjoinandselect('task._user",{"_index":550,"title":{},"body":{"injectables/TaskService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":178,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["length'})@isnotempty({message",{"_index":171,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["length(36",{"_index":188,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["less",{"_index":160,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["letter",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":813,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":790,"title":{},"body":{"index.html":{}}}],["list",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["literal",{"_index":824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["localhost",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":512,"title":{},"body":{"injectables/TaskService.html":{}}}],["loginresponse",{"_index":285,"title":{"classes/LoginResponse.html":{}},"body":{"classes/LoginResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["loginresponse.of(user",{"_index":694,"title":{},"body":{"injectables/UserService.html":{}}}],["long",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lowercase",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory",{"_index":162,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["mandatory'})@isemail",{"_index":198,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory'})@matches(passwordregex",{"_index":212,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory'})@minlength(3",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["manytoone",{"_index":352,"title":{},"body":{"entities/Task.html":{}}}],["manytoone(undefined",{"_index":347,"title":{},"body":{"entities/Task.html":{}}}],["match",{"_index":169,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["matches",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(passwordregex",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":176,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(30",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(60",{"_index":180,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["message",{"_index":158,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["metadata",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":487,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":175,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":182,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["minute",{"_index":500,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["miscellaneous",{"_index":740,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":789,"title":{},"body":{"index.html":{}}}],["mode",{"_index":779,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":497,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["more",{"_index":802,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":808,"title":{},"body":{"index.html":{}}}],["name",{"_index":97,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["name(value",{"_index":596,"title":{},"body":{"entities/User.html":{}}}],["necessary",{"_index":151,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["nest",{"_index":767,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":812,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":110,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":570,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newly",{"_index":614,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["node.js",{"_index":759,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":536,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('no",{"_index":557,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":772,"title":{},"body":{"index.html":{}}}],["null",{"_index":556,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["numeric",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{}}}],["object",{"_index":304,"title":{},"body":{"classes/LoginResponse.html":{},"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object.entries(updatetaskdto",{"_index":559,"title":{},"body":{"injectables/TaskService.html":{}}}],["object.entries(updateuserdto",{"_index":684,"title":{},"body":{"injectables/UserService.html":{}}}],["of(task",{"_index":484,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["of(user",{"_index":302,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["omittype",{"_index":569,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["omittype(createtaskdto",{"_index":568,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["one",{"_index":214,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":594,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":589,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":791,"title":{},"body":{"index.html":{}}}],["operation",{"_index":421,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["operations",{"_index":385,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["optional",{"_index":98,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":755,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":817,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":724,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":309,"title":{},"body":{"classes/LoginResponse.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["param('id",{"_index":465,"title":{},"body":{"controllers/TaskController.html":{}}}],["parameters",{"_index":96,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":185,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["partialtype",{"_index":567,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":577,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["password(value",{"_index":600,"title":{},"body":{"entities/User.html":{}}}],["passwordregex",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":434,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":461,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["patch('status/:id",{"_index":464,"title":{},"body":{"controllers/TaskController.html":{}}}],["payload",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserService.html":{}}}],["pg",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["plaintoinstance",{"_index":489,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["please",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["populated",{"_index":307,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["port",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":432,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":640,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":378,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":353,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":339,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["private",{"_index":89,"title":{},"body":{"guards/AuthGuard.html":{},"classes/LoginResponse.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["production",{"_index":781,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":758,"title":{},"body":{"index.html":{}}}],["project",{"_index":792,"title":{},"body":{"index.html":{}}}],["promise",{"_index":103,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":154,"title":{"properties.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"properties.html":{}}}],["provide",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/UserModule.html":{}}}],["provided",{"_index":477,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{},"classes/LoginResponse.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@httpcode(httpstatus.created)@post",{"_index":612,"title":{},"body":{"controllers/UserController.html":{}}}],["public()@httpcode(httpstatus.ok)@post('login",{"_index":623,"title":{},"body":{"controllers/UserController.html":{}}}],["read",{"_index":801,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["record",{"_index":667,"title":{},"body":{"injectables/UserService.html":{}}}],["records",{"_index":663,"title":{},"body":{"injectables/UserService.html":{}}}],["reflect",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":94,"title":{},"body":{"guards/AuthGuard.html":{}}}],["related",{"_index":380,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove",{"_index":390,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":468,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":413,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":514,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":744,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["request",{"_index":105,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/UserController.html":{}}}],["request.headers.authorization?.split",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requests",{"_index":381,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":524,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["response",{"_index":288,"title":{},"body":{"classes/LoginResponse.html":{},"classes/TaskResponseDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{}}}],["response.dto",{"_index":443,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["response.dto.ts",{"_index":287,"title":{},"body":{"classes/LoginResponse.html":{},"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":299,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["response.dto.ts:13",{"_index":481,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:15",{"_index":300,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["response.dto.ts:18",{"_index":483,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:20",{"_index":301,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["response.dto.ts:23",{"_index":480,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:25",{"_index":298,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["response.dto.ts:28",{"_index":482,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:30",{"_index":292,"title":{},"body":{"classes/LoginResponse.html":{}}}],["response.dto.ts:33",{"_index":479,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:38",{"_index":476,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:48",{"_index":657,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:62",{"_index":303,"title":{},"body":{"classes/LoginResponse.html":{}}}],["response.dto.ts:78",{"_index":485,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["result",{"_index":671,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":408,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["retrieved",{"_index":527,"title":{},"body":{"injectables/TaskService.html":{}}}],["retrieves",{"_index":402,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["routes",{"_index":383,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["rules",{"_index":153,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["run",{"_index":776,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["saves",{"_index":520,"title":{},"body":{"injectables/TaskService.html":{}}}],["scalable",{"_index":763,"title":{},"body":{"index.html":{}}}],["second",{"_index":501,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["secret",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["sent",{"_index":148,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["server",{"_index":764,"title":{},"body":{"index.html":{}}}],["service",{"_index":509,"title":{},"body":{"injectables/TaskService.html":{}}}],["set",{"_index":355,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["setmetadata",{"_index":108,"title":{},"body":{"guards/AuthGuard.html":{}}}],["setmetadata(is_public_key",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":765,"title":{},"body":{"index.html":{}}}],["sign",{"_index":322,"title":{},"body":{"classes/SignInDto.html":{}}}],["signin",{"_index":610,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["signin(@body",{"_index":641,"title":{},"body":{"controllers/UserController.html":{}}}],["signin(signindto",{"_index":622,"title":{},"body":{"controllers/UserController.html":{}}}],["signin(singindto",{"_index":672,"title":{},"body":{"injectables/UserService.html":{}}}],["signindto",{"_index":319,"title":{"classes/SignInDto.html":{}},"body":{"classes/SignInDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["signoptions",{"_index":652,"title":{},"body":{"modules/UserModule.html":{}}}],["singindto",{"_index":674,"title":{},"body":{"injectables/UserService.html":{}}}],["singindto.password",{"_index":692,"title":{},"body":{"injectables/UserService.html":{}}}],["singindto.username",{"_index":690,"title":{},"body":{"injectables/UserService.html":{}}}],["single",{"_index":529,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"index.html":{}}}],["space",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["special",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":407,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["specified",{"_index":409,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["sponsors",{"_index":795,"title":{},"body":{"index.html":{}}}],["src/.../auth.guard.ts",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cosntants.ts",{"_index":827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":752,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":751,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../taskstatus.ts",{"_index":742,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["src/main.ts",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/task/dto/create",{"_index":141,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/task/dto/task",{"_index":475,"title":{},"body":{"classes/TaskResponseDto.html":{},"coverage.html":{}}}],["src/task/dto/update",{"_index":564,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["src/task/entities/task.entity",{"_index":593,"title":{},"body":{"entities/User.html":{}}}],["src/task/entities/task.entity.ts",{"_index":325,"title":{},"body":{"entities/Task.html":{},"coverage.html":{}}}],["src/task/entities/task.entity.ts:14",{"_index":340,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:26",{"_index":346,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:38",{"_index":338,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:55",{"_index":345,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:67",{"_index":336,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:80",{"_index":349,"title":{},"body":{"entities/Task.html":{}}}],["src/task/task.controller.ts",{"_index":377,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/task/task.controller.ts:106",{"_index":415,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:34",{"_index":395,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:44",{"_index":401,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:56",{"_index":406,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:68",{"_index":412,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:80",{"_index":425,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:92",{"_index":431,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.module.ts",{"_index":472,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/task/task.service.ts",{"_index":508,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/task/task.service.ts:101",{"_index":533,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:129",{"_index":535,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:15",{"_index":517,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:151",{"_index":531,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:27",{"_index":519,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:45",{"_index":523,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:58",{"_index":525,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:79",{"_index":528,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/taskstatus.ts",{"_index":743,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/auth.guard.ts",{"_index":86,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/auth.guard.ts:17",{"_index":95,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/user/auth.guard.ts:23",{"_index":101,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/user/auth.guard.ts:48",{"_index":106,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/user/cosntants.ts",{"_index":713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/create",{"_index":190,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/login",{"_index":286,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/user/dto/signin",{"_index":320,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":576,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/user",{"_index":656,"title":{},"body":{"classes/UserResponse.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":351,"title":{},"body":{"entities/Task.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":579,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:13",{"_index":585,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:25",{"_index":586,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:37",{"_index":592,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:49",{"_index":588,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:61",{"_index":584,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:73",{"_index":591,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":608,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:38",{"_index":613,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:49",{"_index":616,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:62",{"_index":618,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:75",{"_index":625,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":619,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:94",{"_index":624,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":645,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":659,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:104",{"_index":670,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:113",{"_index":673,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":665,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:32",{"_index":666,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":668,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:59",{"_index":669,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:79",{"_index":675,"title":{},"body":{"injectables/UserService.html":{}}}],["src/validation/unique/is",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["start",{"_index":777,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":780,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":782,"title":{},"body":{"index.html":{}}}],["started",{"_index":757,"title":{"index.html":{}},"body":{}}],["starter",{"_index":769,"title":{},"body":{"index.html":{}}}],["state",{"_index":187,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["statements",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":290,"title":{},"body":{"classes/LoginResponse.html":{},"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["status",{"_index":184,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["status(value",{"_index":363,"title":{},"body":{"entities/Task.html":{}}}],["status.dto",{"_index":445,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["status.dto.ts",{"_index":572,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:14",{"_index":573,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["status.status",{"_index":562,"title":{},"body":{"injectables/TaskService.html":{}}}],["statuses",{"_index":746,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":804,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":693,"title":{},"body":{"injectables/UserService.html":{}}}],["successfully",{"_index":621,"title":{},"body":{"controllers/UserController.html":{}}}],["support",{"_index":796,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":815,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["tablename",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":55,"title":{"entities/Task.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["task.controller",{"_index":473,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.creationdate",{"_index":507,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.description",{"_index":504,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.dto",{"_index":440,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts",{"_index":142,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:21",{"_index":165,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:29",{"_index":163,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:40",{"_index":172,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.id",{"_index":502,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.service",{"_index":438,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.status",{"_index":505,"title":{},"body":{"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{}}}],["task.title",{"_index":503,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.user",{"_index":590,"title":{},"body":{"entities/User.html":{}}}],["task.user.id",{"_index":506,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task/entities/task.entity",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["task/task.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["task[key",{"_index":560,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcontroller",{"_index":376,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskmodule",{"_index":40,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskrepository",{"_index":518,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskresponsedto",{"_index":399,"title":{"classes/TaskResponseDto.html":{}},"body":{"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"coverage.html":{}}}],["taskresponsedto.of(await",{"_index":449,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskresponsedto.of(task",{"_index":454,"title":{},"body":{"controllers/TaskController.html":{}}}],["tasks",{"_index":386,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["tasks(value",{"_index":604,"title":{},"body":{"entities/User.html":{}}}],["tasks.map((task",{"_index":453,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskservice",{"_index":437,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":186,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskStatusDto.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.to_do",{"_index":361,"title":{},"body":{"entities/Task.html":{}}}],["test",{"_index":785,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":788,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":787,"title":{},"body":{"index.html":{}}}],["tests",{"_index":784,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":794,"title":{},"body":{"index.html":{}}}],["this._creationdate",{"_index":364,"title":{},"body":{"entities/Task.html":{}}}],["this._description",{"_index":359,"title":{},"body":{"entities/Task.html":{}}}],["this._email",{"_index":601,"title":{},"body":{"entities/User.html":{}}}],["this._id",{"_index":354,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["this._name",{"_index":595,"title":{},"body":{"entities/User.html":{}}}],["this._password",{"_index":599,"title":{},"body":{"entities/User.html":{}}}],["this._status",{"_index":362,"title":{},"body":{"entities/Task.html":{}}}],["this._tasks",{"_index":603,"title":{},"body":{"entities/User.html":{}}}],["this._title",{"_index":357,"title":{},"body":{"entities/Task.html":{}}}],["this._user",{"_index":366,"title":{},"body":{"entities/Task.html":{}}}],["this._username",{"_index":597,"title":{},"body":{"entities/User.html":{}}}],["this.access_token",{"_index":314,"title":{},"body":{"classes/LoginResponse.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.creationdate",{"_index":375,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.description",{"_index":372,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.email",{"_index":313,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["this.entitymanager",{"_index":277,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["this.extracttokenfromheader(request",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.id",{"_index":310,"title":{},"body":{"classes/LoginResponse.html":{},"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["this.jwtservice.signasync(payload",{"_index":695,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.name",{"_index":311,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.status",{"_index":373,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.taskrepository",{"_index":548,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.delete(id",{"_index":563,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.find",{"_index":552,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save",{"_index":540,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save(task",{"_index":561,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.create(createtaskdto",{"_index":450,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findall",{"_index":452,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findallbyuser(id",{"_index":457,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findone(id",{"_index":460,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.remove(id",{"_index":469,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.update(id",{"_index":463,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatestatus(id",{"_index":466,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.title",{"_index":371,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.user",{"_index":374,"title":{},"body":{"entities/Task.html":{}}}],["this.user_id",{"_index":494,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["this.username",{"_index":312,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["this.userrepository",{"_index":543,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.delete(id",{"_index":688,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":683,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":678,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":686,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":633,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":634,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":637,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":639,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.signin(signindto",{"_index":642,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":638,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["throws",{"_index":553,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":334,"title":{},"body":{"entities/Task.html":{}}}],["title",{"_index":155,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["title(value",{"_index":358,"title":{},"body":{"entities/Task.html":{}}}],["to_do",{"_index":747,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["token",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{}}}],["touch",{"_index":805,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":676,"title":{},"body":{"injectables/UserService.html":{}}}],["transform",{"_index":490,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["transformer",{"_index":491,"title":{},"body":{"classes/TaskResponseDto.html":{},"dependencies.html":{}}}],["true",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{}}}],["twitter",{"_index":811,"title":{},"body":{"index.html":{}}}],["type",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":822,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":273,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":474,"title":{},"body":{"modules/TaskModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":649,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":571,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":768,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":109,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserService.html":{}}}],["undefined",{"_index":107,"title":{},"body":{"guards/AuthGuard.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["unique",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/LoginResponse.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":783,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":397,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":821,"title":{},"body":{"properties.html":{}}}],["update",{"_index":391,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":462,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":422,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":427,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updates",{"_index":426,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatestatus",{"_index":392,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatestatus(id",{"_index":428,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatetaskdto",{"_index":423,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updatetaskstatusdto",{"_index":429,"title":{"classes/UpdateTaskStatusDto.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":575,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updating",{"_index":565,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["uppercase",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["useclass",{"_index":655,"title":{},"body":{"modules/UserModule.html":{}}}],["used",{"_index":192,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user",{"_index":52,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user's",{"_index":203,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["user(value",{"_index":367,"title":{},"body":{"entities/Task.html":{}}}],["user.controller",{"_index":646,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":578,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":191,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:28",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:53",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:60",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":318,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["user.id",{"_index":315,"title":{},"body":{"classes/LoginResponse.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["user.name",{"_index":316,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{}}}],["user.service",{"_index":627,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.tasks",{"_index":348,"title":{},"body":{"entities/Task.html":{}}}],["user.username",{"_index":317,"title":{},"body":{"classes/LoginResponse.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["user/entities/user.entity",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["user?.password",{"_index":691,"title":{},"body":{"injectables/UserService.html":{}}}],["user[key",{"_index":685,"title":{},"body":{"injectables/UserService.html":{}}}],["user_id",{"_index":156,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{}}}],["usercontroller",{"_index":607,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":41,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/LoginResponse.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["username(value",{"_index":598,"title":{},"body":{"entities/User.html":{}}}],["userrepository",{"_index":516,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["userresponse",{"_index":295,"title":{"classes/UserResponse.html":{}},"body":{"classes/LoginResponse.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["userresponse(user.id",{"_index":658,"title":{},"body":{"classes/UserResponse.html":{}}}],["userresponse.of(await",{"_index":632,"title":{},"body":{"controllers/UserController.html":{}}}],["userresponse.of(user",{"_index":636,"title":{},"body":{"controllers/UserController.html":{}}}],["users",{"_index":609,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.map((user",{"_index":635,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":626,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":170,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["valid",{"_index":201,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":193,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["validate(value",{"_index":267,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validation",{"_index":152,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["validation/unique/is",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["validationarguments",{"_index":264,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validationarguments.property",{"_index":282,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validationoptions",{"_index":754,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":179,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/UpdateTaskStatusDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":271,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validatorconstraintinterface",{"_index":272,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["value",{"_index":270,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":337,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["variable",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":825,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":745,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":819,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":778,"title":{},"body":{"index.html":{}}}],["website",{"_index":809,"title":{},"body":{"index.html":{}}}],["where('task.id",{"_index":554,"title":{},"body":{"injectables/TaskService.html":{}}}],["where('user.id",{"_index":545,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["where('user.username",{"_index":689,"title":{},"body":{"injectables/UserService.html":{}}}],["whose",{"_index":526,"title":{},"body":{"injectables/TaskService.html":{}}}],["world",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["wrapped",{"_index":398,"title":{},"body":{"controllers/TaskController.html":{}}}],["year",{"_index":498,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["yes",{"_index":266,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":799,"title":{},"body":{"index.html":{}}}],["z])(?=.*[a",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\w",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nIsUniqueConstraint\n\nIsUniqueConstraint\n\nAppModule -->\n\nIsUniqueConstraint->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            IsUniqueConstraint\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TaskModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './user/user.module';\nimport { User } from './user/entities/user.entity';\nimport { TaskModule } from './task/task.module';\nimport { Task } from './task/entities/task.entity';\nimport { IsUniqueConstraint } from './validation/unique/is-unique-constraint';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: 'localhost',\n      port: 5432,\n      password: 'admin',\n      username: 'postgres',\n      entities: [User, Task],\n      database: 'awesome_todo-list',\n      synchronize: true,\n      logging: true,\n    }),\n    UserModule,\n    TaskModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, IsUniqueConstraint],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/user/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/user/auth.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/auth.guard.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/auth.guard.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  SetMetadata,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { jwtConstants } from './cosntants';\nimport { Reflector } from '@nestjs/core';\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/create-task.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new task.\nThis DTO ensures that the data sent to the API for creating a task\nadheres to the necessary validation rules.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(5, {message: 'Description must have 60 or less characters'})@IsNotEmpty({message: 'Description is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:29\n                        \n                    \n\n            \n                \n                    The description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(60, {message: 'Title must have 60 or less characters'})@IsNotEmpty({message: 'Title is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:21\n                        \n                    \n\n            \n                \n                    The title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(36, 36, {message: 'User ID must match UUID length'})@IsNotEmpty({message: 'Description is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:40\n                        \n                    \n\n            \n                \n                    The ID of the user to whom the task is assigned.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  MinLength,\n  MaxLength,\n  IsNotEmpty,\n  Length,\n} from 'class-validator';\n\n/**\n * DTO for creating a new task.\n * This DTO ensures that the data sent to the API for creating a task\n * adheres to the necessary validation rules.\n */\nexport class CreateTaskDto {\n  /**\n   * The title of the task.\n   */\n  @IsString()\n  @MaxLength(60, { message: 'Title must have 60 or less characters' })\n  @IsNotEmpty({ message: 'Title is mandatory' })\n  title: string;\n\n  /**\n   * The description of the task.\n   */\n  @IsString()\n  @MinLength(5, { message: 'Description must have 60 or less characters' })\n  @IsNotEmpty({ message: 'Description is mandatory' })\n  description: string;\n\n  //@IsEnum(TaskStatus, { message: 'Status must be part of TaskStatus' })\n  //state: TaskStatus;\n\n  /**\n   * The ID of the user to whom the task is assigned.\n   */\n  @IsString()\n  @Length(36, 36, { message: 'User ID must match UUID length' })\n  @IsNotEmpty({ message: 'Description is mandatory' })\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\nThis class is used to validate the input data when a new user is created.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Email is mandatory'})@IsEmail({}, {message: 'Please provide valid Email.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:60\n                        \n                    \n\n            \n                \n                    The user's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(2, {message: 'Name must have atleast 2 characters.'})@MaxLength(30, {message: 'Name must have 30 or less characters'})@IsNotEmpty({message: 'Name is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    The user's full name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password is mandatory'})@Matches(passwordRegEx, {message: Password must contain one digit from 1 to 9, one lowercase letter, one uppercase letter, one special character, no space, and it must be 8-16 characters long.})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    The user's password.\nPassword must contain one digit from 1 to 9,\none lowercase letter, one uppercase letter,\none special character, no space,\nand it must be 8-16 characters long.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Username is mandatory'})@MinLength(3, {message: 'Username must have atleast 3 characters.'})@MaxLength(30, {message: 'Username must have 30 or less characters'})@IsAlphanumeric('es-ES', {message: 'Username only allows alpha numeric chars.'})@IsUnique({tableName: 'user', column: '_username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:40\n                        \n                    \n\n            \n                \n                    The user's unique username.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { IsUnique } from 'src/validation/unique/is-unique-decorator';\n\nconst passwordRegEx =\n  /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/;\n\n/**\n * DTO for creating a new user.\n * This class is used to validate the input data when a new user is created.\n */\nexport class CreateUserDto {\n  /**\n   * The user's full name.\n   */\n  @IsString()\n  @MinLength(2, { message: 'Name must have atleast 2 characters.' })\n  @MaxLength(30, { message: 'Name must have 30 or less characters' })\n  @IsNotEmpty({ message: 'Name is mandatory' })\n  name: string;\n\n  /**\n   * The user's unique username.\n   */\n  @IsNotEmpty({ message: 'Username is mandatory' })\n  @MinLength(3, { message: 'Username must have atleast 3 characters.' })\n  @MaxLength(30, { message: 'Username must have 30 or less characters' })\n  @IsAlphanumeric('es-ES', {\n    message: 'Username only allows alpha numeric chars.',\n  })\n  @IsUnique({ tableName: 'user', column: '_username' })\n  username: string;\n\n  /**\n   * The user's password.\n   * Password must contain one digit from 1 to 9,\n   * one lowercase letter, one uppercase letter,\n   * one special character, no space,\n   * and it must be 8-16 characters long.\n   */\n  @IsNotEmpty({ message: 'Password is mandatory' })\n  @Matches(passwordRegEx, {\n    message: `Password must contain one digit from 1 to 9, one lowercase letter, one uppercase letter, one special character, no space, and it must be 8-16 characters long.`,\n  })\n  password: string;\n\n  /**\n   * The user's email address.\n   */\n  @IsNotEmpty({ message: 'Email is mandatory' })\n  @IsEmail({}, { message: 'Please provide valid Email.' })\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsUniqueConstraint.html":{"url":"injectables/IsUniqueConstraint.html","title":"injectable - IsUniqueConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsUniqueConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/unique/is-unique-constraint.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityManager: EntityManager)\n                    \n                \n                        \n                            \n                                Defined in src/validation/unique/is-unique-constraint.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/unique/is-unique-constraint.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationArguments\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(value: any, args?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/unique/is-unique-constraint.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { EntityManager } from 'typeorm';\nimport { IsUniqeInterface } from './is-unique-decorator';\n\n@ValidatorConstraint({ name: 'IsUniqueConstraint', async: true })\n@Injectable()\nexport class IsUniqueConstraint implements ValidatorConstraintInterface {\n  constructor(private readonly entityManager: EntityManager) {}\n  async validate(value: any, args?: ValidationArguments): Promise {\n    const { tableName, column }: IsUniqeInterface = args.constraints[0];\n\n    const dataExist = await this.entityManager\n      .getRepository(tableName)\n      .createQueryBuilder(tableName)\n      .where({ [column]: value })\n      .getExists();\n\n    return !dataExist;\n  }\n\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    const field: string = validationArguments.property;\n    return `${field} already exist`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/login-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for User Response.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                access_token\n                            \n                            \n                                    Private\n                                email\n                            \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                name\n                            \n                            \n                                    Private\n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, name: string, username: string, email: string, access_token: string)\n                    \n                \n                        \n                            \n                                Defined in src/user/dto/login-response.dto.ts:30\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserResponse.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe username of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe email of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        access_token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-response.dto.ts:30\n                        \n                    \n\n            \n                \n                    The JWT of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-response.dto.ts:10\n                        \n                    \n\n            \n                \n                    The unique identifier of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-response.dto.ts:20\n                        \n                    \n\n            \n                \n                    The username of the user.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        of\n                        \n                    \n                \n            \n            \n                \n                        \n                    of(user: User, access_token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/dto/login-response.dto.ts:62\n                        \n                    \n\n\n            \n                \n                        Creates a UserResponse object from a User entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity from which to create the response.\n\n\n                                            \n                                        \n                                        \n                                                access_token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         LoginResponse\n\n                        \n                            \n                                \nA new instance of UserResponse populated with user data.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for User Response.\n */\nexport class LoginResponse {\n  /**\n   * The unique identifier of the user.\n   */\n  private id: string;\n\n  /**\n   * The name of the user.\n   */\n  private name: string;\n\n  /**\n   * The username of the user.\n   */\n  private username: string;\n\n  /**\n   * The email of the user.\n   */\n  private email: string;\n\n  /**\n   * The JWT of the user.\n   */\n  private access_token: string;\n\n  /**\n   * Creates an instance of UserResponse.\n   *\n   * @param {string} id - The unique identifier of the user.\n   * @param {string} name - The name of the user.\n   * @param {string} username - The username of the user.\n   * @param {string} email - The email of the user.\n   * @param {string} access_token- The JWT of the user.\n   */\n  constructor(\n    id: string,\n    name: string,\n    username: string,\n    email: string,\n    access_token: string,\n  ) {\n    this.id = id;\n    this.name = name;\n    this.username = username;\n    this.email = email;\n    this.access_token = access_token;\n  }\n\n  /**\n   * Creates a UserResponse object from a User entity.\n   *\n   * @param {User} user - The user entity from which to create the response.\n   * @param {string} access_token - The JWT of the user.\n   * @returns {UserResponse} - A new instance of UserResponse populated with user data.\n   */\n  public static of(user: User, access_token: string): LoginResponse {\n    return new LoginResponse(\n      user.id,\n      user.name,\n      user.username,\n      user.email,\n      access_token,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/signin-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO to sign in.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/signin-dto.ts:13\n                        \n                    \n\n            \n                \n                    The user's password.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/signin-dto.ts:8\n                        \n                    \n\n            \n                \n                    The user's username.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SignInDto {\n  /**\n   * The user's username.\n   */\n  username: string;\n\n  /**\n   * The user's password.\n   */\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Task.html":{"url":"entities/Task.html","title":"entity - Task","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/entities/task.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Task entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                _creationDate\n                            \n                            \n                                    \n                                    Private\n                                _description\n                            \n                            \n                                    \n                                    Private\n                                _id\n                            \n                            \n                                    \n                                    Private\n                                _status\n                            \n                            \n                                    \n                                    Private\n                                _title\n                            \n                            \n                                    \n                                    Private\n                                _user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', name: 'creationDate'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:67\n                        \n                    \n\n            \n                \n                    The date when the task was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', name: 'description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:38\n                        \n                    \n\n            \n                \n                    The description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid', {name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:14\n                        \n                    \n\n            \n                \n                    Unique identifier for each task, generated as a UUID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TaskStatus, default: undefined, name: 'status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:55\n                        \n                    \n\n            \n                \n                    The status of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, name: 'title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:26\n                        \n                    \n\n            \n                \n                    The title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.tasks)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:80\n                        \n                    \n\n            \n                \n                    The user who is associated with the task.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/user/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { TaskStatus } from '../taskStatus';\n\n/**\n * Task entity\n */\n@Entity()\nexport class Task {\n  /**\n   * Unique identifier for each task, generated as a UUID.\n   */\n  @PrimaryGeneratedColumn('uuid', { name: 'id' })\n  private _id: string;\n  public get id(): string {\n    return this._id;\n  }\n  public set id(value: string) {\n    this._id = value;\n  }\n\n  /**\n   * The title of the task.\n   */\n  @Column({ type: 'varchar', length: 60, name: 'title' })\n  private _title: string;\n  public get title(): string {\n    return this._title;\n  }\n  public set title(value: string) {\n    this._title = value;\n  }\n\n  /**\n   * The description of the task.\n   */\n  @Column({ type: 'varchar', name: 'description' })\n  private _description: string;\n  public get description(): string {\n    return this._description;\n  }\n  public set description(value: string) {\n    this._description = value;\n  }\n\n  /**\n   * The status of the task.\n   */\n  @Column({\n    type: 'enum',\n    enum: TaskStatus,\n    default: TaskStatus.TO_DO,\n    name: 'status',\n  })\n  private _status: TaskStatus;\n  public get status(): TaskStatus {\n    return this._status;\n  }\n  public set status(value: TaskStatus) {\n    this._status = value;\n  }\n\n  /**\n   * The date when the task was created.\n   */\n  @Column({ type: 'timestamp', name: 'creationDate' })\n  private _creationDate: Date;\n  public get creationDate(): Date {\n    return this._creationDate;\n  }\n  public set creationDate(value: Date) {\n    this._creationDate = value;\n  }\n\n\n  /**\n   * The user who is associated with the task.\n   */\n  @ManyToOne(() => User, (user: User) => user.tasks)\n  private _user: User;\n  public get user(): User {\n    return this._user;\n  }\n  public set user(value: User) {\n    this._user = value;\n  }\n\n  /**\n   * Constructs a new task instance with the given title, description, and associated user.\n   *\n   * @param {string} title - The title of the task.\n   * @param {string} description - The description of the task.\n   * @param {User} user - The user associated with this task.\n   */\n  constructor(title: string, description: string, user: User) {\n    this.title = title;\n    this.description = description;\n    this.status = TaskStatus.TO_DO;\n    this.user = user;\n    this.creationDate = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling task-related requests.\nDefines the routes and methods for CRUD operations on tasks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.CREATED)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Creates a new task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing data for creating a new task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created task wrapped in a TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of tasks wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Get('user/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:56\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks associated with a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user for whom to retrieve tasks.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of tasks for the specified user, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:68\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The task with the specified ID, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:106\n                        \n                    \n\n\n            \n                \n                        Deletes a task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise indicating the completion of the deletion operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:80\n                        \n                    \n\n\n            \n                \n                        Updates a task with new data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to update.\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing updated data for the task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: UpdateTaskStatusDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Patch('status/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:92\n                        \n                    \n\n\n            \n                \n                        Updates the status of a task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to update.\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing the new status for the task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task with the new status, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TaskResponseDto } from './dto/task-response.dto';\nimport { Task } from './entities/task.entity';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\n\n/**\n * Controller for handling task-related requests.\n * Defines the routes and methods for CRUD operations on tasks.\n */\n@Controller('task')\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  /**\n   * Creates a new task.\n   * @param {CreateTaskDto} createTaskDto The DTO containing data for creating a new task.\n   * @returns {TaskResponseDto} The created task wrapped in a TaskResponseDto.\n   */\n  @HttpCode(HttpStatus.CREATED)\n  @Post()\n  async create(@Body() createTaskDto: CreateTaskDto) {\n    return TaskResponseDto.of(await this.taskService.create(createTaskDto));\n  }\n\n  /**\n   * Retrieves all tasks.\n   * @returns {TaskResponseDto[]} An array of tasks wrapped in TaskResponseDto.\n   */\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  async findAll() {\n    const tasks: Task[] = await this.taskService.findAll();\n    return tasks.map((task) => TaskResponseDto.of(task));\n  }\n\n  /**\n   * Retrieves all tasks associated with a specific user.\n   * @param {string} id The ID of the user for whom to retrieve tasks.\n   * @returns {TaskResponseDto[]} An array of tasks for the specified user, wrapped in TaskResponseDto.\n   */\n  @HttpCode(HttpStatus.OK)\n  @Get('user/:id')\n  async findAllByUser(@Param('id') id: string) {\n    const tasks: Task[] = await this.taskService.findAllByUser(id);\n    return tasks.map((task) => TaskResponseDto.of(task));\n  }\n\n  /**\n   * Retrieves a specific task by its ID.\n   * @param {string} id The ID of the task to retrieve.\n   * @returns {TaskResponseDto} The task with the specified ID, wrapped in TaskResponseDto.\n   */\n  @HttpCode(HttpStatus.OK)\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return TaskResponseDto.of(await this.taskService.findOne(id));\n  }\n\n  /**\n   * Updates a task with new data.\n   * @param {string} id The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto The DTO containing updated data for the task.\n   * @returns {TaskResponseDto} The updated task wrapped in TaskResponseDto.\n   */\n  @HttpCode(HttpStatus.OK)\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto) {\n    return TaskResponseDto.of(await this.taskService.update(id, updateTaskDto));\n  }\n\n  /**\n   * Updates the status of a task.\n   * @param {string} id The ID of the task to update.\n   * @param {UpdateTaskStatusDto} status The DTO containing the new status for the task.\n   * @returns {TaskResponseDto} The updated task with the new status, wrapped in TaskResponseDto.\n   */\n  @HttpCode(HttpStatus.OK)\n  @Patch('status/:id')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() status: UpdateTaskStatusDto,\n  ) {\n    return TaskResponseDto.of(await this.taskService.updateStatus(id, status));\n  }\n\n  /**\n   * Deletes a task by its ID.\n   * @param {string} id The ID of the task to delete.\n   * @returns A promise indicating the completion of the deletion operation.\n   */\n  @HttpCode(HttpStatus.OK)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.taskService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nTaskService\n\nTaskService\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Task } from './entities/task.entity';\nimport { User } from 'src/user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task, User])],\n  controllers: [TaskController],\n  providers: [TaskService],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskResponseDto.html":{"url":"classes/TaskResponseDto.html","title":"class - TaskResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/task-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for Task Response.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                creationDate\n                            \n                            \n                                    Private\n                                description\n                            \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                status\n                            \n                            \n                                    Private\n                                title\n                            \n                            \n                                    Private\n                                user_id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, title: string, description: string, status: TaskStatus, user_id: string, creationDate: Date)\n                    \n                \n                        \n                            \n                                Defined in src/task/dto/task-response.dto.ts:38\n                            \n                        \n\n                \n                    \n                            Constructs a TaskResponseDto object with the provided parameters.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe title of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe description of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        TaskStatus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe current status of the task (enum TaskStatus).\n\n\n                                                        \n                                                \n                                                \n                                                        user_id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the user associated with the task.\n\n\n                                                        \n                                                \n                                                \n                                                        creationDate\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The date when the task was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    Description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:28\n                        \n                    \n\n            \n                \n                    Current status of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:18\n                        \n                    \n\n            \n                \n                    Title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:38\n                        \n                    \n\n            \n                \n                    Unique identifier of the user associated with the task.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        of\n                        \n                    \n                \n            \n            \n                \n                        \n                    of(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/dto/task-response.dto.ts:78\n                        \n                    \n\n\n            \n                \n                        Static factory method to create a TaskResponseDto from a Task entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Task entity from which to create the DTO.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TaskResponseDto\n\n                        \n                            \n                                A new instance of TaskResponseDto.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, plainToInstance, Transform } from 'class-transformer';\nimport { Task } from '../entities/task.entity';\nimport { TaskStatus } from '../taskStatus';\nimport { format } from 'date-fns';\n\n/**\n * DTO for Task Response.\n */\nexport class TaskResponseDto {\n  /**\n   * Unique identifier of the task.\n   */\n  private id: string;\n\n  /**\n   * Title of the task.\n   */\n  private title: string;\n\n  /**\n   * Description of the task.\n   */\n  private description: string;\n\n  /**\n   * Current status of the task.\n   */\n  private status: TaskStatus;\n\n  /**\n   * The date when the task was created.\n   */\n  private creationDate: string;\n\n  /**\n   * Unique identifier of the user associated with the task.\n   */\n  private user_id: string;\n\n  /**\n   * Constructs a TaskResponseDto object with the provided parameters.\n   *\n   * @param {string} id - The unique identifier of the task.\n   * @param {string} title - The title of the task.\n   * @param {string} description - The description of the task.\n   * @param {TaskStatus} status - The current status of the task (enum TaskStatus).\n   * @param {string} user_id - The unique identifier of the user associated with the task.\n   */\n  constructor(\n    id: string,\n    title: string,\n    description: string,\n    status: TaskStatus,\n    user_id: string,\n    creationDate: Date,\n  ) {\n    this.id = id;\n    this.title = title;\n    this.description = description;\n    this.status = status;\n    this.user_id = user_id;\n    this.creationDate = creationDate.toLocaleDateString('es-Es', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    });\n  }\n\n  /**\n   * Static factory method to create a TaskResponseDto from a Task entity.\n   *\n   * @param {Task} task - The Task entity from which to create the DTO.\n   * @returns A new instance of TaskResponseDto.\n   */\n  public static of(task: Task): TaskResponseDto {\n    return new TaskResponseDto(\n      task.id,\n      task.title,\n      task.description,\n      task.status,\n      task.user.id,\n      task.creationDate,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that handles business logic related to tasks.\nIt interacts with the Task repository for data operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllByUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Creates a new task and saves it in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing task creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks from the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of tasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \nfindAllByUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks associated with a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose tasks are to be retrieved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of tasks associated with the user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Retrieves a single task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The found task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Deletes a task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the task is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Updates an existing task with new data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the updated task details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: UpdateTaskStatusDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Updates the status of a specific task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the new status of the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Task } from './entities/task.entity';\nimport { User } from 'src/user/entities/user.entity';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\n\n/**\n * Service that handles business logic related to tasks.\n * It interacts with the Task repository for data operations.\n */\n@Injectable()\nexport class TaskService {\n  constructor(\n    @InjectRepository(Task) private readonly taskRepository: Repository,\n    @InjectRepository(User) private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new task and saves it in the database.\n   *\n   * @param {CreateTaskDto} createTaskDto - DTO containing task creation details.\n   * @returns {Task} The created task.\n   */\n  async create(createTaskDto: CreateTaskDto) {\n    return this.taskRepository.save(\n      new Task(\n        createTaskDto.title,\n        createTaskDto.description,\n        await this.userRepository\n          .createQueryBuilder('user')\n          .where('user.id = :id', { id: createTaskDto.user_id })\n          .getOne(),\n      ),\n    );\n  }\n\n  /**\n   * Retrieves all tasks from the database.\n   *\n   * @returns {Promise}  A promise that resolves to an array of tasks.\n   */\n  findAll(): Promise {\n    return this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .getMany();\n  }\n\n  /**\n   * Retrieves all tasks associated with a specific user.\n   *\n   * @param {string} id - The ID of the user whose tasks are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of tasks associated with the user.\n   */\n  findAllByUser(id: string): Promise {\n    return this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('user.id = :id', { id })\n      .getMany();\n    //return this.taskRepository.find({ where: { user: { id: id } } });\n    // return this.taskRepository.find({\n    //   where: {\n    //     user.id: id\n    //   },\n    // });\n  }\n\n  /**\n   * Retrieves a single task by its ID.\n   *\n   * @param {string} id - The ID of the task to retrieve.\n   * @returns {Task} The found task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async findOne(id: string) {\n    let task = await this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('task.id = :id', { id: id })\n      .getOne();\n    console.log(task);\n    if (task !== null) {\n      return task;\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Updates an existing task with new data.\n   *\n   * @param {string} id - The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto - DTO containing the updated task details.\n   * @returns {Task} The updated task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async update(id: string, updateTaskDto: UpdateTaskDto) {\n    let task = await this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('task.id = :id', { id: id })\n      .getOne();\n\n    if (task !== null) {\n      for (const [key, value] of Object.entries(updateTaskDto)) {\n        if (value !== undefined) {\n          task[key] = value;\n        }\n      }\n\n      return this.taskRepository.save(task);\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Updates the status of a specific task.\n   *\n   * @param {string} id - The ID of the task to update.\n   * @param {UpdateTaskStatusDto} status - DTO containing the new status of the task.\n   * @returns {Promise} The updated task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async updateStatus(id: string, status: UpdateTaskStatusDto) {\n    let task = await this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('task.id = :id', { id: id })\n      .getOne();\n\n    if (task !== null) {\n      task.status = status.status;\n\n      return this.taskRepository.save(task);\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Deletes a task by its ID.\n   *\n   * @param {String} id - The ID of the task to delete.\n   * @returns A promise that resolves when the task is deleted.\n   */\n  remove(id: string) {\n    return this.taskRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/update-task.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing task.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateTaskDto, ['user_id'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskDto } from './create-task.dto';\n\n/**\n * DTO for updating an existing task.\n */\nexport class UpdateTaskDto extends PartialType(\n  OmitType(CreateTaskDto, ['user_id'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskStatusDto.html":{"url":"classes/UpdateTaskStatusDto.html","title":"class - UpdateTaskStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/update-task-status.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating the status of a task.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(TaskStatus, {message: 'Status must be part of TaskStatus.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/update-task-status.dto.ts:14\n                        \n                    \n\n            \n                \n                    The status of the task.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { TaskStatus } from '../taskStatus';\n\n/**\n * DTO for updating the status of a task.\n */\nexport class UpdateTaskStatusDto {\n  /**\n   * The status of the task.\n   */\n  @IsEnum(TaskStatus, {\n    message: 'Status must be part of TaskStatus.',\n  })\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing user.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an existing user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                _email\n                            \n                            \n                                    \n                                    Private\n                                _id\n                            \n                            \n                                    \n                                    Private\n                                _name\n                            \n                            \n                                    \n                                    Private\n                                _password\n                            \n                            \n                                    \n                                    Private\n                                _tasks\n                            \n                            \n                                    \n                                    Private\n                                _username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, name: 'email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:61\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid', {name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for each User, generated as a UUID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, name: 'name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 15, name: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    The password of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, task => task.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:73\n                        \n                    \n\n            \n                \n                    The list of tasks associated with the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, name: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    The username of the user.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Task } from 'src/task/entities/task.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * User entity\n */\n@Entity()\nexport class User {\n  /**\n   * Unique identifier for each User, generated as a UUID.\n   */\n  @PrimaryGeneratedColumn('uuid', { name: 'id' })\n  private _id: string;\n  public get id(): string {\n    return this._id;\n  }\n  public set id(value: string) {\n    this._id = value;\n  }\n\n  /**\n   * The name of the user.\n   */\n  @Column({ type: 'varchar', length: 30, name: 'name' })\n  private _name: string;\n  public get name(): string {\n    return this._name;\n  }\n  public set name(value: string) {\n    this._name = value;\n  }\n\n  /**\n   * The username of the user.\n   */\n  @Column({ type: 'varchar', length: 30 , name: 'username'})\n  private _username: string;\n  public get username(): string {\n    return this._username;\n  }\n  public set username(value: string) {\n    this._username = value;\n  }\n\n  /**\n   * The password of the user.\n   */\n  @Column({ type: 'varchar', length: 15, name: 'password' })\n  private _password: string;\n  public get password(): string {\n    return this._password;\n  }\n  public set password(value: string) {\n    this._password = value;\n  }\n\n  /**\n   * The email of the user.\n   */\n  @Column({ type: 'varchar', length: 30, name: 'email' })\n  private _email: string;\n  public get email(): string {\n    return this._email;\n  }\n  public set email(value: string) {\n    this._email = value;\n  }\n\n  /**\n   * The list of tasks associated with the user.\n   */\n  @OneToMany(() => Task, (task: Task) => task.user)\n  private _tasks: Task[];\n  public get tasks(): Task[] {\n    return this._tasks;\n  }\n  public set tasks(value: Task[]) {\n    this._tasks = value;\n  }\n\n  /**\n   * Constructor to initialize a new User instance.\n   *\n   * @param {string} name - The name of the user.\n   * @param {string} username - The username of the user.\n   * @param {string} password - The password of the user.\n   * @param {string} email - The email of the user.\n   */\n  constructor(name: string, username: string, password: string, email: string) {\n    this._name = name;\n    this._username = username;\n    this._password = password;\n    this._email = email;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling user-related requests.\nDefines the routes and methods for CRUD operations on users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                signIn\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.CREATED)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the user creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created user, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of all users.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all users, each formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user with the specified ID, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:87\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty response, indicating the user was successfully deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:75\n                        \n                    \n\n\n            \n                \n                        Updates an existing user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the updated user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated user, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Request,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserResponse } from './dto/user-response.dto';\nimport { User } from './entities/user.entity';\nimport { SignInDto } from './dto/signin-dto';\nimport { Public } from './auth.guard';\n\n/**\n * Controller for handling user-related requests.\n * Defines the routes and methods for CRUD operations on users.\n */\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * Creates a new user.\n   *\n   * @param {CreateUserDto} createUserDto - DTO containing the user creation details.\n   * @returns {Promise} The newly created user, formatted as a UserResponse.\n   */\n  @Public()\n  @HttpCode(HttpStatus.CREATED)\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto): Promise {\n    return UserResponse.of(await this.userService.create(createUserDto));\n  }\n\n  /**\n   * Retrieves a list of all users.\n   *\n   * @returns {Promise} An array of all users, each formatted as a UserResponse.\n   */\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  async findAll() {\n    const users: User[] = await this.userService.findAll();\n    return users.map((user) => UserResponse.of(user));\n  }\n\n  /**\n   * Retrieves a single user by ID.\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Promise} The user with the specified ID, formatted as a UserResponse.\n   */\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  async findOne(@Param('id') id: string) {\n    return UserResponse.of(await this.userService.findOne(id));\n  }\n\n  /**\n   * Updates an existing user by ID.\n   *\n   * @param {string} id - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - DTO containing the updated user details.\n   * @returns {Promise} The updated user, formatted as a UserResponse.\n   */\n  @HttpCode(HttpStatus.OK)\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return UserResponse.of(await this.userService.update(id, updateUserDto));\n  }\n\n  /**\n   * Deletes a user by ID.\n   *\n   * @param {string} id - The ID of the user to delete.\n   * @returns An empty response, indicating the user was successfully deleted.\n   */\n  @HttpCode(HttpStatus.OK)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: SignInDto) {\n    return this.userService.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './cosntants';\nimport { AuthGuard } from './auth.guard';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n  ],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponse.html":{"url":"classes/UserResponse.html","title":"class - UserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for User Response.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                email\n                            \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                name\n                            \n                            \n                                    Private\n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, name: string, username: string, email: string)\n                    \n                \n                        \n                            \n                                Defined in src/user/dto/user-response.dto.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserResponse.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe username of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe email of the user.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:10\n                        \n                    \n\n            \n                \n                    The unique identifier of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:20\n                        \n                    \n\n            \n                \n                    The username of the user.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        of\n                        \n                    \n                \n            \n            \n                \n                        \n                    of(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/dto/user-response.dto.ts:48\n                        \n                    \n\n\n            \n                \n                        Creates a UserResponse object from a User entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity from which to create the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserResponse\n\n                        \n                            \n                                \nA new instance of UserResponse populated with user data.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for User Response.\n */\nexport class UserResponse {\n  /**\n   * The unique identifier of the user.\n   */\n  private id: string;\n\n  /**\n   * The name of the user.\n   */\n  private name: string;\n\n  /**\n   * The username of the user.\n   */\n  private username: string;\n\n  /**\n   * The email of the user.\n   */\n  private email: string;\n\n  /**\n   * Creates an instance of UserResponse.\n   *\n   * @param {string} id - The unique identifier of the user.\n   * @param {string} name - The name of the user.\n   * @param {string} username - The username of the user.\n   * @param {string} email - The email of the user.\n   */\n  constructor(id: string, name: string, username: string, email: string) {\n    this.id = id;\n    this.name = name;\n    this.username = username;\n    this.email = email;\n  }\n\n  /**\n   * Creates a UserResponse object from a User entity.\n   *\n   * @param {User} user - The user entity from which to create the response.\n   * @returns {UserResponse} - A new instance of UserResponse populated with user data.\n   */\n  public static of(user: User): UserResponse {\n    return new UserResponse(user.id, user.name, user.username, user.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The UserService handles all operations related to users,\nincluding creating, finding, updating, and deleting user records.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Creates a new user record in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO containing the details for the new user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The newly created User entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves all users from the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of User entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the User entity if found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:104\n                        \n                    \n\n\n            \n                \n                        Deletes a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(singInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                singInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Updates an existing user record.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the updated user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the updated User entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { SignInDto } from './dto/signin-dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginResponse } from './dto/login-response.dto';\n\n/**\n * The UserService handles all operations related to users,\n * including creating, finding, updating, and deleting user records.\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Creates a new user record in the database.\n   *\n   * @param {CreateUserDto} createUserDto - The DTO containing the details for the new user.\n   * @returns {Promise} The newly created User entity.\n   */\n  create(createUserDto: CreateUserDto) {\n    return this.userRepository.save(\n      new User(\n        createUserDto.name,\n        createUserDto.username,\n        createUserDto.password,\n        createUserDto.email,\n      ),\n    );\n  }\n\n  /**\n   * Retrieves all users from the database.\n   *\n   * @returns {Promise} A promise that resolves to an array of User entities.\n   */\n  findAll(): Promise {\n    return this.userRepository.find();\n  }\n\n  /**\n   * Retrieves a single user by their ID.\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Promise} A promise that resolves to the User entity if found.\n   * @throws {NotFoundException} NotFoundException if no user is found with the given ID.\n   */\n  async findOne(id: string): Promise {\n    let user = await this.userRepository\n      .createQueryBuilder('user')\n      .where('user.id = :id', { id: id })\n      .getOne();\n    if (user !== null) {\n      return user;\n    } else {\n      throw new NotFoundException('No user was found');\n    }\n  }\n\n  /**\n   * Updates an existing user record.\n   *\n   * @param {string} id - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - The data transfer object containing the updated user details.\n   * @returns {Promise} A promise that resolves to the updated User entity.\n   * @throws {NotFoundException} NotFoundException if no user is found with the given ID.\n   */\n  async update(id: string, updateUserDto: UpdateUserDto): Promise {\n    let user = await this.userRepository\n      .createQueryBuilder('user')\n      .where('user.id = :id', { id: id })\n      .getOne();\n\n    if (user !== null) {\n      for (const [key, value] of Object.entries(updateUserDto)) {\n        if (value !== undefined) {\n          user[key] = value;\n        }\n      }\n\n      return this.userRepository.save(user);\n    } else {\n      throw new NotFoundException('No user was found');\n    }\n  }\n\n  /**\n   * Deletes a user by their ID.\n   *\n   * @param {string} id - The ID of the user to delete.\n   * @returns A promise that resolves to the result of the delete operation.\n   */\n  remove(id: string) {\n    // return this.userRepository\n    //   .createQueryBuilder('user')\n    //   .delete()\n    //   .where('user.id = :id', { id: id })\n    //   .execute();\n    return this.userRepository.delete(id);\n  }\n\n  async signIn(singInDto: SignInDto): Promise {\n    const user = await this.userRepository\n      .createQueryBuilder('user')\n      .where('user.username = :username', { username: singInDto.username })\n      .getOne();\n    if (user?.password !== singInDto.password) {\n      throw new UnauthorizedException();\n    }\n    const payload = { sub: user.id, username: user.username };\n    return LoginResponse.of(user, await this.jwtService.signAsync(payload));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/task/dto/task-response.dto.ts\n            \n            class\n            TaskResponseDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/task/dto/update-task-status.dto.ts\n            \n            class\n            UpdateTaskStatusDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/task/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/task/entities/task.entity.ts\n            \n            entity\n            Task\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/user/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/auth.guard.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/auth.guard.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/cosntants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            variable\n            passwordRegEx\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/login-response.dto.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/user/dto/signin-dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/dto/user-response.dto.ts\n            \n            class\n            UserResponse\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/validation/unique/is-unique-constraint.ts\n            \n            injectable\n            IsUniqueConstraint\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/validation/unique/is-unique-decorator.ts\n            \n            function\n            IsUnique\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^3.6.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../taskStatus.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/task/taskStatus.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                    \n                        \n                            Enum representing the various statuses of a task.\n\n                        \n                    \n                        \n                            \n                                 TO_DO\n                            \n                        \n                        \n                            \n                                Value : TO-DO\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsUnique   (src/.../is-unique-decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/validation/unique/is-unique-decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUnique\n                        \n                    \n                \n            \n            \n                \nIsUnique(options: IsUniqeInterface, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            IsUniqeInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nIsUniqueConstraint\n\nIsUniqueConstraint\n\nAppModule -->\n\nIsUniqueConstraint->AppModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IsUniqeInterface   (src/.../is-unique-decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/validation/unique/is-unique-decorator.ts\n    \n    \n        \n            \n                \n                    \n                    IsUniqeInterface\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../auth.guard.ts)\n                        \n                        \n                            jwtConstants   (src/.../cosntants.ts)\n                        \n                        \n                            passwordRegEx   (src/.../create-user.dto.ts)\n                        \n                        \n                            Public   (src/.../auth.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/user/cosntants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: '$ecret',\n}\n                    \n                \n\n\n        \n    \n\n    src/user/dto/create-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        passwordRegEx\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
