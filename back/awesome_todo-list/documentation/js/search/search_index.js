var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.514,1,2.047]],["body/controllers/AppController.html",[0,2.516,1,3.401,2,2.076,3,0.569,4,0.504,5,0.504,6,3.647,7,0.569,8,1.932,9,4.944,10,1.897,11,0.033,12,0.948,13,4.378,14,1.594,15,1.148,16,0.772,17,1.345,18,2.974,19,3.647,20,0.569,21,0.023,22,2.807,23,2.28,24,1.345,25,4.378,26,0.027,27,0.027]],["title/modules/AppModule.html",[28,1.514,29,2.047]],["body/modules/AppModule.html",[1,3.267,2,2.155,3,0.446,4,0.395,5,0.395,11,0.034,16,0.885,17,1.054,18,3.022,19,2.857,20,0.446,21,0.018,26,0.023,27,0.023,28,2.416,29,3.995,30,1.786,31,1.786,32,2.199,33,2.199,34,1.786,35,3.267,36,2.199,37,2.857,38,2.857,39,2.857,40,3.338,41,3.338,42,3.338,43,2.913,44,2.199,45,2.199,46,3.43,47,3.286,48,3.43,49,2.48,50,1.786,51,3.43,52,0.984,53,3.43,54,3.43,55,1.282,56,3.43,57,3.43,58,1.249,59,3.43,60,3.43,61,0.555,62,4.545,63,3.43,64,3.43,65,3.43,66,3.43,67,2.199,68,3.43,69,1.786,70,1.974,71,2.48,72,3.43,73,2.48,74,3.43,75,2.615,76,3.43]],["title/injectables/AppService.html",[18,1.663,77,1.163]],["body/injectables/AppService.html",[3,0.588,4,0.521,5,0.521,7,0.588,8,1.971,9,5,11,0.033,12,0.98,14,1.648,15,1.172,16,0.659,17,1.39,18,2.819,20,0.588,21,0.023,24,1.39,26,0.028,27,0.028,77,1.971,78,2.605,79,3.771,80,4.526,81,4.526,82,4.526]],["title/guards/AuthGuard.html",[83,2.309,84,1.837]],["body/guards/AuthGuard.html",[3,0.389,4,0.344,5,0.344,7,0.389,8,1.508,11,0.034,12,1.028,14,1.508,15,0.897,16,0.784,17,0.919,20,0.617,21,0.015,24,1.459,26,0.021,27,0.021,61,0.872,75,2.734,77,1.508,84,2.383,85,2.991,86,2.163,87,2.475,88,5.129,89,2.553,90,4.142,91,1.964,92,2.991,93,4.641,94,5.712,95,2.991,96,1.886,97,1.459,98,1.886,99,4.142,100,5.129,101,2.991,102,2.991,103,2.157,104,4.142,105,4.641,106,2.991,107,3.046,108,2.991,109,3.958,110,1.917,111,2.492,112,1.917,113,2.492,114,2.163,115,2.474,116,2.163,117,3.958,118,1.296,119,2.492,120,2.492,121,2.991,122,2.991,123,2.991,124,2.991,125,5.129,126,2.991,127,2.995,128,1.272,129,2.991,130,3.451,131,1.558,132,2.991,133,2.163,134,2.492,135,2.991,136,2.991,137,2.991,138,2.991]],["title/classes/CreateTaskDto.html",[21,0.016,139,1.663]],["body/classes/CreateTaskDto.html",[3,0.389,4,0.345,5,0.345,7,0.389,10,2.06,11,0.034,12,1.03,15,1.207,16,0.436,20,0.389,21,0.021,26,0.021,27,0.021,52,1.111,55,1.688,61,0.77,128,1.274,139,2.16,140,1.189,141,4.276,142,2.167,143,1.32,144,1.577,145,3.29,146,4.148,147,2.16,148,4.148,149,4.148,150,4.148,151,4.148,152,4.148,153,4.148,154,1.51,155,4.276,156,3.44,157,2.997,158,4.329,159,4.276,160,4.276,161,3.455,162,4.644,163,2.997,164,2.997,165,2.997,166,2.997,167,4.148,168,2.037,169,4.148,170,2.999,171,2.997,172,2.997,173,4.148,174,4.276,175,2.497,176,2.497,177,4.276,178,2.999,179,1.725,180,2.997,181,3.455,182,2.997,183,2.497,184,1.561,185,2.497,186,2.387,187,2.997,188,2.997]],["title/classes/CreateUserDto.html",[21,0.016,189,1.663]],["body/classes/CreateUserDto.html",[3,0.291,4,0.258,5,0.258,7,0.291,10,1.943,11,0.033,12,0.971,15,1.165,16,0.489,20,0.291,21,0.023,26,0.017,27,0.017,52,1.092,58,1.469,61,0.726,67,3.65,69,3.038,97,1.749,115,0.97,128,1.377,140,0.889,143,0.485,144,1.033,145,2.155,147,1.751,154,1.224,158,4.381,160,3.736,161,1.866,162,4.003,174,2.801,175,1.866,176,1.866,177,4.003,179,1.289,181,4.485,189,1.751,190,3.475,191,1.436,192,3.362,193,3.362,194,3.362,195,1.594,196,3.981,197,4.035,198,2.24,199,2.801,200,2.801,201,3.362,202,2.24,203,4.485,204,3.362,205,2.24,206,4.485,207,2.431,208,3.362,209,3.736,210,2.24,211,3.362,212,2.24,213,4.485,214,5.983,215,3.736,216,3.736,217,4.485,218,4.485,219,5.383,220,4.485,221,4.485,222,4.485,223,4.485,224,3.736,225,4.485,226,4.485,227,2.24,228,2.24,229,2.801,230,2.24,231,2.801,232,3.362,233,3.362,234,2.801,235,2.24,236,2.155,237,2.801,238,2.24,239,2.24,240,3.362,241,2.24,242,2.431,243,1.289,244,1.866,245,1.62,246,1.62,247,1.866,248,1.866,249,1.866,250,1.866,251,2.24,252,3.362,253,2.24,254,2.24,255,2.24,256,1.866,257,2.24]],["title/injectables/IsUniqueConstraint.html",[42,1.837,77,1.163]],["body/injectables/IsUniqueConstraint.html",[3,0.433,4,0.383,5,0.383,7,0.433,8,1.622,11,0.033,12,1.087,14,1.622,15,1.087,16,0.78,17,1.023,20,0.433,21,0.023,22,2.134,23,1.734,24,1.369,26,0.023,27,0.023,42,2.89,58,2.035,61,0.813,75,1.916,77,1.622,78,1.916,87,2.793,91,1.578,96,1.993,97,1.647,98,1.993,103,2.321,115,2.175,120,2.773,131,1.734,179,1.916,193,3.712,236,2.856,243,3.086,244,2.773,256,2.773,258,2.773,259,4.455,260,3.329,261,5.752,262,3.329,263,4.455,264,5.97,265,3.329,266,3.712,267,4.455,268,5.021,269,3.329,270,2.112,271,4.455,272,4.455,273,1.734,274,3.222,275,3.329,276,4.455,277,3.329,278,3.329,279,3.329,280,3.329,281,4.455,282,3.329,283,3.329,284,3.329]],["title/classes/SignInDto.html",[21,0.016,285,1.837]],["body/classes/SignInDto.html",[3,0.559,4,0.495,5,0.495,7,0.559,11,0.033,12,1.136,15,1.277,20,0.559,21,0.022,26,0.027,27,0.027,61,0.85,67,3.877,69,3.151,140,1.707,143,0.931,144,1.321,154,1.911,203,4.914,285,3.021,286,4.72,287,3.584,288,4.302,289,4.302,290,4.302]],["title/entities/Task.html",[55,0.9,291,1.383]],["body/entities/Task.html",[3,0.276,4,0.245,5,0.245,7,0.276,10,2.143,11,0.034,12,1.071,15,1.284,16,0.569,20,0.276,21,0.011,24,1.52,26,0.017,27,0.017,52,1.308,55,1.713,58,1.177,61,0.896,70,1.224,89,2.849,97,1.7,107,1.363,118,2.471,128,0.993,143,1.218,154,1.177,155,3.924,159,2.693,168,1.552,170,2.338,178,2.338,184,2.447,186,3.049,195,1.533,236,3.012,270,2.345,273,1.108,291,1.892,292,1.772,293,3.91,294,3.91,295,3.258,296,3.91,297,3.91,298,3.91,299,3.718,300,3.639,301,3.233,302,3.258,303,2.127,304,3.639,305,2.127,306,2.693,307,2.127,308,1.86,309,2.338,310,2.693,311,3.159,312,2.693,313,2.127,314,2.127,315,2.127,316,3.233,317,2.127,318,2.514,319,1.538,320,3.233,321,1.772,322,2.693,323,4.121,324,1.772,325,3.233,326,2.127,327,3.233,328,2.127,329,3.233,330,3.233,331,2.127,332,3.233,333,2.127,334,3.233,335,2.127,336,1.772,337,1.363,338,1.538,339,1.694,340,2.127,341,1.772,342,1.772,343,1.772,344,2.127,345,1.772]],["title/controllers/TaskController.html",[0,1.514,346,2.047]],["body/controllers/TaskController.html",[0,1.595,2,0.798,3,0.219,4,0.194,5,0.194,7,0.219,8,1.401,10,2.041,11,0.034,12,1.02,14,2.019,15,1.267,16,0.686,17,0.517,20,0.219,21,0.009,22,1.078,23,0.876,24,1.447,26,0.014,27,0.014,52,0.971,55,1.763,61,0.726,87,3.005,96,1.781,97,1.378,98,1.781,103,1.402,115,1.166,128,1.591,131,1.402,139,2.55,143,1.02,144,1.378,145,1.726,147,2.337,168,2.436,184,2.755,195,1.276,318,1.549,339,2.187,346,1.726,347,1.402,348,1.402,349,2.243,350,1.726,351,2.243,352,2.243,353,2.243,354,2.243,355,1.726,356,4.009,357,1.166,358,2.465,359,2.243,360,1.726,361,1.726,362,2.877,363,2.804,364,1.402,365,2.804,366,1.682,367,1.549,368,2.877,369,3.245,370,5.385,371,3.727,372,1.682,373,2.877,374,2.465,375,1.402,376,2.692,377,1.682,378,3.204,379,2.465,380,3.204,381,1.078,382,2.243,383,1.682,384,1.078,385,2.243,386,1.682,387,1.726,388,2.157,389,2.243,390,2.692,391,2.692,392,2.243,393,1.078,394,2.98,395,2.243,396,1.682,397,2.465,398,2.877,399,1.402,400,2.421,401,2.692,402,1.682,403,2.804,404,1.402,405,1.753,406,1.402,407,1.078,408,1.947,409,1.726,410,1.682,411,1.402,412,1.078,413,1.402,414,1.682,415,1.402,416,3.846,417,1.682,418,1.682,419,2.692,420,2.692,421,1.682,422,1.682,423,1.402,424,1.682,425,1.402,426,1.682,427,1.682,428,1.682,429,1.402,430,1.682]],["title/modules/TaskModule.html",[28,1.514,40,1.837]],["body/modules/TaskModule.html",[2,2.395,3,0.525,4,0.465,5,0.465,11,0.033,16,0.882,17,1.242,20,0.525,21,0.021,26,0.026,27,0.026,28,2.612,30,2.105,31,2.105,32,2.591,33,2.591,34,2.105,35,3.532,36,2.591,40,3.487,43,3.238,44,2.591,45,2.591,47,2.923,49,2.923,50,2.105,52,1.093,55,1.14,319,2.923,346,3.532,405,3.156,406,3.367,412,2.591,431,3.367,432,3.367,433,4.042,434,4.042,435,4.042]],["title/classes/TaskResponseDto.html",[21,0.016,371,2.047]],["body/classes/TaskResponseDto.html",[3,0.272,4,0.241,5,0.241,7,0.272,8,1.164,11,0.034,12,1.142,14,1.164,15,1.343,16,0.631,20,0.272,21,0.016,24,0.644,26,0.016,27,0.016,52,0.938,55,1.786,58,1.921,61,0.854,89,2.843,91,1.516,96,1.721,97,0.982,98,1.269,118,0.908,128,1.191,140,0.832,143,1.27,144,1.332,154,1.164,155,4.111,156,3.814,168,2.03,184,2.961,186,3.173,195,1.516,207,3.376,215,3.889,231,1.747,234,1.747,291,1.878,299,3.558,302,4.099,308,3.035,311,2.312,318,2.495,336,2.664,337,2.05,339,2.131,341,1.747,342,1.747,343,1.747,345,1.747,357,1.878,371,3.593,412,1.344,436,4.503,437,1.516,438,2.312,439,3.889,440,1.747,441,3.198,442,2.05,443,3.198,444,4.336,445,2.097,446,2.097,447,2.097,448,2.097,449,2.097,450,3.198,451,2.097,452,3.198,453,3.198,454,2.097,455,2.097,456,2.097,457,1.747,458,2.097,459,1.747,460,1.747,461,2.097,462,2.097,463,2.097,464,2.097,465,2.097,466,2.097,467,2.097,468,2.097,469,2.097,470,2.097,471,2.097,472,1.747,473,2.097,474,2.097]],["title/injectables/TaskService.html",[77,1.163,405,1.663]],["body/injectables/TaskService.html",[3,0.191,4,0.169,5,0.169,7,0.191,8,0.877,11,0.034,12,1.006,14,1.951,15,1.235,16,0.676,17,0.45,20,0.191,21,0.008,23,1.254,24,1.478,26,0.012,27,0.012,50,0.764,52,1.142,55,1.782,61,0.72,71,2.565,77,0.877,78,0.844,87,2.699,89,1.142,91,1.142,96,1.766,97,1.367,98,1.766,103,2.748,107,0.94,115,0.635,127,2.216,128,1.522,131,1.848,139,2.318,143,0.963,144,1.294,147,1.848,168,2.466,184,2.42,195,1.142,270,1.453,273,0.764,318,2.041,319,1.06,338,2.216,339,2.013,350,1.544,355,1.544,356,3.747,357,1.043,358,2.274,359,2.006,360,1.544,361,1.544,362,2.7,363,2.006,364,2.006,367,1.386,368,2.7,369,2.565,373,2.7,374,2.274,375,2.006,378,2.955,379,1.544,381,1.544,384,1.544,387,1.544,388,1.544,393,1.544,394,2.769,397,2.274,398,2.7,399,2.006,400,2.255,405,1.254,407,0.94,408,1.741,409,1.544,412,0.94,413,1.222,472,1.222,475,1.222,476,2.408,477,2.006,478,2.408,479,2.408,480,2.408,481,3.48,482,1.466,483,2.553,484,1.466,485,2.408,486,1.466,487,2.408,488,2.006,489,2.565,490,1.466,491,3.509,492,1.466,493,2.408,494,2.408,495,1.466,496,1.741,497,3.871,498,1.466,499,2.006,500,1.466,501,1.386,502,1.466,503,3.707,504,1.222,505,1.466,506,1.222,507,1.466,508,1.466,509,1.466,510,1.222,511,1.222,512,2.006,513,1.466,514,2.955,515,3.918,516,3.918,517,3.918,518,2.408,519,2.408,520,1.222,521,2.553,522,3.064,523,1.466,524,2.553,525,2.553,526,1.222,527,1.466,528,1.466,529,2.408,530,1.466,531,1.466]],["title/classes/UpdateTaskDto.html",[21,0.016,394,1.837]],["body/classes/UpdateTaskDto.html",[3,0.566,4,0.501,5,0.501,11,0.033,16,0.769,20,0.566,21,0.022,26,0.027,27,0.027,55,1.491,115,2.29,139,2.267,140,1.727,142,3.147,143,0.942,144,1.624,156,3.823,357,1.885,394,3.042,408,3.147,501,3.042,532,3.147,533,3.389,534,4.404,535,4.744,536,5.287,537,4.352,538,3.147,539,3.147]],["title/classes/UpdateTaskStatusDto.html",[21,0.016,400,1.837]],["body/classes/UpdateTaskStatusDto.html",[3,0.53,4,0.469,5,0.469,7,0.53,10,1.765,11,0.033,12,0.882,16,0.739,20,0.53,21,0.026,26,0.026,27,0.026,55,1.713,61,0.66,140,1.617,143,0.882,144,1.56,154,1.849,158,3.672,179,2.345,183,4.23,184,3.27,185,4.23,186,3.494,400,2.922,532,3.672,533,3.255,540,3.395,541,4.075,542,4.075]],["title/classes/UpdateUserDto.html",[21,0.016,543,1.837]],["body/classes/UpdateUserDto.html",[3,0.581,4,0.515,5,0.515,11,0.033,16,0.782,20,0.581,21,0.023,26,0.028,27,0.028,52,1.163,140,1.774,143,0.968,144,1.651,189,2.329,191,2.866,357,1.937,501,3.092,533,3.445,534,4.477,535,3.725,538,3.233,539,3.233,543,3.092,544,3.725,545,5.374,546,3.233]],["title/entities/User.html",[52,0.691,291,1.383]],["body/entities/User.html",[3,0.277,4,0.246,5,0.246,7,0.277,10,2.146,11,0.034,12,1.072,15,1.353,16,0.471,20,0.277,21,0.011,24,1.521,26,0.017,27,0.017,52,1.322,55,1.532,58,1.18,61,0.896,67,3.482,69,2.829,70,1.228,73,2.343,89,2.85,91,1.011,97,1.847,118,2.472,128,0.655,143,0.462,154,1.18,168,1.555,170,2.343,178,3.835,196,3.928,209,4.126,236,3.015,237,3.263,270,2.348,273,1.111,291,1.895,295,3.263,300,3.644,304,4.418,306,2.699,308,1.864,309,2.343,310,2.699,318,1.864,321,1.777,322,2.699,323,4.126,324,1.777,337,1.367,339,1.895,356,2.833,547,1.777,548,3.917,549,3.917,550,3.917,551,3.917,552,2.133,553,2.133,554,2.133,555,3.24,556,2.133,557,2.133,558,3.24,559,2.133,560,2.133,561,2.133,562,3.24,563,3.917,564,2.133,565,3.917,566,2.133,567,3.917,568,2.133,569,3.917,570,2.133,571,3.24,572,2.133,573,2.133,574,2.133]],["title/controllers/UserController.html",[0,1.514,575,2.047]],["body/controllers/UserController.html",[0,1.726,2,0.899,3,0.247,4,0.218,5,0.218,7,0.247,8,1.497,10,2.138,11,0.034,12,1.068,14,2.022,15,1.202,16,0.743,17,0.583,20,0.247,21,0.01,22,1.216,23,0.988,24,1.516,26,0.015,27,0.015,52,1.347,61,0.722,73,2.14,84,1.092,87,2.892,96,1.875,97,1.451,98,1.875,103,2.461,105,1.58,115,0.822,118,1.282,128,0.909,131,0.988,143,0.965,144,1.37,168,2.405,189,2.659,195,1.403,285,2.719,309,2.14,339,2.047,348,1.58,349,2.466,350,1.897,351,2.466,352,2.466,353,2.466,354,2.466,355,1.897,357,1.282,358,2.636,360,1.897,361,1.897,362,2.636,365,3.032,367,1.703,368,2.636,369,2.632,373,2.636,374,1.897,379,1.897,380,2.466,381,1.216,382,2.466,384,1.216,385,2.466,387,1.897,388,2.333,389,2.466,393,1.216,395,2.466,397,1.897,398,2.636,403,2.466,404,1.58,407,1.216,409,1.216,411,1.58,415,1.58,423,1.58,425,1.58,429,1.58,438,2.14,488,2.466,489,2.974,496,2.14,499,2.466,501,1.703,543,3.087,546,2.14,575,1.897,576,1.58,577,4.111,578,2.96,579,2.466,580,1.58,581,1.897,582,2.466,583,5.106,584,3.363,585,1.897,586,1.897,587,1.897,588,2.96,589,1.897,590,2.96,591,1.897,592,2.96,593,2.96,594,1.897,595,1.897,596,1.897,597,1.897,598,1.897,599,1.897,600,1.896,601,1.58,602,1.897,603,1.216,604,1.58,605,1.58,606,1.897,607,3.64,608,1.897,609,1.897,610,1.897,611,1.897,612,1.897,613,1.897,614,1.897,615,1.897,616,1.897,617,1.897,618,1.897,619,1.897,620,1.897]],["title/modules/UserModule.html",[28,1.514,41,1.837]],["body/modules/UserModule.html",[2,2.259,3,0.479,4,0.424,5,0.424,11,0.034,16,0.897,17,1.133,20,0.479,21,0.019,26,0.025,27,0.025,28,2.503,30,1.921,31,1.921,32,2.364,33,2.364,34,1.921,35,3.384,36,2.364,41,3.406,43,3.055,44,2.364,45,2.364,47,2.667,49,2.667,50,1.921,52,0.798,75,2.122,84,2.742,110,2.364,112,2.364,113,3.072,114,2.667,133,2.667,134,3.072,200,3.072,575,3.384,600,3.082,601,3.072,603,2.364,605,3.072,621,3.072,622,3.072,623,3.688,624,3.688,625,3.688,626,4.765,627,3.688,628,3.688,629,3.688,630,3.688,631,3.688,632,3.688,633,3.688]],["title/classes/UserResponse.html",[21,0.016,584,2.047]],["body/classes/UserResponse.html",[3,0.337,4,0.298,5,0.298,7,0.337,8,1.363,11,0.034,12,1.151,14,1.363,15,1.366,16,0.377,20,0.337,21,0.013,24,0.796,26,0.019,27,0.019,52,1.386,58,1.752,61,0.86,69,3.094,89,2.817,91,1.228,96,1.485,97,1.856,98,1.485,118,1.122,128,1.349,140,1.028,143,0.951,144,1.149,147,1.949,154,1.363,168,2.11,196,4.296,291,2.084,308,2.768,337,3.084,339,2.21,357,1.621,367,2.768,437,1.874,438,3.479,439,3.659,440,3.117,442,2.399,460,2.159,584,3.768,603,1.661,634,4.566,635,3.742,636,2.591,637,2.591,638,2.591,639,3.742,640,2.591,641,3.742,642,2.591,643,2.591,644,2.591,645,2.591,646,2.591,647,2.159,648,2.591]],["title/injectables/UserService.html",[77,1.163,600,1.663]],["body/injectables/UserService.html",[3,0.219,4,0.194,5,0.194,7,0.219,8,0.983,11,0.034,12,1.021,14,1.928,15,1.167,16,0.713,17,0.519,20,0.219,21,0.009,23,0.879,24,1.449,26,0.014,27,0.014,50,0.879,52,1.356,61,0.727,69,1.757,70,1.553,71,2.787,77,0.983,78,0.971,87,2.633,89,1.28,91,1.28,93,3.931,96,1.784,97,1.381,98,1.784,103,3.051,107,1.082,109,2.249,110,1.082,115,1.461,127,2.439,128,1.506,130,1.406,131,2.007,143,0.912,144,1.036,145,1.73,147,1.406,168,2.406,189,2.458,195,1.28,270,1.599,273,0.879,285,2.218,291,1.947,338,1.952,339,1.826,350,1.73,355,1.73,357,1.169,358,2.47,360,1.73,361,1.73,362,2.47,367,1.553,368,2.47,373,2.47,374,1.73,379,1.73,381,1.73,384,1.73,387,1.73,388,2.701,392,2.249,393,1.73,397,1.73,398,2.47,407,1.082,409,1.082,442,1.73,477,2.249,481,2.787,483,2.249,489,2.787,491,4.084,496,1.952,497,3.744,501,1.553,503,3.511,504,1.406,506,1.406,510,3.21,511,3.21,512,2.81,514,2.81,520,1.406,521,2.249,524,2.249,525,2.249,526,1.406,533,1.73,543,2.909,546,1.952,577,3.21,579,2.249,580,2.249,582,2.249,600,2.007,603,1.082,604,1.406,647,1.406,649,1.406,650,2.699,651,2.699,652,2.699,653,2.699,654,1.688,655,1.688,656,1.688,657,3.854,658,1.688,659,1.688,660,1.688,661,2.699,662,2.699,663,1.688,664,1.688,665,1.688,666,2.699,667,1.688,668,1.688,669,1.688,670,1.688,671,1.688,672,1.688,673,1.688,674,1.688,675,1.688,676,1.688,677,1.688,678,1.688,679,1.688,680,1.688,681,1.688,682,1.688,683,1.688,684,1.688]],["title/coverage.html",[685,3.132]],["body/coverage.html",[0,2.341,1,2.064,5,0.371,6,2.683,11,0.033,18,1.677,21,0.03,26,0.022,27,0.022,34,1.677,42,1.853,52,0.697,55,1.229,58,1.586,61,0.521,77,1.926,79,2.683,83,2.328,84,1.853,86,3.57,112,2.064,116,2.328,118,1.395,128,0.989,139,1.677,141,2.683,142,3.15,189,1.677,190,3.15,191,3.165,242,2.328,243,2.507,245,2.328,246,4.39,258,2.683,285,1.853,286,2.683,287,2.683,291,1.887,292,2.683,308,1.853,346,2.064,347,2.683,371,2.064,394,1.853,400,1.853,405,1.677,436,2.683,437,3.15,475,2.683,532,3.15,540,2.683,543,1.853,544,2.683,547,2.683,575,2.064,576,2.683,584,2.064,600,1.677,634,2.683,649,2.683,685,2.328,686,3.22,687,3.22,688,4.356,689,2.683,690,4.356,691,5.697,692,6.125,693,3.22,694,3.22,695,3.22,696,5.29,697,3.22,698,3.22,699,3.22,700,4.356,701,5.29,702,2.683,703,3.22,704,3.22,705,3.22,706,4.356,707,4.356,708,2.328,709,3.22,710,3.22]],["title/dependencies.html",[31,1.996,711,2.232]],["body/dependencies.html",[11,0.034,17,1.345,21,0.027,26,0.027,27,0.027,31,2.28,50,2.28,110,2.807,111,3.647,114,3.166,179,2.519,273,2.28,299,3.166,457,3.647,459,3.647,538,3.166,539,3.166,712,5.709,713,4.378,714,4.378,715,4.378,716,4.378,717,4.378,718,4.378,719,4.378,720,4.378,721,4.378,722,4.378,723,4.378,724,4.378,725,4.378,726,4.378]],["title/miscellaneous/enumerations.html",[727,1.161,728,3.193]],["body/miscellaneous/enumerations.html",[7,0.611,11,0.032,26,0.028,27,0.028,55,1.325,186,3.185,270,2.79,311,3.398,727,2.036,728,3.915,729,4.7,730,4.7,731,4.7,732,4.7,733,4.7,734,4.7,735,5.535,736,5.535]],["title/miscellaneous/functions.html",[727,1.161,737,3.193]],["body/miscellaneous/functions.html",[7,0.597,11,0.03,26,0.028,27,0.028,34,3.036,58,1.989,61,0.744,96,1.824,97,1.412,98,1.824,242,3.951,243,2.645,266,3.83,274,3.951,689,3.83,708,3.951,727,1.991,737,3.83,738,4.597,739,3.83,740,4.597,741,6.032,742,4.597]],["title/index.html",[7,0.348,743,2.679,744,2.679]],["body/index.html",[4,0.44,11,0.033,26,0.025,27,0.025,143,0.827,199,3.184,481,2.764,685,2.764,745,3.822,746,3.822,747,4.876,748,3.822,749,3.822,750,3.822,751,3.822,752,3.822,753,3.822,754,5.369,755,3.822,756,3.822,757,3.822,758,5.369,759,6.072,760,3.822,761,3.822,762,3.822,763,5.974,764,3.822,765,3.822,766,4.876,767,3.822,768,3.822,769,3.822,770,3.822,771,4.876,772,4.876,773,3.822,774,3.822,775,3.822,776,4.876,777,4.876,778,3.822,779,3.822,780,3.822,781,3.822,782,3.822,783,3.184,784,3.822,785,3.822,786,3.822,787,3.822,788,3.822,789,3.822,790,3.822,791,3.822,792,3.822,793,3.184,794,3.822,795,3.822,796,3.822,797,3.822,798,3.822,799,3.822,800,3.184]],["title/modules.html",[30,2.256]],["body/modules.html",[11,0.029,26,0.029,27,0.029,29,3.081,30,2.504,40,2.766,41,2.766,783,4.948,801,5.94,802,5.94,803,5.94]],["title/overview.html",[804,3.608]],["body/overview.html",[2,1.943,11,0.032,18,2.888,26,0.026,27,0.026,28,1.943,29,4.055,30,2.134,31,2.134,32,2.627,33,2.627,34,2.134,35,2.627,36,2.627,37,3.414,38,3.414,39,3.414,40,3.433,41,3.433,42,3.19,43,3.266,44,2.627,45,2.627,70,2.358,78,2.358,83,2.963,140,1.626,207,2.963,216,3.414,224,3.414,229,4.244,405,2.888,431,3.414,432,3.414,600,2.888,621,3.414,622,3.414,804,3.414,805,4.098]],["title/properties.html",[154,1.396,711,2.232]],["body/properties.html",[11,0.033,26,0.029,27,0.029,143,1.058,154,1.779,793,4.071,800,4.071,806,4.887,807,4.887,808,4.887]],["title/miscellaneous/typealiases.html",[727,1.161,809,3.833]],["body/miscellaneous/typealiases.html",[7,0.629,11,0.029,26,0.029,27,0.029,58,2.05,61,0.911,243,2.784,274,4.072,708,4.072,727,2.096,739,4.031,810,4.839,811,4.839]],["title/miscellaneous/variables.html",[727,1.161,812,3.193]],["body/miscellaneous/variables.html",[7,0.559,11,0.033,15,0.931,26,0.027,27,0.027,61,0.85,75,2.475,86,3.111,112,3.365,116,3.796,117,3.584,118,2.274,119,3.584,133,3.111,190,3.111,191,3.365,245,3.796,246,3.111,247,3.584,248,3.584,249,3.584,250,3.584,270,2.797,312,4.914,442,2.757,702,3.584,727,1.863,812,3.584,813,5.249,814,4.302,815,4.302,816,4.302]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":807,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["1/1",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":555,"title":{},"body":{"entities/User.html":{}}}],["16",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["2",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{},"overview.html":{}}}],["2/2",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["3.6.0",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["36",{"_index":167,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["4",{"_index":805,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["6/8",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":159,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{}}}],["60s",{"_index":632,"title":{},"body":{"modules/UserModule.html":{}}}],["7.8.1",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8,16",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["8.12.0",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9/9",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["9])(?=.*[a",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["_creationdate",{"_index":293,"title":{},"body":{"entities/Task.html":{}}}],["_description",{"_index":294,"title":{},"body":{"entities/Task.html":{}}}],["_email",{"_index":548,"title":{},"body":{"entities/User.html":{}}}],["_id",{"_index":295,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["_name",{"_index":549,"title":{},"body":{"entities/User.html":{}}}],["_password",{"_index":550,"title":{},"body":{"entities/User.html":{}}}],["_status",{"_index":296,"title":{},"body":{"entities/Task.html":{}}}],["_tasks",{"_index":551,"title":{},"body":{"entities/User.html":{}}}],["_title",{"_index":297,"title":{},"body":{"entities/Task.html":{}}}],["_user",{"_index":298,"title":{},"body":{"entities/Task.html":{}}}],["_username",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["access_token",{"_index":683,"title":{},"body":{"injectables/UserService.html":{}}}],["address",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["adheres",{"_index":150,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["admin",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["aliases",{"_index":810,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allows",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["alpha",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["already",{"_index":283,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["amazing",{"_index":784,"title":{},"body":{"index.html":{}}}],["api",{"_index":149,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["app",{"_index":761,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":626,"title":{},"body":{"modules/UserModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":753,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":268,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["args.constraints[0",{"_index":275,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["array",{"_index":374,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["assigned",{"_index":173,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["associated",{"_index":318,"title":{},"body":{"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["async",{"_index":87,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["atleast",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth.guard",{"_index":605,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["authguard",{"_index":84,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["author",{"_index":793,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["awesome_todo",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":785,"title":{},"body":{"index.html":{}}}],["bearer",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{}}}],["body",{"_index":403,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":803,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":801,"title":{},"body":{"modules.html":{}}}],["building",{"_index":748,"title":{},"body":{"index.html":{}}}],["business",{"_index":478,"title":{},"body":{"injectables/TaskService.html":{}}}],["canactivate",{"_index":88,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":99,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{}}}],["character",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":181,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["characters'})@isalphanumeric('es",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters'})@isnotempty({message",{"_index":161,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["characters.'})@maxlength(30",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars.'})@isunique({tablename",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":21,"title":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponse.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":140,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponse.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":431,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":432,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":621,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":622,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["column({type",{"_index":300,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["completion",{"_index":390,"title":{},"body":{"controllers/TaskController.html":{}}}],["console.log(task",{"_index":523,"title":{},"body":{"injectables/TaskService.html":{}}}],["const",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constraint",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["constraint.ts",{"_index":258,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"coverage.html":{}}}],["constraint.ts:12",{"_index":262,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constraint.ts:14",{"_index":269,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constraint.ts:26",{"_index":265,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constructor",{"_index":91,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["constructor(entitymanager",{"_index":260,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constructor(id",{"_index":440,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["constructor(jwtservice",{"_index":92,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(name",{"_index":574,"title":{},"body":{"entities/User.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["constructor(taskrepository",{"_index":482,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(title",{"_index":340,"title":{},"body":{"entities/Task.html":{}}}],["constructor(userrepository",{"_index":654,"title":{},"body":{"injectables/UserService.html":{}}}],["constructs",{"_index":336,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["contain",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":368,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["context",{"_index":102,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.getclass",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":124,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('task",{"_index":414,"title":{},"body":{"controllers/TaskController.html":{}}}],["controller('user",{"_index":606,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cosntants",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{}}}],["coverage",{"_index":685,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":357,"title":{},"body":{"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":415,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["create(createtaskdto",{"_index":364,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["create(createuserdto",{"_index":580,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["created",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createquerybuilder('task",{"_index":516,"title":{},"body":{"injectables/TaskService.html":{}}}],["createquerybuilder('user",{"_index":511,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["createquerybuilder(tablename",{"_index":279,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["creates",{"_index":367,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["createtaskdto",{"_index":139,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createtaskdto.description",{"_index":509,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtaskdto.title",{"_index":508,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtaskdto.user_id",{"_index":513,"title":{},"body":{"injectables/TaskService.html":{}}}],["createuserdto",{"_index":189,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":671,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.name",{"_index":668,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":670,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.username",{"_index":669,"title":{},"body":{"injectables/UserService.html":{}}}],["creating",{"_index":145,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["creation",{"_index":488,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["creationdate",{"_index":302,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["creationdate(value",{"_index":333,"title":{},"body":{"entities/Task.html":{}}}],["creationdate.tolocaledatestring('es",{"_index":462,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["crud",{"_index":354,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["current",{"_index":444,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["data",{"_index":147,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["database",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["dataexist",{"_index":276,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["date",{"_index":299,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"dependencies.html":{}}}],["day",{"_index":463,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["decorator.ts",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":312,"title":{},"body":{"entities/Task.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":259,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["defaultmessage(validationarguments",{"_index":263,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["defines",{"_index":352,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["delete",{"_index":388,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":385,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":499,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["deletes",{"_index":387,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleting",{"_index":652,"title":{},"body":{"injectables/UserService.html":{}}}],["deletion",{"_index":391,"title":{},"body":{"controllers/TaskController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":143,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["description(value",{"_index":328,"title":{},"body":{"entities/Task.html":{}}}],["details",{"_index":489,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["development",{"_index":762,"title":{},"body":{"index.html":{}}}],["digit",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{}}}],["documentation",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":736,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":144,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["dto.ts",{"_index":287,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["dto.ts:13",{"_index":289,"title":{},"body":{"classes/SignInDto.html":{}}}],["dto.ts:8",{"_index":290,"title":{},"body":{"classes/SignInDto.html":{}}}],["dto/create",{"_index":407,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/signin",{"_index":604,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/task",{"_index":410,"title":{},"body":{"controllers/TaskController.html":{}}}],["dto/update",{"_index":409,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user",{"_index":602,"title":{},"body":{"controllers/UserController.html":{}}}],["e2e",{"_index":773,"title":{},"body":{"index.html":{}}}],["each",{"_index":309,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["ecret",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":749,"title":{},"body":{"index.html":{}}}],["email",{"_index":196,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["email(value",{"_index":570,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":592,"title":{},"body":{"controllers/UserController.html":{}}}],["ensures",{"_index":146,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["entities",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"entities/Task.html":{},"entities/User.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["entities/task.entity",{"_index":412,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{}}}],["entities/user.entity",{"_index":603,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":291,"title":{"entities/Task.html":{},"entities/User.html":{}},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entitymanager",{"_index":261,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["enum",{"_index":311,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":728,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["es",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{}}}],["example",{"_index":758,"title":{},"body":{"index.html":{}}}],["execute",{"_index":676,"title":{},"body":{"injectables/UserService.html":{}}}],["executioncontext",{"_index":100,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exist",{"_index":284,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["existing",{"_index":501,"title":{},"body":{"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["expiresin",{"_index":631,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["expose",{"_index":454,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["express",{"_index":111,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":534,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["extracttokenfromheader",{"_index":90,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":104,"title":{},"body":{"guards/AuthGuard.html":{}}}],["factory",{"_index":452,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["field",{"_index":281,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":358,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findallbyuser",{"_index":359,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["findallbyuser(@param('id",{"_index":421,"title":{},"body":{"controllers/TaskController.html":{}}}],["findallbyuser(id",{"_index":375,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["finding",{"_index":651,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":360,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":423,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":381,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["fns",{"_index":459,"title":{},"body":{"classes/TaskResponseDto.html":{},"dependencies.html":{}}}],["format",{"_index":458,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["formatted",{"_index":583,"title":{},"body":{"controllers/UserController.html":{}}}],["found",{"_index":497,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":747,"title":{},"body":{"index.html":{}}}],["full",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["function",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":737,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":310,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["get(':id",{"_index":382,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["get('profile",{"_index":588,"title":{},"body":{"controllers/UserController.html":{}}}],["get('user/:id",{"_index":376,"title":{},"body":{"controllers/TaskController.html":{}}}],["getexists",{"_index":280,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":518,"title":{},"body":{"injectables/TaskService.html":{}}}],["getone",{"_index":514,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["getprofile",{"_index":578,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(@request",{"_index":619,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(req",{"_index":587,"title":{},"body":{"controllers/UserController.html":{}}}],["getrepository(tablename",{"_index":278,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["getting",{"_index":743,"title":{"index.html":{}},"body":{}}],["given",{"_index":338,"title":{},"body":{"entities/Task.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["global",{"_index":629,"title":{},"body":{"modules/UserModule.html":{}}}],["grow",{"_index":780,"title":{},"body":{"index.html":{}}}],["guard",{"_index":83,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":85,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handles",{"_index":477,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["handling",{"_index":349,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["hello",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":790,"title":{},"body":{"index.html":{}}}],["host",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["hour",{"_index":466,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["httpcode",{"_index":598,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":615,"title":{},"body":{"controllers/UserController.html":{}}}],["https://nestjs.com",{"_index":797,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":599,"title":{},"body":{"controllers/UserController.html":{}}}],["id",{"_index":168,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["id(value",{"_index":324,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["identifier",{"_index":308,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["implements",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["in_progress",{"_index":735,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["including",{"_index":650,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":389,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["initialize",{"_index":573,"title":{},"body":{"entities/User.html":{}}}],["injectable",{"_index":77,"title":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":504,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["injectrepository(task",{"_index":505,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectrepository(user",{"_index":506,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["input",{"_index":194,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["installation",{"_index":757,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":760,"title":{},"body":{"index.html":{}}}],["instance",{"_index":337,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["interacts",{"_index":480,"title":{},"body":{"injectables/TaskService.html":{}}}],["is_public_key",{"_index":116,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalphanumeric",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isalphanumeric('es",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":542,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["isenum(taskstatus",{"_index":183,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty",{"_index":177,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty({message",{"_index":197,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispublic",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":174,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@length(36",{"_index":166,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isstring()@maxlength(60",{"_index":164,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isstring()@minlength(2",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(5",{"_index":157,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isuniqeinterface",{"_index":274,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["isunique",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isunique(options",{"_index":740,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isuniqueconstraint",{"_index":42,"title":{"injectables/IsUniqueConstraint.html":{}},"body":{"modules/AppModule.html":{},"injectables/IsUniqueConstraint.html":{},"coverage.html":{},"overview.html":{}}}],["join",{"_index":787,"title":{},"body":{"index.html":{}}}],["jwtconstants",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{}}}],["jwtmodule",{"_index":625,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":628,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtservice",{"_index":93,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserService.html":{}}}],["kamil",{"_index":794,"title":{},"body":{"index.html":{}}}],["key",{"_index":526,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["leftjoinandselect('task._user",{"_index":517,"title":{},"body":{"injectables/TaskService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":178,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["length'})@isnotempty({message",{"_index":171,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["length(36",{"_index":188,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["less",{"_index":160,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["letter",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":800,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":777,"title":{},"body":{"index.html":{}}}],["list",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["literal",{"_index":811,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["localhost",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":479,"title":{},"body":{"injectables/TaskService.html":{}}}],["long",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lowercase",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory",{"_index":162,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["mandatory'})@isemail",{"_index":198,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory'})@matches(passwordregex",{"_index":212,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory'})@minlength(3",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["manytoone",{"_index":320,"title":{},"body":{"entities/Task.html":{}}}],["manytoone(undefined",{"_index":315,"title":{},"body":{"entities/Task.html":{}}}],["match",{"_index":169,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["matches",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(passwordregex",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":176,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(30",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(60",{"_index":180,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["message",{"_index":158,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["metadata",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":453,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":175,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":182,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["minute",{"_index":467,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["miscellaneous",{"_index":727,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":776,"title":{},"body":{"index.html":{}}}],["mode",{"_index":766,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":464,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["more",{"_index":789,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":795,"title":{},"body":{"index.html":{}}}],["name",{"_index":97,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["name(value",{"_index":564,"title":{},"body":{"entities/User.html":{}}}],["necessary",{"_index":151,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["nest",{"_index":754,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":799,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":110,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":538,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newly",{"_index":582,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["node.js",{"_index":746,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":503,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('no",{"_index":525,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":759,"title":{},"body":{"index.html":{}}}],["null",{"_index":524,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["numeric",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{}}}],["object",{"_index":442,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object.entries(updatetaskdto",{"_index":527,"title":{},"body":{"injectables/TaskService.html":{}}}],["object.entries(updateuserdto",{"_index":673,"title":{},"body":{"injectables/UserService.html":{}}}],["of(task",{"_index":450,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["of(user",{"_index":639,"title":{},"body":{"classes/UserResponse.html":{}}}],["omittype",{"_index":537,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["omittype(createtaskdto",{"_index":536,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["one",{"_index":214,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":562,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":557,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":778,"title":{},"body":{"index.html":{}}}],["operation",{"_index":392,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["operations",{"_index":355,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["optional",{"_index":98,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":742,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":804,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":711,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":339,"title":{},"body":{"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["param('id",{"_index":427,"title":{},"body":{"controllers/TaskController.html":{}}}],["parameters",{"_index":96,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":185,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["partialtype",{"_index":535,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":545,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["password(value",{"_index":568,"title":{},"body":{"entities/User.html":{}}}],["passwordregex",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":404,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":395,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["patch('status/:id",{"_index":401,"title":{},"body":{"controllers/TaskController.html":{}}}],["payload",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserService.html":{}}}],["pg",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["plaintoinstance",{"_index":455,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["please",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["populated",{"_index":641,"title":{},"body":{"classes/UserResponse.html":{}}}],["port",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":365,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":616,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":348,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":321,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":306,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["private",{"_index":89,"title":{},"body":{"guards/AuthGuard.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["production",{"_index":768,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":745,"title":{},"body":{"index.html":{}}}],["project",{"_index":779,"title":{},"body":{"index.html":{}}}],["promise",{"_index":103,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":154,"title":{"properties.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"properties.html":{}}}],["provide",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/UserModule.html":{}}}],["provided",{"_index":443,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@httpcode(httpstatus.ok)@post('login",{"_index":595,"title":{},"body":{"controllers/UserController.html":{}}}],["read",{"_index":788,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["record",{"_index":657,"title":{},"body":{"injectables/UserService.html":{}}}],["records",{"_index":653,"title":{},"body":{"injectables/UserService.html":{}}}],["reflect",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":94,"title":{},"body":{"guards/AuthGuard.html":{}}}],["related",{"_index":350,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove",{"_index":361,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":429,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":384,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":481,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":731,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["req",{"_index":590,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user",{"_index":620,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":105,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/UserController.html":{}}}],["request.headers.authorization?.split",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requests",{"_index":351,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":491,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["response",{"_index":438,"title":{},"body":{"classes/TaskResponseDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{}}}],["response.dto",{"_index":411,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["response.dto.ts",{"_index":437,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":636,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:13",{"_index":447,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:15",{"_index":637,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:18",{"_index":449,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:20",{"_index":638,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:23",{"_index":446,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:25",{"_index":635,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:28",{"_index":448,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:33",{"_index":445,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:38",{"_index":441,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:48",{"_index":640,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:78",{"_index":451,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["result",{"_index":661,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":379,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["retrieved",{"_index":494,"title":{},"body":{"injectables/TaskService.html":{}}}],["retrieves",{"_index":373,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["routes",{"_index":353,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["rules",{"_index":153,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["run",{"_index":763,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["saves",{"_index":487,"title":{},"body":{"injectables/TaskService.html":{}}}],["scalable",{"_index":750,"title":{},"body":{"index.html":{}}}],["second",{"_index":468,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["secret",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["sent",{"_index":148,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["server",{"_index":751,"title":{},"body":{"index.html":{}}}],["service",{"_index":476,"title":{},"body":{"injectables/TaskService.html":{}}}],["set",{"_index":323,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["setmetadata",{"_index":108,"title":{},"body":{"guards/AuthGuard.html":{}}}],["setmetadata(is_public_key",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":752,"title":{},"body":{"index.html":{}}}],["sign",{"_index":288,"title":{},"body":{"classes/SignInDto.html":{}}}],["signin",{"_index":579,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["signin(@body",{"_index":617,"title":{},"body":{"controllers/UserController.html":{}}}],["signin(signindto",{"_index":594,"title":{},"body":{"controllers/UserController.html":{}}}],["signin(singindto",{"_index":662,"title":{},"body":{"injectables/UserService.html":{}}}],["signindto",{"_index":285,"title":{"classes/SignInDto.html":{}},"body":{"classes/SignInDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["signoptions",{"_index":630,"title":{},"body":{"modules/UserModule.html":{}}}],["singindto",{"_index":664,"title":{},"body":{"injectables/UserService.html":{}}}],["singindto.password",{"_index":681,"title":{},"body":{"injectables/UserService.html":{}}}],["singindto.username",{"_index":679,"title":{},"body":{"injectables/UserService.html":{}}}],["single",{"_index":496,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"index.html":{}}}],["space",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["special",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":378,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["specified",{"_index":380,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["sponsors",{"_index":782,"title":{},"body":{"index.html":{}}}],["src/.../auth.guard.ts",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cosntants.ts",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":739,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../taskstatus.ts",{"_index":729,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["src/main.ts",{"_index":689,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/task/dto/create",{"_index":141,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/task/dto/task",{"_index":436,"title":{},"body":{"classes/TaskResponseDto.html":{},"coverage.html":{}}}],["src/task/dto/update",{"_index":532,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["src/task/entities/task.entity",{"_index":561,"title":{},"body":{"entities/User.html":{}}}],["src/task/entities/task.entity.ts",{"_index":292,"title":{},"body":{"entities/Task.html":{},"coverage.html":{}}}],["src/task/entities/task.entity.ts:14",{"_index":307,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:26",{"_index":314,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:38",{"_index":305,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:55",{"_index":313,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:67",{"_index":303,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:80",{"_index":317,"title":{},"body":{"entities/Task.html":{}}}],["src/task/task.controller.ts",{"_index":347,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/task/task.controller.ts:31",{"_index":366,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:40",{"_index":372,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:51",{"_index":377,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:62",{"_index":383,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:73",{"_index":396,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:84",{"_index":402,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:97",{"_index":386,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.module.ts",{"_index":433,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/task/task.service.ts",{"_index":475,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/task/task.service.ts:101",{"_index":500,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:129",{"_index":502,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:15",{"_index":484,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:151",{"_index":498,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:27",{"_index":486,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:45",{"_index":490,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:58",{"_index":492,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:79",{"_index":495,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/taskstatus.ts",{"_index":730,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/auth.guard.ts",{"_index":86,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/auth.guard.ts:17",{"_index":95,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/user/auth.guard.ts:23",{"_index":101,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/user/auth.guard.ts:48",{"_index":106,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/user/cosntants.ts",{"_index":702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/create",{"_index":190,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/signin",{"_index":286,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":544,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/user",{"_index":634,"title":{},"body":{"classes/UserResponse.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":319,"title":{},"body":{"entities/Task.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":547,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:13",{"_index":553,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:25",{"_index":554,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:37",{"_index":560,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:49",{"_index":556,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:61",{"_index":552,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:73",{"_index":559,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":576,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:36",{"_index":581,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:46",{"_index":585,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:58",{"_index":586,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:70",{"_index":597,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:81",{"_index":591,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:88",{"_index":596,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:93",{"_index":589,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":623,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":649,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:103",{"_index":660,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:112",{"_index":663,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":655,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:31",{"_index":656,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:47",{"_index":658,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:58",{"_index":659,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:78",{"_index":665,"title":{},"body":{"injectables/UserService.html":{}}}],["src/validation/unique/is",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["start",{"_index":764,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":767,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":769,"title":{},"body":{"index.html":{}}}],["started",{"_index":744,"title":{"index.html":{}},"body":{}}],["starter",{"_index":756,"title":{},"body":{"index.html":{}}}],["state",{"_index":187,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["statements",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":439,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["status",{"_index":184,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["status(value",{"_index":331,"title":{},"body":{"entities/Task.html":{}}}],["status.dto",{"_index":413,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["status.dto.ts",{"_index":540,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:14",{"_index":541,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["status.status",{"_index":530,"title":{},"body":{"injectables/TaskService.html":{}}}],["statuses",{"_index":733,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":791,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":682,"title":{},"body":{"injectables/UserService.html":{}}}],["successfully",{"_index":593,"title":{},"body":{"controllers/UserController.html":{}}}],["support",{"_index":783,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":802,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["tablename",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":55,"title":{"entities/Task.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["task.controller",{"_index":434,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.creationdate",{"_index":474,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.description",{"_index":471,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.dto",{"_index":408,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts",{"_index":142,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:21",{"_index":165,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:29",{"_index":163,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:40",{"_index":172,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.id",{"_index":469,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.service",{"_index":406,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.status",{"_index":472,"title":{},"body":{"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{}}}],["task.title",{"_index":470,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.user",{"_index":558,"title":{},"body":{"entities/User.html":{}}}],["task.user.id",{"_index":473,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task/entities/task.entity",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["task/task.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["task[key",{"_index":528,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcontroller",{"_index":346,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskmodule",{"_index":40,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskrepository",{"_index":485,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskresponsedto",{"_index":371,"title":{"classes/TaskResponseDto.html":{}},"body":{"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"coverage.html":{}}}],["taskresponsedto.of(await",{"_index":416,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskresponsedto.of(task",{"_index":420,"title":{},"body":{"controllers/TaskController.html":{}}}],["tasks",{"_index":356,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["tasks(value",{"_index":572,"title":{},"body":{"entities/User.html":{}}}],["tasks.map((task",{"_index":419,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskservice",{"_index":405,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":186,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskStatusDto.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.to_do",{"_index":329,"title":{},"body":{"entities/Task.html":{}}}],["test",{"_index":772,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":775,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":774,"title":{},"body":{"index.html":{}}}],["tests",{"_index":771,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":781,"title":{},"body":{"index.html":{}}}],["this._creationdate",{"_index":332,"title":{},"body":{"entities/Task.html":{}}}],["this._description",{"_index":327,"title":{},"body":{"entities/Task.html":{}}}],["this._email",{"_index":569,"title":{},"body":{"entities/User.html":{}}}],["this._id",{"_index":322,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["this._name",{"_index":563,"title":{},"body":{"entities/User.html":{}}}],["this._password",{"_index":567,"title":{},"body":{"entities/User.html":{}}}],["this._status",{"_index":330,"title":{},"body":{"entities/Task.html":{}}}],["this._tasks",{"_index":571,"title":{},"body":{"entities/User.html":{}}}],["this._title",{"_index":325,"title":{},"body":{"entities/Task.html":{}}}],["this._user",{"_index":334,"title":{},"body":{"entities/Task.html":{}}}],["this._username",{"_index":565,"title":{},"body":{"entities/User.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.creationdate",{"_index":345,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.description",{"_index":342,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.email",{"_index":644,"title":{},"body":{"classes/UserResponse.html":{}}}],["this.entitymanager",{"_index":277,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["this.extracttokenfromheader(request",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.id",{"_index":460,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["this.jwtservice.signasync(payload",{"_index":684,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.name",{"_index":642,"title":{},"body":{"classes/UserResponse.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.status",{"_index":343,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.taskrepository",{"_index":515,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.delete(id",{"_index":531,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.find",{"_index":519,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save",{"_index":507,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save(task",{"_index":529,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.create(createtaskdto",{"_index":417,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findall",{"_index":418,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findallbyuser(id",{"_index":422,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findone(id",{"_index":424,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.remove(id",{"_index":430,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.update(id",{"_index":426,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatestatus(id",{"_index":428,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.title",{"_index":341,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.user",{"_index":344,"title":{},"body":{"entities/Task.html":{}}}],["this.user_id",{"_index":461,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["this.username",{"_index":643,"title":{},"body":{"classes/UserResponse.html":{}}}],["this.userrepository",{"_index":510,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.delete(id",{"_index":677,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":672,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":667,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":675,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":608,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":609,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":612,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":614,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.signin(signindto",{"_index":618,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":613,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["throws",{"_index":521,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":301,"title":{},"body":{"entities/Task.html":{}}}],["title",{"_index":155,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["title(value",{"_index":326,"title":{},"body":{"entities/Task.html":{}}}],["to_do",{"_index":734,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["token",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{}}}],["touch",{"_index":792,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":666,"title":{},"body":{"injectables/UserService.html":{}}}],["transform",{"_index":456,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["transformer",{"_index":457,"title":{},"body":{"classes/TaskResponseDto.html":{},"dependencies.html":{}}}],["true",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/IsUniqueConstraint.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{}}}],["twitter",{"_index":798,"title":{},"body":{"index.html":{}}}],["type",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/SignInDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":809,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":273,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":435,"title":{},"body":{"modules/TaskModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":627,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":539,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":755,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":109,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserService.html":{}}}],["undefined",{"_index":107,"title":{},"body":{"guards/AuthGuard.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["unique",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":770,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":369,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":808,"title":{},"body":{"properties.html":{}}}],["update",{"_index":362,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":425,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":393,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":398,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updates",{"_index":397,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatestatus",{"_index":363,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatestatus(id",{"_index":399,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatetaskdto",{"_index":394,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updatetaskstatusdto",{"_index":400,"title":{"classes/UpdateTaskStatusDto.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":543,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updating",{"_index":533,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["uppercase",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["useclass",{"_index":633,"title":{},"body":{"modules/UserModule.html":{}}}],["used",{"_index":192,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user",{"_index":52,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user's",{"_index":203,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["user(value",{"_index":335,"title":{},"body":{"entities/Task.html":{}}}],["user.controller",{"_index":624,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":546,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":191,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:28",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:53",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:60",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":648,"title":{},"body":{"classes/UserResponse.html":{}}}],["user.id",{"_index":520,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["user.name",{"_index":646,"title":{},"body":{"classes/UserResponse.html":{}}}],["user.service",{"_index":601,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.tasks",{"_index":316,"title":{},"body":{"entities/Task.html":{}}}],["user.username",{"_index":647,"title":{},"body":{"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["user/entities/user.entity",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["user?.password",{"_index":680,"title":{},"body":{"injectables/UserService.html":{}}}],["user[key",{"_index":674,"title":{},"body":{"injectables/UserService.html":{}}}],["user_id",{"_index":156,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{}}}],["usercontroller",{"_index":575,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":41,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["username(value",{"_index":566,"title":{},"body":{"entities/User.html":{}}}],["userrepository",{"_index":483,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["userresponse",{"_index":584,"title":{"classes/UserResponse.html":{}},"body":{"controllers/UserController.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["userresponse(user.id",{"_index":645,"title":{},"body":{"classes/UserResponse.html":{}}}],["userresponse.of(await",{"_index":607,"title":{},"body":{"controllers/UserController.html":{}}}],["userresponse.of(user",{"_index":611,"title":{},"body":{"controllers/UserController.html":{}}}],["users",{"_index":577,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.map((user",{"_index":610,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":600,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":170,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["valid",{"_index":201,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":193,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["validate(value",{"_index":267,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validation",{"_index":152,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["validation/unique/is",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["validationarguments",{"_index":264,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validationarguments.property",{"_index":282,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validationoptions",{"_index":741,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":179,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/UpdateTaskStatusDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":271,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validatorconstraintinterface",{"_index":272,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["value",{"_index":270,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":304,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["variable",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":812,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":732,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":806,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":765,"title":{},"body":{"index.html":{}}}],["website",{"_index":796,"title":{},"body":{"index.html":{}}}],["where('task.id",{"_index":522,"title":{},"body":{"injectables/TaskService.html":{}}}],["where('user.id",{"_index":512,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["where('user.username",{"_index":678,"title":{},"body":{"injectables/UserService.html":{}}}],["whose",{"_index":493,"title":{},"body":{"injectables/TaskService.html":{}}}],["world",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["wrapped",{"_index":370,"title":{},"body":{"controllers/TaskController.html":{}}}],["year",{"_index":465,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["yes",{"_index":266,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":786,"title":{},"body":{"index.html":{}}}],["z])(?=.*[a",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\w",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nIsUniqueConstraint\n\nIsUniqueConstraint\n\nAppModule -->\n\nIsUniqueConstraint->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            IsUniqueConstraint\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TaskModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './user/user.module';\nimport { User } from './user/entities/user.entity';\nimport { TaskModule } from './task/task.module';\nimport { Task } from './task/entities/task.entity';\nimport { IsUniqueConstraint } from './validation/unique/is-unique-constraint';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: 'localhost',\n      port: 5432,\n      password: 'admin',\n      username: 'postgres',\n      entities: [User, Task],\n      database: 'awesome_todo-list',\n      synchronize: true,\n      logging: true,\n    }),\n    UserModule,\n    TaskModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, IsUniqueConstraint],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/user/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/user/auth.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/auth.guard.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/auth.guard.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  SetMetadata,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { jwtConstants } from './cosntants';\nimport { Reflector } from '@nestjs/core';\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/create-task.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new task.\nThis DTO ensures that the data sent to the API for creating a task\nadheres to the necessary validation rules.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(5, {message: 'Description must have 60 or less characters'})@IsNotEmpty({message: 'Description is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:29\n                        \n                    \n\n            \n                \n                    The description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(60, {message: 'Title must have 60 or less characters'})@IsNotEmpty({message: 'Title is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:21\n                        \n                    \n\n            \n                \n                    The title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(36, 36, {message: 'User ID must match UUID length'})@IsNotEmpty({message: 'Description is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:40\n                        \n                    \n\n            \n                \n                    The ID of the user to whom the task is assigned.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  MinLength,\n  MaxLength,\n  IsNotEmpty,\n  Length,\n} from 'class-validator';\n\n/**\n * DTO for creating a new task.\n * This DTO ensures that the data sent to the API for creating a task\n * adheres to the necessary validation rules.\n */\nexport class CreateTaskDto {\n  /**\n   * The title of the task.\n   */\n  @IsString()\n  @MaxLength(60, { message: 'Title must have 60 or less characters' })\n  @IsNotEmpty({ message: 'Title is mandatory' })\n  title: string;\n\n  /**\n   * The description of the task.\n   */\n  @IsString()\n  @MinLength(5, { message: 'Description must have 60 or less characters' })\n  @IsNotEmpty({ message: 'Description is mandatory' })\n  description: string;\n\n  //@IsEnum(TaskStatus, { message: 'Status must be part of TaskStatus' })\n  //state: TaskStatus;\n\n  /**\n   * The ID of the user to whom the task is assigned.\n   */\n  @IsString()\n  @Length(36, 36, { message: 'User ID must match UUID length' })\n  @IsNotEmpty({ message: 'Description is mandatory' })\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\nThis class is used to validate the input data when a new user is created.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Email is mandatory'})@IsEmail({}, {message: 'Please provide valid Email.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:60\n                        \n                    \n\n            \n                \n                    The user's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(2, {message: 'Name must have atleast 2 characters.'})@MaxLength(30, {message: 'Name must have 30 or less characters'})@IsNotEmpty({message: 'Name is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    The user's full name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password is mandatory'})@Matches(passwordRegEx, {message: Password must contain one digit from 1 to 9, one lowercase letter, one uppercase letter, one special character, no space, and it must be 8-16 characters long.})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    The user's password.\nPassword must contain one digit from 1 to 9,\none lowercase letter, one uppercase letter,\none special character, no space,\nand it must be 8-16 characters long.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Username is mandatory'})@MinLength(3, {message: 'Username must have atleast 3 characters.'})@MaxLength(30, {message: 'Username must have 30 or less characters'})@IsAlphanumeric('es-ES', {message: 'Username only allows alpha numeric chars.'})@IsUnique({tableName: 'user', column: '_username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:40\n                        \n                    \n\n            \n                \n                    The user's unique username.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { IsUnique } from 'src/validation/unique/is-unique-decorator';\n\nconst passwordRegEx =\n  /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/;\n\n/**\n * DTO for creating a new user.\n * This class is used to validate the input data when a new user is created.\n */\nexport class CreateUserDto {\n  /**\n   * The user's full name.\n   */\n  @IsString()\n  @MinLength(2, { message: 'Name must have atleast 2 characters.' })\n  @MaxLength(30, { message: 'Name must have 30 or less characters' })\n  @IsNotEmpty({ message: 'Name is mandatory' })\n  name: string;\n\n  /**\n   * The user's unique username.\n   */\n  @IsNotEmpty({ message: 'Username is mandatory' })\n  @MinLength(3, { message: 'Username must have atleast 3 characters.' })\n  @MaxLength(30, { message: 'Username must have 30 or less characters' })\n  @IsAlphanumeric('es-ES', {\n    message: 'Username only allows alpha numeric chars.',\n  })\n  @IsUnique({ tableName: 'user', column: '_username' })\n  username: string;\n\n  /**\n   * The user's password.\n   * Password must contain one digit from 1 to 9,\n   * one lowercase letter, one uppercase letter,\n   * one special character, no space,\n   * and it must be 8-16 characters long.\n   */\n  @IsNotEmpty({ message: 'Password is mandatory' })\n  @Matches(passwordRegEx, {\n    message: `Password must contain one digit from 1 to 9, one lowercase letter, one uppercase letter, one special character, no space, and it must be 8-16 characters long.`,\n  })\n  password: string;\n\n  /**\n   * The user's email address.\n   */\n  @IsNotEmpty({ message: 'Email is mandatory' })\n  @IsEmail({}, { message: 'Please provide valid Email.' })\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsUniqueConstraint.html":{"url":"injectables/IsUniqueConstraint.html","title":"injectable - IsUniqueConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsUniqueConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/unique/is-unique-constraint.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityManager: EntityManager)\n                    \n                \n                        \n                            \n                                Defined in src/validation/unique/is-unique-constraint.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/unique/is-unique-constraint.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationArguments\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(value: any, args?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/unique/is-unique-constraint.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { EntityManager } from 'typeorm';\nimport { IsUniqeInterface } from './is-unique-decorator';\n\n@ValidatorConstraint({ name: 'IsUniqueConstraint', async: true })\n@Injectable()\nexport class IsUniqueConstraint implements ValidatorConstraintInterface {\n  constructor(private readonly entityManager: EntityManager) {}\n  async validate(value: any, args?: ValidationArguments): Promise {\n    const { tableName, column }: IsUniqeInterface = args.constraints[0];\n\n    const dataExist = await this.entityManager\n      .getRepository(tableName)\n      .createQueryBuilder(tableName)\n      .where({ [column]: value })\n      .getExists();\n\n    return !dataExist;\n  }\n\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    const field: string = validationArguments.property;\n    return `${field} already exist`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/signin-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO to sign in.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/signin-dto.ts:13\n                        \n                    \n\n            \n                \n                    The user's password.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/signin-dto.ts:8\n                        \n                    \n\n            \n                \n                    The user's username.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SignInDto {\n  /**\n   * The user's username.\n   */\n  username: string;\n\n  /**\n   * The user's password.\n   */\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Task.html":{"url":"entities/Task.html","title":"entity - Task","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/entities/task.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Task entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                _creationDate\n                            \n                            \n                                    \n                                    Private\n                                _description\n                            \n                            \n                                    \n                                    Private\n                                _id\n                            \n                            \n                                    \n                                    Private\n                                _status\n                            \n                            \n                                    \n                                    Private\n                                _title\n                            \n                            \n                                    \n                                    Private\n                                _user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', name: 'creationDate'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:67\n                        \n                    \n\n            \n                \n                    The date when the task was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', name: 'description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:38\n                        \n                    \n\n            \n                \n                    The description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid', {name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:14\n                        \n                    \n\n            \n                \n                    Unique identifier for each task, generated as a UUID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TaskStatus, default: undefined, name: 'status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:55\n                        \n                    \n\n            \n                \n                    The status of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, name: 'title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:26\n                        \n                    \n\n            \n                \n                    The title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.tasks)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:80\n                        \n                    \n\n            \n                \n                    The user who is associated with the task.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/user/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { TaskStatus } from '../taskStatus';\n\n/**\n * Task entity\n */\n@Entity()\nexport class Task {\n  /**\n   * Unique identifier for each task, generated as a UUID.\n   */\n  @PrimaryGeneratedColumn('uuid', { name: 'id' })\n  private _id: string;\n  public get id(): string {\n    return this._id;\n  }\n  public set id(value: string) {\n    this._id = value;\n  }\n\n  /**\n   * The title of the task.\n   */\n  @Column({ type: 'varchar', length: 60, name: 'title' })\n  private _title: string;\n  public get title(): string {\n    return this._title;\n  }\n  public set title(value: string) {\n    this._title = value;\n  }\n\n  /**\n   * The description of the task.\n   */\n  @Column({ type: 'varchar', name: 'description' })\n  private _description: string;\n  public get description(): string {\n    return this._description;\n  }\n  public set description(value: string) {\n    this._description = value;\n  }\n\n  /**\n   * The status of the task.\n   */\n  @Column({\n    type: 'enum',\n    enum: TaskStatus,\n    default: TaskStatus.TO_DO,\n    name: 'status',\n  })\n  private _status: TaskStatus;\n  public get status(): TaskStatus {\n    return this._status;\n  }\n  public set status(value: TaskStatus) {\n    this._status = value;\n  }\n\n  /**\n   * The date when the task was created.\n   */\n  @Column({ type: 'timestamp', name: 'creationDate' })\n  private _creationDate: Date;\n  public get creationDate(): Date {\n    return this._creationDate;\n  }\n  public set creationDate(value: Date) {\n    this._creationDate = value;\n  }\n\n\n  /**\n   * The user who is associated with the task.\n   */\n  @ManyToOne(() => User, (user: User) => user.tasks)\n  private _user: User;\n  public get user(): User {\n    return this._user;\n  }\n  public set user(value: User) {\n    this._user = value;\n  }\n\n  /**\n   * Constructs a new task instance with the given title, description, and associated user.\n   *\n   * @param {string} title - The title of the task.\n   * @param {string} description - The description of the task.\n   * @param {User} user - The user associated with this task.\n   */\n  constructor(title: string, description: string, user: User) {\n    this.title = title;\n    this.description = description;\n    this.status = TaskStatus.TO_DO;\n    this.user = user;\n    this.creationDate = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling task-related requests.\nDefines the routes and methods for CRUD operations on tasks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing data for creating a new task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created task wrapped in a TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of tasks wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks associated with a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user for whom to retrieve tasks.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of tasks for the specified user, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The task with the specified ID, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Deletes a task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise indicating the completion of the deletion operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Updates a task with new data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to update.\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing updated data for the task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: UpdateTaskStatusDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('status/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Updates the status of a task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to update.\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing the new status for the task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task with the new status, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TaskResponseDto } from './dto/task-response.dto';\nimport { Task } from './entities/task.entity';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\n\n/**\n * Controller for handling task-related requests.\n * Defines the routes and methods for CRUD operations on tasks.\n */\n@Controller('task')\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  /**\n   * Creates a new task.\n   * @param {CreateTaskDto} createTaskDto The DTO containing data for creating a new task.\n   * @returns {TaskResponseDto} The created task wrapped in a TaskResponseDto.\n   */\n  @Post()\n  async create(@Body() createTaskDto: CreateTaskDto) {\n    return TaskResponseDto.of(await this.taskService.create(createTaskDto));\n  }\n\n  /**\n   * Retrieves all tasks.\n   * @returns {TaskResponseDto[]} An array of tasks wrapped in TaskResponseDto.\n   */\n  @Get()\n  async findAll() {\n    const tasks: Task[] = await this.taskService.findAll();\n    return tasks.map((task) => TaskResponseDto.of(task));\n  }\n\n  /**\n   * Retrieves all tasks associated with a specific user.\n   * @param {string} id The ID of the user for whom to retrieve tasks.\n   * @returns {TaskResponseDto[]} An array of tasks for the specified user, wrapped in TaskResponseDto.\n   */\n  @Get('user/:id')\n  async findAllByUser(@Param('id') id: string) {\n    const tasks: Task[] = await this.taskService.findAllByUser(id);\n    return tasks.map((task) => TaskResponseDto.of(task));\n  }\n\n  /**\n   * Retrieves a specific task by its ID.\n   * @param {string} id The ID of the task to retrieve.\n   * @returns {TaskResponseDto} The task with the specified ID, wrapped in TaskResponseDto.\n   */\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return TaskResponseDto.of(await this.taskService.findOne(id));\n  }\n\n  /**\n   * Updates a task with new data.\n   * @param {string} id The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto The DTO containing updated data for the task.\n   * @returns {TaskResponseDto} The updated task wrapped in TaskResponseDto.\n   */\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto) {\n    return TaskResponseDto.of(await this.taskService.update(id, updateTaskDto));\n  }\n\n  /**\n   * Updates the status of a task.\n   * @param {string} id The ID of the task to update.\n   * @param {UpdateTaskStatusDto} status The DTO containing the new status for the task.\n   * @returns {TaskResponseDto} The updated task with the new status, wrapped in TaskResponseDto.\n   */\n  @Patch('status/:id')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() status: UpdateTaskStatusDto,\n  ) {\n    return TaskResponseDto.of(await this.taskService.updateStatus(id, status));\n  }\n\n  /**\n   * Deletes a task by its ID.\n   * @param {string} id The ID of the task to delete.\n   * @returns A promise indicating the completion of the deletion operation.\n   */\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.taskService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nTaskService\n\nTaskService\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Task } from './entities/task.entity';\nimport { User } from 'src/user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task, User])],\n  controllers: [TaskController],\n  providers: [TaskService],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskResponseDto.html":{"url":"classes/TaskResponseDto.html","title":"class - TaskResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/task-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for Task Response.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                creationDate\n                            \n                            \n                                    Private\n                                description\n                            \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                status\n                            \n                            \n                                    Private\n                                title\n                            \n                            \n                                    Private\n                                user_id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, title: string, description: string, status: TaskStatus, user_id: string, creationDate: Date)\n                    \n                \n                        \n                            \n                                Defined in src/task/dto/task-response.dto.ts:38\n                            \n                        \n\n                \n                    \n                            Constructs a TaskResponseDto object with the provided parameters.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe title of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe description of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        TaskStatus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe current status of the task (enum TaskStatus).\n\n\n                                                        \n                                                \n                                                \n                                                        user_id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the user associated with the task.\n\n\n                                                        \n                                                \n                                                \n                                                        creationDate\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The date when the task was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    Description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:28\n                        \n                    \n\n            \n                \n                    Current status of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:18\n                        \n                    \n\n            \n                \n                    Title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:38\n                        \n                    \n\n            \n                \n                    Unique identifier of the user associated with the task.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        of\n                        \n                    \n                \n            \n            \n                \n                        \n                    of(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/dto/task-response.dto.ts:78\n                        \n                    \n\n\n            \n                \n                        Static factory method to create a TaskResponseDto from a Task entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Task entity from which to create the DTO.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TaskResponseDto\n\n                        \n                            \n                                A new instance of TaskResponseDto.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, plainToInstance, Transform } from 'class-transformer';\nimport { Task } from '../entities/task.entity';\nimport { TaskStatus } from '../taskStatus';\nimport { format } from 'date-fns';\n\n/**\n * DTO for Task Response.\n */\nexport class TaskResponseDto {\n  /**\n   * Unique identifier of the task.\n   */\n  private id: string;\n\n  /**\n   * Title of the task.\n   */\n  private title: string;\n\n  /**\n   * Description of the task.\n   */\n  private description: string;\n\n  /**\n   * Current status of the task.\n   */\n  private status: TaskStatus;\n\n  /**\n   * The date when the task was created.\n   */\n  private creationDate: string;\n\n  /**\n   * Unique identifier of the user associated with the task.\n   */\n  private user_id: string;\n\n  /**\n   * Constructs a TaskResponseDto object with the provided parameters.\n   *\n   * @param {string} id - The unique identifier of the task.\n   * @param {string} title - The title of the task.\n   * @param {string} description - The description of the task.\n   * @param {TaskStatus} status - The current status of the task (enum TaskStatus).\n   * @param {string} user_id - The unique identifier of the user associated with the task.\n   */\n  constructor(\n    id: string,\n    title: string,\n    description: string,\n    status: TaskStatus,\n    user_id: string,\n    creationDate: Date,\n  ) {\n    this.id = id;\n    this.title = title;\n    this.description = description;\n    this.status = status;\n    this.user_id = user_id;\n    this.creationDate = creationDate.toLocaleDateString('es-Es', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    });\n  }\n\n  /**\n   * Static factory method to create a TaskResponseDto from a Task entity.\n   *\n   * @param {Task} task - The Task entity from which to create the DTO.\n   * @returns A new instance of TaskResponseDto.\n   */\n  public static of(task: Task): TaskResponseDto {\n    return new TaskResponseDto(\n      task.id,\n      task.title,\n      task.description,\n      task.status,\n      task.user.id,\n      task.creationDate,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that handles business logic related to tasks.\nIt interacts with the Task repository for data operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllByUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Creates a new task and saves it in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing task creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks from the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of tasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \nfindAllByUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks associated with a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose tasks are to be retrieved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of tasks associated with the user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Retrieves a single task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The found task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Deletes a task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the task is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Updates an existing task with new data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the updated task details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: UpdateTaskStatusDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Updates the status of a specific task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the new status of the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Task } from './entities/task.entity';\nimport { User } from 'src/user/entities/user.entity';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\n\n/**\n * Service that handles business logic related to tasks.\n * It interacts with the Task repository for data operations.\n */\n@Injectable()\nexport class TaskService {\n  constructor(\n    @InjectRepository(Task) private readonly taskRepository: Repository,\n    @InjectRepository(User) private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new task and saves it in the database.\n   *\n   * @param {CreateTaskDto} createTaskDto - DTO containing task creation details.\n   * @returns {Task} The created task.\n   */\n  async create(createTaskDto: CreateTaskDto) {\n    return this.taskRepository.save(\n      new Task(\n        createTaskDto.title,\n        createTaskDto.description,\n        await this.userRepository\n          .createQueryBuilder('user')\n          .where('user.id = :id', { id: createTaskDto.user_id })\n          .getOne(),\n      ),\n    );\n  }\n\n  /**\n   * Retrieves all tasks from the database.\n   *\n   * @returns {Promise}  A promise that resolves to an array of tasks.\n   */\n  findAll(): Promise {\n    return this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .getMany();\n  }\n\n  /**\n   * Retrieves all tasks associated with a specific user.\n   *\n   * @param {string} id - The ID of the user whose tasks are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of tasks associated with the user.\n   */\n  findAllByUser(id: string): Promise {\n    return this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('user.id = :id', { id })\n      .getMany();\n    //return this.taskRepository.find({ where: { user: { id: id } } });\n    // return this.taskRepository.find({\n    //   where: {\n    //     user.id: id\n    //   },\n    // });\n  }\n\n  /**\n   * Retrieves a single task by its ID.\n   *\n   * @param {string} id - The ID of the task to retrieve.\n   * @returns {Task} The found task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async findOne(id: string) {\n    let task = await this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('task.id = :id', { id: id })\n      .getOne();\n    console.log(task);\n    if (task !== null) {\n      return task;\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Updates an existing task with new data.\n   *\n   * @param {string} id - The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto - DTO containing the updated task details.\n   * @returns {Task} The updated task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async update(id: string, updateTaskDto: UpdateTaskDto) {\n    let task = await this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('task.id = :id', { id: id })\n      .getOne();\n\n    if (task !== null) {\n      for (const [key, value] of Object.entries(updateTaskDto)) {\n        if (value !== undefined) {\n          task[key] = value;\n        }\n      }\n\n      return this.taskRepository.save(task);\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Updates the status of a specific task.\n   *\n   * @param {string} id - The ID of the task to update.\n   * @param {UpdateTaskStatusDto} status - DTO containing the new status of the task.\n   * @returns {Promise} The updated task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async updateStatus(id: string, status: UpdateTaskStatusDto) {\n    let task = await this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('task.id = :id', { id: id })\n      .getOne();\n\n    if (task !== null) {\n      task.status = status.status;\n\n      return this.taskRepository.save(task);\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Deletes a task by its ID.\n   *\n   * @param {String} id - The ID of the task to delete.\n   * @returns A promise that resolves when the task is deleted.\n   */\n  remove(id: string) {\n    return this.taskRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/update-task.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing task.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateTaskDto, ['user_id'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskDto } from './create-task.dto';\n\n/**\n * DTO for updating an existing task.\n */\nexport class UpdateTaskDto extends PartialType(\n  OmitType(CreateTaskDto, ['user_id'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskStatusDto.html":{"url":"classes/UpdateTaskStatusDto.html","title":"class - UpdateTaskStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/update-task-status.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating the status of a task.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(TaskStatus, {message: 'Status must be part of TaskStatus.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/update-task-status.dto.ts:14\n                        \n                    \n\n            \n                \n                    The status of the task.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { TaskStatus } from '../taskStatus';\n\n/**\n * DTO for updating the status of a task.\n */\nexport class UpdateTaskStatusDto {\n  /**\n   * The status of the task.\n   */\n  @IsEnum(TaskStatus, {\n    message: 'Status must be part of TaskStatus.',\n  })\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing user.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an existing user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                _email\n                            \n                            \n                                    \n                                    Private\n                                _id\n                            \n                            \n                                    \n                                    Private\n                                _name\n                            \n                            \n                                    \n                                    Private\n                                _password\n                            \n                            \n                                    \n                                    Private\n                                _tasks\n                            \n                            \n                                    \n                                    Private\n                                _username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, name: 'email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:61\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid', {name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for each User, generated as a UUID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, name: 'name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 15, name: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    The password of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, task => task.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:73\n                        \n                    \n\n            \n                \n                    The list of tasks associated with the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, name: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    The username of the user.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Task } from 'src/task/entities/task.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * User entity\n */\n@Entity()\nexport class User {\n  /**\n   * Unique identifier for each User, generated as a UUID.\n   */\n  @PrimaryGeneratedColumn('uuid', { name: 'id' })\n  private _id: string;\n  public get id(): string {\n    return this._id;\n  }\n  public set id(value: string) {\n    this._id = value;\n  }\n\n  /**\n   * The name of the user.\n   */\n  @Column({ type: 'varchar', length: 30, name: 'name' })\n  private _name: string;\n  public get name(): string {\n    return this._name;\n  }\n  public set name(value: string) {\n    this._name = value;\n  }\n\n  /**\n   * The username of the user.\n   */\n  @Column({ type: 'varchar', length: 30 , name: 'username'})\n  private _username: string;\n  public get username(): string {\n    return this._username;\n  }\n  public set username(value: string) {\n    this._username = value;\n  }\n\n  /**\n   * The password of the user.\n   */\n  @Column({ type: 'varchar', length: 15, name: 'password' })\n  private _password: string;\n  public get password(): string {\n    return this._password;\n  }\n  public set password(value: string) {\n    this._password = value;\n  }\n\n  /**\n   * The email of the user.\n   */\n  @Column({ type: 'varchar', length: 30, name: 'email' })\n  private _email: string;\n  public get email(): string {\n    return this._email;\n  }\n  public set email(value: string) {\n    this._email = value;\n  }\n\n  /**\n   * The list of tasks associated with the user.\n   */\n  @OneToMany(() => Task, (task: Task) => task.user)\n  private _tasks: Task[];\n  public get tasks(): Task[] {\n    return this._tasks;\n  }\n  public set tasks(value: Task[]) {\n    this._tasks = value;\n  }\n\n  /**\n   * Constructor to initialize a new User instance.\n   *\n   * @param {string} name - The name of the user.\n   * @param {string} username - The username of the user.\n   * @param {string} password - The password of the user.\n   * @param {string} email - The email of the user.\n   */\n  constructor(name: string, username: string, password: string, email: string) {\n    this._name = name;\n    this._username = username;\n    this._password = password;\n    this._email = email;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling user-related requests.\nDefines the routes and methods for CRUD operations on users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                signIn\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the user creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created user, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of all users.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all users, each formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user with the specified ID, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty response, indicating the user was successfully deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        Updates an existing user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the updated user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated user, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Request,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserResponse } from './dto/user-response.dto';\nimport { User } from './entities/user.entity';\nimport { SignInDto } from './dto/signin-dto';\nimport { AuthGuard, Public } from './auth.guard';\n\n/**\n * Controller for handling user-related requests.\n * Defines the routes and methods for CRUD operations on users.\n */\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * Creates a new user.\n   *\n   * @param {CreateUserDto} createUserDto - DTO containing the user creation details.\n   * @returns {Promise} The newly created user, formatted as a UserResponse.\n   */\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto): Promise {\n    return UserResponse.of(await this.userService.create(createUserDto));\n  }\n\n  /**\n   * Retrieves a list of all users.\n   *\n   * @returns {Promise} An array of all users, each formatted as a UserResponse.\n   */\n  @Get()\n  async findAll() {\n    const users: User[] = await this.userService.findAll();\n    return users.map((user) => UserResponse.of(user));\n  }\n\n  /**\n   * Retrieves a single user by ID.\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Promise} The user with the specified ID, formatted as a UserResponse.\n   */\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return UserResponse.of(await this.userService.findOne(id));\n  }\n\n  /**\n   * Updates an existing user by ID.\n   *\n   * @param {string} id - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - DTO containing the updated user details.\n   * @returns {Promise} The updated user, formatted as a UserResponse.\n   */\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return UserResponse.of(await this.userService.update(id, updateUserDto));\n  }\n\n  /**\n   * Deletes a user by ID.\n   *\n   * @param {string} id - The ID of the user to delete.\n   * @returns An empty response, indicating the user was successfully deleted.\n   */\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: SignInDto) {\n    return this.userService.signIn(signInDto);\n  }\n\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './cosntants';\nimport { AuthGuard } from './auth.guard';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n  ],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponse.html":{"url":"classes/UserResponse.html","title":"class - UserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for User Response.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                email\n                            \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                name\n                            \n                            \n                                    Private\n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, name: string, username: string, email: string)\n                    \n                \n                        \n                            \n                                Defined in src/user/dto/user-response.dto.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserResponse.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe username of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe email of the user.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:10\n                        \n                    \n\n            \n                \n                    The unique identifier of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:20\n                        \n                    \n\n            \n                \n                    The username of the user.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        of\n                        \n                    \n                \n            \n            \n                \n                        \n                    of(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/dto/user-response.dto.ts:48\n                        \n                    \n\n\n            \n                \n                        Creates a UserResponse object from a User entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity from which to create the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserResponse\n\n                        \n                            \n                                \nA new instance of UserResponse populated with user data.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for User Response.\n */\nexport class UserResponse {\n  /**\n   * The unique identifier of the user.\n   */\n  private id: string;\n\n  /**\n   * The name of the user.\n   */\n  private name: string;\n\n  /**\n   * The username of the user.\n   */\n  private username: string;\n\n  /**\n   * The email of the user.\n   */\n  private email: string;\n\n  /**\n   * Creates an instance of UserResponse.\n   *\n   * @param {string} id - The unique identifier of the user.\n   * @param {string} name - The name of the user.\n   * @param {string} username - The username of the user.\n   * @param {string} email - The email of the user.\n   */\n  constructor(id: string, name: string, username: string, email: string) {\n    this.id = id;\n    this.name = name;\n    this.username = username;\n    this.email = email;\n  }\n\n  /**\n   * Creates a UserResponse object from a User entity.\n   *\n   * @param {User} user - The user entity from which to create the response.\n   * @returns {UserResponse} - A new instance of UserResponse populated with user data.\n   */\n  public static of(user: User): UserResponse {\n    return new UserResponse(user.id, user.name, user.username, user.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The UserService handles all operations related to users,\nincluding creating, finding, updating, and deleting user records.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new user record in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO containing the details for the new user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The newly created User entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Retrieves all users from the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of User entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the User entity if found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Deletes a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(singInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                singInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Updates an existing user record.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the updated user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the updated User entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { SignInDto } from './dto/signin-dto';\nimport { JwtService } from '@nestjs/jwt';\n\n/**\n * The UserService handles all operations related to users,\n * including creating, finding, updating, and deleting user records.\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Creates a new user record in the database.\n   *\n   * @param {CreateUserDto} createUserDto - The DTO containing the details for the new user.\n   * @returns {Promise} The newly created User entity.\n   */\n  create(createUserDto: CreateUserDto) {\n    return this.userRepository.save(\n      new User(\n        createUserDto.name,\n        createUserDto.username,\n        createUserDto.password,\n        createUserDto.email,\n      ),\n    );\n  }\n\n  /**\n   * Retrieves all users from the database.\n   *\n   * @returns {Promise} A promise that resolves to an array of User entities.\n   */\n  findAll(): Promise {\n    return this.userRepository.find();\n  }\n\n  /**\n   * Retrieves a single user by their ID.\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Promise} A promise that resolves to the User entity if found.\n   * @throws {NotFoundException} NotFoundException if no user is found with the given ID.\n   */\n  async findOne(id: string): Promise {\n    let user = await this.userRepository\n      .createQueryBuilder('user')\n      .where('user.id = :id', { id: id })\n      .getOne();\n    if (user !== null) {\n      return user;\n    } else {\n      throw new NotFoundException('No user was found');\n    }\n  }\n\n  /**\n   * Updates an existing user record.\n   *\n   * @param {string} id - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - The data transfer object containing the updated user details.\n   * @returns {Promise} A promise that resolves to the updated User entity.\n   * @throws {NotFoundException} NotFoundException if no user is found with the given ID.\n   */\n  async update(id: string, updateUserDto: UpdateUserDto): Promise {\n    let user = await this.userRepository\n      .createQueryBuilder('user')\n      .where('user.id = :id', { id: id })\n      .getOne();\n\n    if (user !== null) {\n      for (const [key, value] of Object.entries(updateUserDto)) {\n        if (value !== undefined) {\n          user[key] = value;\n        }\n      }\n\n      return this.userRepository.save(user);\n    } else {\n      throw new NotFoundException('No user was found');\n    }\n  }\n\n  /**\n   * Deletes a user by their ID.\n   *\n   * @param {string} id - The ID of the user to delete.\n   * @returns A promise that resolves to the result of the delete operation.\n   */\n  remove(id: string) {\n    // return this.userRepository\n    //   .createQueryBuilder('user')\n    //   .delete()\n    //   .where('user.id = :id', { id: id })\n    //   .execute();\n    return this.userRepository.delete(id);\n  }\n\n  async signIn(singInDto: SignInDto): Promise {\n    const user = await this.userRepository\n      .createQueryBuilder('user')\n      .where('user.username = :username', { username: singInDto.username })\n      .getOne();\n    if (user?.password !== singInDto.password) {\n      throw new UnauthorizedException();\n    }\n    const payload = { sub: user.id, username: user.username };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/task/dto/task-response.dto.ts\n            \n            class\n            TaskResponseDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/task/dto/update-task-status.dto.ts\n            \n            class\n            UpdateTaskStatusDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/task/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/task/entities/task.entity.ts\n            \n            entity\n            Task\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/user/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/auth.guard.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/auth.guard.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/cosntants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            variable\n            passwordRegEx\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/signin-dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/dto/user-response.dto.ts\n            \n            class\n            UserResponse\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/validation/unique/is-unique-constraint.ts\n            \n            injectable\n            IsUniqueConstraint\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/validation/unique/is-unique-decorator.ts\n            \n            function\n            IsUnique\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^3.6.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../taskStatus.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/task/taskStatus.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                    \n                        \n                            Enum representing the various statuses of a task.\n\n                        \n                    \n                        \n                            \n                                 TO_DO\n                            \n                        \n                        \n                            \n                                Value : TO-DO\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsUnique   (src/.../is-unique-decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/validation/unique/is-unique-decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUnique\n                        \n                    \n                \n            \n            \n                \nIsUnique(options: IsUniqeInterface, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            IsUniqeInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nIsUniqueConstraint\n\nIsUniqueConstraint\n\nAppModule -->\n\nIsUniqueConstraint->AppModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IsUniqeInterface   (src/.../is-unique-decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/validation/unique/is-unique-decorator.ts\n    \n    \n        \n            \n                \n                    \n                    IsUniqeInterface\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../auth.guard.ts)\n                        \n                        \n                            jwtConstants   (src/.../cosntants.ts)\n                        \n                        \n                            passwordRegEx   (src/.../create-user.dto.ts)\n                        \n                        \n                            Public   (src/.../auth.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/user/cosntants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: '$ecret',\n}\n                    \n                \n\n\n        \n    \n\n    src/user/dto/create-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        passwordRegEx\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
