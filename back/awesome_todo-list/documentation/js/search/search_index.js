var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.45,1,1.985]],["body/controllers/AppController.html",[0,2.393,1,3.275,2,1.969,3,0.612,4,0.541,5,0.541,6,3.529,7,0.612,8,1.985,9,4.807,10,1.791,11,0.035,12,1.033,13,4.255,14,1.633,15,1.378,16,0.744,17,1.362,18,2.844,19,3.529,20,0.612,21,0.073,22,2.694,23,2.172,24,1.362,25,4.255,26,0.029,27,0.029]],["title/modules/AppModule.html",[28,1.45,29,1.985]],["body/modules/AppModule.html",[1,3.135,2,2.037,3,0.475,4,0.42,5,0.42,11,0.036,16,0.853,17,1.058,18,2.886,19,2.741,20,0.475,21,0.057,26,0.025,27,0.025,28,2.291,29,3.854,30,1.687,31,1.687,32,2.093,33,2.093,34,1.687,35,3.135,36,2.093,37,2.741,38,2.741,39,2.741,40,3.202,41,3.202,42,3.202,43,2.788,44,2.093,45,2.093,46,3.305,47,3.157,48,3.305,49,2.37,50,1.687,51,3.305,52,0.878,53,3.305,54,3.305,55,1.173,56,3.305,57,3.305,58,1.158,59,3.305,60,3.305,61,0.659,62,4.402,63,3.305,64,3.305,65,3.305,66,3.305,67,2.37,68,3.305,69,2.093,70,1.871,71,2.37,72,3.305,73,2.37,74,3.305,75,3.157,76,3.305]],["title/injectables/AppService.html",[18,1.6,77,1.203]],["body/injectables/AppService.html",[3,0.633,4,0.56,5,0.56,7,0.633,8,2.027,9,4.863,11,0.035,12,1.069,14,1.691,15,1.407,16,0.633,17,1.41,18,2.696,20,0.633,21,0.075,24,1.41,26,0.03,27,0.03,77,2.027,78,2.494,79,3.653,80,4.404,81,4.404,82,4.404]],["title/classes/CreateTaskDto.html",[21,0.054,83,1.6]],["body/classes/CreateTaskDto.html",[3,0.413,4,0.365,5,0.365,7,0.413,10,1.937,11,0.036,12,1.117,15,1.445,16,0.413,20,0.413,21,0.068,26,0.022,27,0.022,52,0.993,55,1.555,61,0.918,83,2.042,84,1.208,85,4.129,86,2.059,87,1.311,88,1.593,89,3.152,90,1.28,91,3.999,92,2.042,93,3.999,94,3.999,95,3.999,96,3.999,97,3.999,98,3.999,99,1.535,100,4.132,101,3.301,102,2.87,103,4.184,104,4.129,105,4.129,106,3.317,107,4.496,108,2.87,109,2.87,110,2.87,111,2.87,112,3.999,113,1.911,114,3.999,115,2.868,116,2.87,117,2.87,118,3.999,119,4.129,120,2.381,121,2.381,122,4.129,123,2.381,124,2.868,125,1.625,126,2.87,127,3.317,128,2.87,129,2.381,130,1.465,131,2.381,132,2.042,133,2.87,134,2.87]],["title/classes/CreateUserDto.html",[21,0.054,135,1.6]],["body/classes/CreateUserDto.html",[3,0.307,4,0.271,5,0.271,7,0.307,10,1.823,11,0.036,12,1.051,15,1.393,16,0.464,20,0.307,21,0.074,26,0.018,27,0.018,52,0.976,58,1.362,61,0.864,67,3.973,69,3.596,84,0.899,87,0.471,88,1.032,89,2.043,90,1.386,92,1.647,99,1.238,103,4.236,105,3.593,106,1.771,107,3.857,119,2.676,120,1.771,121,1.771,122,3.857,125,1.209,127,4.336,135,1.647,136,3.335,137,1.352,138,3.226,139,3.224,140,3.226,141,1.493,142,3.837,143,1.941,144,3.887,145,2.135,146,2.676,147,3.226,148,3.226,149,2.135,150,5.227,151,3.226,152,2.135,153,4.331,154,2.313,155,3.226,156,3.593,157,2.135,158,3.226,159,2.135,160,4.331,161,5.83,162,3.593,163,4.331,164,4.331,165,4.331,166,5.227,167,4.331,168,4.331,169,4.331,170,4.331,171,4.331,172,4.331,173,4.331,174,2.135,175,2.135,176,2.676,177,2.135,178,2.676,179,3.226,180,3.226,181,2.676,182,2.135,183,2.043,184,2.676,185,2.135,186,2.135,187,3.226,188,2.135,189,2.313,190,1.209,191,1.771,192,0.988,193,1.531,194,1.531,195,1.771,196,1.771,197,1.771,198,1.771,199,2.135,200,3.226,201,2.135,202,2.135,203,2.135,204,1.771,205,2.135]],["title/injectables/IsUniqueConstraint.html",[42,1.775,77,1.203]],["body/injectables/IsUniqueConstraint.html",[3,0.461,4,0.407,5,0.407,7,0.461,8,1.655,11,0.036,12,1.183,14,1.655,15,1.299,16,0.75,17,1.026,20,0.461,21,0.074,22,2.029,23,1.636,24,1.38,26,0.024,27,0.024,42,2.76,58,1.907,61,0.973,75,2.298,77,1.655,78,1.815,125,1.815,139,3.577,143,1.827,183,2.731,190,2.952,191,2.658,192,2.255,204,2.658,206,2.658,207,4.312,208,2.952,209,1.636,210,3.205,211,5.604,212,3.205,213,2.052,214,2.052,215,4.312,216,5.822,217,3.205,218,3.577,219,4.312,220,4.874,221,3.205,222,1.996,223,2.442,224,4.312,225,4.312,226,1.636,227,3.093,228,3.205,229,3.205,230,4.312,231,1.815,232,3.205,233,3.205,234,3.205,235,3.205,236,4.312,237,3.205,238,3.205,239,3.205]],["title/entities/Task.html",[55,0.835,240,1.319]],["body/entities/Task.html",[3,0.303,4,0.268,5,0.268,7,0.303,10,2.049,11,0.036,12,1.181,15,1.525,16,0.555,20,0.303,21,0.036,24,1.48,26,0.018,27,0.018,52,1.183,55,1.588,58,1.12,61,1.085,70,1.194,75,2.292,87,1.175,90,1.023,99,1.227,100,3.626,104,2.651,113,1.481,115,2.292,124,2.292,130,1.97,132,2.659,141,1.479,183,2.929,222,2.14,226,1.077,240,1.812,241,1.75,242,2.947,243,3.858,244,3.858,245,3.858,246,3.858,247,3.858,248,3.626,249,3.57,250,3.196,251,2.109,252,3.57,253,2.109,254,3.087,255,2.651,256,1.513,257,2.109,258,2.109,259,2.109,260,3.196,261,3.858,262,2.109,263,2.438,264,2.651,265,2.109,266,1.81,267,2.292,268,2.651,269,1.513,270,3.858,271,1.75,272,3.442,273,3.196,274,3.837,275,2.109,276,3.196,277,2.109,278,3.196,279,3.196,280,2.109,281,1.75,282,3.196,283,2.109,284,2.109,285,2.109,286,2.109,287,2.109,288,2.109,289,2.109,290,3.196,291,2.109,292,1.75,293,1.336,294,1.513,295,1.624,296,2.109,297,1.75,298,1.75,299,1.75,300,2.109,301,1.75]],["title/controllers/TaskController.html",[0,1.45,302,1.985]],["body/controllers/TaskController.html",[0,1.493,2,0.738,3,0.229,4,0.203,5,0.203,7,0.229,8,1.419,10,1.917,11,0.036,12,1.105,14,2.068,15,1.519,16,0.655,17,0.511,20,0.229,21,0.027,22,1.011,23,0.815,24,1.458,26,0.014,27,0.014,52,0.864,55,1.626,61,0.864,83,2.418,87,1.004,88,1.386,89,1.627,90,1.607,92,2.211,113,2.298,130,2.619,141,1.189,143,1.518,192,1.189,208,3.179,213,1.823,214,1.823,223,1.455,231,1.455,263,1.455,295,2.059,302,1.627,303,1.324,304,1.324,305,2.131,306,1.627,307,2.131,308,2.131,309,2.131,310,2.131,311,1.627,312,3.863,313,1.082,314,2.341,315,2.131,316,1.627,317,1.627,318,2.743,319,2.675,320,1.324,321,2.675,322,1.596,323,1.455,324,2.743,325,3.106,326,5.227,327,3.583,328,1.596,329,2.743,330,2.341,331,1.324,332,2.569,333,1.596,334,3.067,335,2.341,336,3.067,337,1.011,338,2.131,339,1.596,340,1.011,341,2.131,342,1.596,343,1.627,344,2.042,345,2.131,346,2.569,347,2.569,348,2.131,349,1.011,350,2.842,351,2.131,352,1.596,353,2.341,354,2.743,355,1.324,356,2.295,357,2.569,358,1.596,359,2.675,360,1.324,361,1.647,362,1.324,363,1.011,364,1.843,365,1.627,366,1.596,367,1.324,368,1.011,369,1.324,370,1.596,371,1.324,372,3.697,373,1.596,374,1.596,375,2.569,376,2.569,377,1.596,378,1.596,379,1.324,380,1.596,381,1.324,382,1.596,383,1.596,384,1.596,385,1.324,386,1.596]],["title/modules/TaskModule.html",[28,1.45,40,1.775]],["body/modules/TaskModule.html",[2,2.273,3,0.563,4,0.498,5,0.498,11,0.036,16,0.851,17,1.253,20,0.563,21,0.067,26,0.028,27,0.028,28,2.484,30,1.999,31,1.999,32,2.48,33,2.48,34,1.999,35,3.4,36,2.48,40,3.351,43,3.111,44,2.48,45,2.48,47,2.808,49,2.808,50,1.999,52,0.98,55,1.044,269,2.808,302,3.4,361,3.021,362,3.248,368,2.48,387,3.248,388,3.248,389,3.916,390,3.916,391,3.916]],["title/classes/TaskResponseDto.html",[21,0.054,327,1.985]],["body/classes/TaskResponseDto.html",[3,0.287,4,0.254,5,0.254,7,0.287,8,1.176,11,0.036,12,1.242,14,1.176,15,1.614,16,0.602,20,0.287,21,0.052,24,0.639,26,0.017,27,0.017,52,0.835,55,1.648,58,1.794,61,1.021,84,0.84,87,1.26,88,1.339,90,1.194,99,1.176,100,3.966,101,3.67,113,1.904,130,2.823,132,2.735,141,1.418,143,1.074,154,3.237,162,3.743,178,1.656,181,1.656,209,1.564,213,1.761,214,1.29,240,1.761,242,2.983,248,3.416,254,2.197,263,2.369,266,2.898,272,1.264,281,3.951,292,2.542,293,1.94,295,2.005,297,1.656,298,1.656,299,1.656,301,1.656,313,1.761,327,3.451,368,1.264,392,4.353,393,1.432,394,2.197,395,3.743,396,1.656,397,3.064,398,2.197,399,3.064,400,4.183,401,1.996,402,1.996,403,1.996,404,1.996,405,1.996,406,3.064,407,1.996,408,3.064,409,3.064,410,1.996,411,1.996,412,1.996,413,1.656,414,1.996,415,1.656,416,1.656,417,1.996,418,1.996,419,1.996,420,1.996,421,1.996,422,1.996,423,1.996,424,1.996,425,1.996,426,1.996,427,1.996,428,1.656,429,1.996,430,1.996]],["title/injectables/TaskService.html",[77,1.203,361,1.6]],["body/injectables/TaskService.html",[3,0.206,4,0.182,5,0.182,7,0.206,8,0.904,11,0.036,12,1.104,14,2.013,15,1.489,16,0.677,17,0.459,20,0.206,21,0.025,23,1.203,24,1.507,26,0.013,27,0.013,50,0.732,52,0.94,55,1.649,61,0.869,71,2.489,77,0.904,78,0.812,83,2.223,87,0.96,88,1.319,90,1.552,92,1.772,113,2.3,130,2.321,132,1.203,141,1.09,143,1.526,192,0.664,208,2.872,209,1.203,213,1.833,214,1.833,222,1.387,223,2.924,226,0.732,231,1.966,242,1.203,256,1.029,263,1.966,269,1.029,294,2.15,295,1.914,306,1.492,311,1.492,312,3.637,313,0.992,314,2.198,315,1.954,316,1.492,317,1.492,318,2.61,319,1.954,320,1.954,323,1.334,324,2.61,325,2.489,329,2.61,330,2.198,331,1.954,334,2.879,335,1.492,337,1.492,340,1.492,343,1.492,344,1.492,349,1.492,350,2.667,353,2.198,354,2.61,355,1.954,356,2.171,361,1.203,363,0.908,364,1.69,365,1.492,368,0.908,369,1.19,428,1.19,431,1.19,432,2.356,433,1.954,434,2.356,435,2.356,436,2.356,437,3.377,438,1.434,439,2.487,440,1.434,441,2.356,442,1.434,443,2.356,444,1.954,445,2.489,446,1.434,447,3.419,448,1.434,449,2.356,450,2.356,451,1.434,452,1.69,453,3.772,454,1.434,455,1.954,456,1.434,457,1.334,458,1.434,459,3.612,460,1.19,461,1.434,462,1.19,463,1.434,464,1.434,465,1.434,466,1.19,467,1.434,468,2.998,469,1.434,470,1.434,471,1.434,472,1.434,473,1.434,474,1.434,475,2.487,476,2.998,477,1.434,478,2.487,479,2.487,480,2.487,481,1.19,482,1.434,483,1.434,484,2.356,485,1.434,486,1.434]],["title/classes/UpdateTaskDto.html",[21,0.054,350,1.775]],["body/classes/UpdateTaskDto.html",[3,0.608,4,0.537,5,0.537,11,0.035,16,0.741,20,0.608,21,0.072,26,0.029,27,0.029,55,1.373,83,2.159,84,1.78,86,3.033,87,0.932,88,1.649,101,3.695,192,2.384,313,1.78,350,2.917,364,3.033,457,2.917,487,3.033,488,3.262,489,4.273,490,4.609,491,5.152,492,4.229,493,3.033,494,3.033]],["title/classes/UpdateTaskStatusDto.html",[21,0.054,356,1.775]],["body/classes/UpdateTaskStatusDto.html",[3,0.568,4,0.502,5,0.502,7,0.568,10,1.663,11,0.036,12,0.959,16,0.71,20,0.568,21,0.085,26,0.028,27,0.028,55,1.581,61,0.788,84,1.663,87,0.871,88,1.581,99,1.896,103,3.542,123,3.276,125,2.237,129,4.097,130,3.132,131,4.097,132,3.027,356,2.797,487,3.542,488,3.128,495,3.276,496,3.949]],["title/classes/UpdateUserDto.html",[21,0.054,497,1.775]],["body/classes/UpdateUserDto.html",[3,0.625,4,0.553,5,0.553,11,0.035,16,0.754,20,0.625,21,0.074,26,0.029,27,0.029,52,1.046,84,1.831,87,0.959,88,1.677,135,2.22,137,2.754,313,1.831,457,2.967,488,3.318,489,4.346,490,3.607,493,3.119,494,3.119,497,2.967,498,3.607,499,5.24,500,3.119]],["title/entities/User.html",[52,0.625,240,1.319]],["body/entities/User.html",[3,0.311,4,0.275,5,0.275,7,0.311,10,2.068,11,0.036,12,1.192,15,1.628,16,0.468,20,0.311,21,0.037,24,1.497,26,0.018,27,0.018,52,1.198,55,1.431,58,1.141,61,1.092,67,3.657,69,3.229,70,1.224,73,2.335,87,0.477,90,0.692,99,1.25,113,1.503,115,2.335,124,3.763,142,3.657,143,1.722,156,4.076,183,2.961,184,3.249,209,1.104,222,2.164,226,1.104,240,1.835,242,2.96,249,3.616,252,4.353,263,1.844,264,2.701,266,1.844,267,2.335,268,2.701,271,1.794,272,3.464,274,3.878,293,1.369,295,1.835,312,2.809,501,1.794,502,3.917,503,3.917,504,3.917,505,3.917,506,2.162,507,2.162,508,3.256,509,2.162,510,2.162,511,3.256,512,2.162,513,2.162,514,2.162,515,2.162,516,3.256,517,3.917,518,2.162,519,3.917,520,2.162,521,3.917,522,2.162,523,3.917,524,2.162,525,3.256,526,2.162,527,2.162,528,2.162]],["title/controllers/UserController.html",[0,1.45,529,1.985]],["body/controllers/UserController.html",[0,1.712,2,0.912,3,0.283,4,0.25,5,0.25,7,0.283,8,1.595,10,1.889,11,0.036,12,1.089,14,2.049,15,1.47,16,0.681,17,0.631,20,0.283,21,0.034,22,1.248,23,1.006,24,1.436,26,0.017,27,0.017,52,1.223,61,0.829,73,2.176,87,0.989,88,1.33,90,0.971,113,2.296,135,2.602,141,1.404,143,1.456,192,0.912,208,3.122,213,1.749,214,1.749,223,2.683,231,1.116,267,2.176,295,1.995,304,1.634,305,2.516,306,1.921,307,2.516,308,2.516,309,2.516,310,2.516,311,1.921,313,1.277,314,2.631,316,1.921,317,1.921,318,2.631,321,3.068,323,1.718,324,2.631,325,2.653,329,2.631,330,1.921,335,1.921,336,2.516,337,1.248,338,2.516,340,1.248,341,2.516,343,1.921,344,2.343,345,2.516,349,1.248,351,2.516,353,1.921,354,2.631,359,2.516,360,1.634,363,1.248,365,1.248,367,1.634,371,1.634,379,1.634,381,1.634,385,1.634,394,2.176,444,2.516,445,2.98,452,2.176,455,2.516,457,1.718,497,3.023,500,2.176,529,1.921,530,1.634,531,4.095,532,1.634,533,1.97,534,2.516,535,5.097,536,3.311,537,1.97,538,1.97,539,1.97,540,3.034,541,3.034,542,1.97,543,1.889,544,1.634,545,1.97,546,1.248,547,1.97,548,3.699,549,1.97,550,1.97,551,1.97,552,1.97,553,1.97,554,1.97,555,1.97]],["title/modules/UserModule.html",[28,1.45,41,1.775]],["body/modules/UserModule.html",[2,2.298,3,0.573,4,0.506,5,0.506,11,0.035,16,0.838,17,1.275,20,0.573,21,0.068,26,0.028,27,0.028,28,2.504,30,2.034,31,2.034,32,2.523,33,2.523,34,2.034,35,3.426,36,2.523,41,3.365,43,3.145,44,2.523,45,2.523,47,2.857,49,2.857,50,2.034,52,0.795,529,3.426,543,3.034,544,3.304,546,2.523,556,3.304,557,3.304,558,3.984,559,3.984,560,3.984]],["title/classes/UserResponse.html",[21,0.054,536,1.985]],["body/classes/UserResponse.html",[3,0.356,4,0.315,5,0.315,7,0.356,8,1.382,11,0.036,12,1.253,14,1.382,15,1.643,16,0.356,20,0.356,21,0.042,24,0.793,26,0.02,27,0.02,52,1.248,58,1.632,61,1.03,69,3.666,84,1.043,87,0.935,88,1.153,90,1.358,92,1.839,99,1.382,113,1.982,142,4.152,143,2.065,209,1.265,213,1.516,214,1.516,240,1.961,242,2.956,266,2.638,272,1.569,293,2.95,295,2.083,313,1.516,323,2.638,393,1.777,394,3.34,395,3.519,396,2.987,398,2.583,416,2.055,536,3.626,546,1.569,561,4.419,562,3.601,563,2.478,564,2.478,565,2.478,566,3.601,567,2.478,568,3.601,569,2.478,570,2.478,571,2.478,572,2.478,573,2.478,574,2.478,575,2.478]],["title/injectables/UserService.html",[77,1.203,543,1.6]],["body/injectables/UserService.html",[3,0.264,4,0.234,5,0.234,7,0.264,8,1.104,11,0.036,12,1.118,14,2.01,15,1.445,16,0.662,17,0.589,20,0.264,21,0.031,23,0.939,24,1.391,26,0.016,27,0.016,50,0.939,52,1.234,61,0.867,70,1.628,71,2.871,77,1.104,78,1.041,87,0.958,88,0.92,89,1.821,90,1.541,92,1.468,113,2.24,135,2.457,141,1.331,143,1.523,192,0.851,208,2.609,209,1.468,213,1.829,214,1.829,222,1.638,223,3.264,226,0.939,231,1.628,240,1.939,242,0.939,256,1.319,294,2.062,295,1.829,306,1.821,311,1.821,313,1.21,314,2.536,316,1.821,317,1.821,318,2.536,323,1.628,324,2.536,329,2.536,330,1.821,335,1.821,337,1.821,340,1.821,343,1.821,344,2.536,348,2.385,349,1.821,353,1.821,354,2.536,363,1.164,365,1.164,398,2.062,433,2.385,437,2.871,439,2.385,445,2.871,447,4.132,452,2.062,453,3.821,457,1.628,459,3.604,460,1.525,462,1.525,466,2.385,475,2.385,478,2.385,479,2.385,480,2.385,481,1.525,488,1.821,497,2.9,500,2.062,531,3.321,532,2.385,534,2.385,543,2.044,546,1.164,576,1.525,577,2.875,578,2.875,579,2.875,580,2.875,581,1.839,582,1.839,583,1.839,584,4.004,585,1.839,586,1.839,587,1.839,588,2.875,589,1.839,590,2.875,591,1.839,592,1.839,593,1.839,594,1.839,595,1.839,596,1.839,597,1.839,598,1.839,599,1.839,600,1.839]],["title/coverage.html",[601,3.046]],["body/coverage.html",[0,2.299,1,2.108,5,0.423,6,2.761,11,0.035,18,1.699,21,0.099,26,0.025,27,0.025,34,1.699,42,1.885,52,0.664,55,1.179,58,1.55,61,0.664,77,2.032,79,2.761,83,1.699,85,2.761,86,3.172,90,1.065,135,1.699,136,3.172,137,3.146,189,2.387,190,2.505,193,2.387,194,4.063,206,2.761,240,1.862,241,2.761,266,1.885,302,2.108,303,2.761,327,2.108,350,1.885,356,1.885,361,1.699,392,2.761,393,3.172,431,2.761,487,3.172,495,2.761,497,1.885,498,2.761,501,2.761,529,2.108,530,2.761,536,2.108,543,1.699,561,2.761,576,2.761,601,2.387,602,3.329,603,3.329,604,4.423,605,2.761,606,4.423,607,4.968,608,6.051,609,3.329,610,3.329,611,3.329,612,5.294,613,3.329,614,3.329,615,3.329,616,3.329,617,3.329,618,3.329,619,3.329,620,3.329,621,3.329,622,3.329,623,2.387,624,3.329,625,3.329]],["title/dependencies.html",[31,1.92,626,2.183]],["body/dependencies.html",[11,0.036,17,1.375,21,0.089,26,0.029,27,0.029,31,2.192,50,2.192,125,2.432,226,2.192,248,3.08,413,3.562,415,3.562,493,3.08,494,3.08,627,5.594,628,4.295,629,4.295,630,4.295,631,4.295,632,4.295,633,4.295,634,4.295,635,4.295,636,4.295,637,4.295,638,4.295,639,4.295,640,4.295,641,4.295,642,4.295]],["title/miscellaneous/enumerations.html",[643,1.108,644,3.12]],["body/miscellaneous/enumerations.html",[7,0.659,11,0.034,26,0.03,27,0.03,55,1.221,132,2.759,222,2.661,254,3.285,643,1.928,644,3.799,645,4.58,646,4.58,647,4.58,648,4.58,649,4.58,650,4.58,651,5.405,652,5.405]],["title/miscellaneous/functions.html",[643,1.108,653,3.12]],["body/miscellaneous/functions.html",[7,0.644,11,0.032,26,0.03,27,0.03,34,2.907,58,1.868,61,0.893,143,1.569,189,3.823,190,2.535,213,1.884,214,1.884,218,3.713,227,3.823,605,3.713,623,3.823,643,1.884,653,3.713,654,4.476,655,3.713,656,4.476,657,5.894,658,4.476]],["title/index.html",[7,0.378,659,2.631,660,2.631]],["body/index.html",[4,0.47,11,0.035,26,0.027,27,0.027,87,0.814,146,3.065,437,2.65,601,2.65,661,3.695,662,3.695,663,4.735,664,3.695,665,3.695,666,3.695,667,3.695,668,3.695,669,3.695,670,5.226,671,3.695,672,3.695,673,3.695,674,5.226,675,5.927,676,3.695,677,3.695,678,3.695,679,5.829,680,3.695,681,3.695,682,4.735,683,3.695,684,3.695,685,3.695,686,3.695,687,4.735,688,4.735,689,3.695,690,3.695,691,3.695,692,4.735,693,4.735,694,3.695,695,3.695,696,3.695,697,3.695,698,3.695,699,3.065,700,3.695,701,3.695,702,3.695,703,3.695,704,3.695,705,3.695,706,3.695,707,3.695,708,3.695,709,3.065,710,3.695,711,3.695,712,3.695,713,3.695,714,3.695,715,3.695,716,3.065]],["title/modules.html",[30,2.169]],["body/modules.html",[11,0.031,26,0.031,27,0.031,29,2.97,30,2.394,40,2.656,41,2.656,699,4.816,717,5.806,718,5.806,719,5.806]],["title/overview.html",[720,3.523]],["body/overview.html",[2,1.849,11,0.034,18,2.766,26,0.028,27,0.028,28,1.849,29,3.919,30,2.04,31,2.04,32,2.53,33,2.53,34,2.04,35,2.53,36,2.53,37,3.314,38,3.314,39,3.314,40,3.303,41,3.303,42,3.068,43,3.15,44,2.53,45,2.53,70,2.262,78,2.262,84,1.682,154,2.865,176,4.127,361,2.766,387,3.314,388,3.314,543,2.766,556,3.314,557,3.314,720,3.314,721,3.995,722,3.995]],["title/properties.html",[99,1.444,626,2.183]],["body/properties.html",[11,0.035,26,0.031,27,0.031,87,1.052,99,1.831,709,3.957,716,3.957,723,4.771,724,4.771,725,4.771]],["title/miscellaneous/typealiases.html",[643,1.108,726,3.761]],["body/miscellaneous/typealiases.html",[7,0.679,11,0.031,26,0.031,27,0.031,58,1.928,61,1.098,190,2.674,227,3.946,623,3.946,643,1.988,655,3.917,727,4.722,728,4.722]],["title/miscellaneous/variables.html",[643,1.108,729,3.12]],["body/miscellaneous/variables.html",[7,0.672,11,0.033,26,0.031,27,0.031,136,3.352,137,3.463,193,3.922,194,3.352,195,3.877,196,3.877,197,3.877,198,3.877,222,2.163,255,3.877,643,1.968,729,3.877,730,4.674]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":194,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":724,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":163,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1/1",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":508,"title":{},"body":{"entities/User.html":{}}}],["16",{"_index":172,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["2",{"_index":154,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{},"overview.html":{}}}],["2/2",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":176,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["3.6.0",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":156,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["36",{"_index":112,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["4",{"_index":721,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["6/6",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":104,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{}}}],["7",{"_index":722,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":171,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8,16",{"_index":198,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["8.12.0",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":164,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9/9",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["9])(?=.*[a",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["_creationdate",{"_index":243,"title":{},"body":{"entities/Task.html":{}}}],["_description",{"_index":244,"title":{},"body":{"entities/Task.html":{}}}],["_email",{"_index":502,"title":{},"body":{"entities/User.html":{}}}],["_name",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["_password",{"_index":504,"title":{},"body":{"entities/User.html":{}}}],["_status",{"_index":245,"title":{},"body":{"entities/Task.html":{}}}],["_tasks",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["_title",{"_index":246,"title":{},"body":{"entities/Task.html":{}}}],["_user",{"_index":247,"title":{},"body":{"entities/Task.html":{}}}],["_username",{"_index":184,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["address",{"_index":151,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["adheres",{"_index":95,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["admin",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["aliases",{"_index":727,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allows",{"_index":179,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["alpha",{"_index":180,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["already",{"_index":238,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["amazing",{"_index":700,"title":{},"body":{"index.html":{}}}],["api",{"_index":94,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["app",{"_index":677,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":669,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":220,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["args.constraints[0",{"_index":229,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["array",{"_index":330,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["assigned",{"_index":118,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["associated",{"_index":263,"title":{},"body":{"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["async",{"_index":208,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["atleast",{"_index":153,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["author",{"_index":709,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":231,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["awesome_todo",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":701,"title":{},"body":{"index.html":{}}}],["body",{"_index":359,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":719,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":717,"title":{},"body":{"modules.html":{}}}],["building",{"_index":664,"title":{},"body":{"index.html":{}}}],["business",{"_index":434,"title":{},"body":{"injectables/TaskService.html":{}}}],["character",{"_index":169,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":127,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["characters'})@isalphanumeric('es",{"_index":177,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters'})@isnotempty({message",{"_index":106,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["characters.'})@maxlength(30",{"_index":155,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":203,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars.'})@isunique({tablename",{"_index":182,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":21,"title":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponse.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":84,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponse.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":387,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":388,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":556,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":557,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":183,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["column({type",{"_index":249,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["completion",{"_index":346,"title":{},"body":{"controllers/TaskController.html":{}}}],["console.log(task",{"_index":477,"title":{},"body":{"injectables/TaskService.html":{}}}],["const",{"_index":192,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constraint",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["constraint.ts",{"_index":206,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"coverage.html":{}}}],["constraint.ts:12",{"_index":212,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constraint.ts:14",{"_index":221,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constraint.ts:26",{"_index":217,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constructor",{"_index":209,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["constructor(entitymanager",{"_index":210,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constructor(id",{"_index":396,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["constructor(name",{"_index":528,"title":{},"body":{"entities/User.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["constructor(taskrepository",{"_index":438,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(title",{"_index":296,"title":{},"body":{"entities/Task.html":{}}}],["constructor(userrepository",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["constructs",{"_index":292,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["contain",{"_index":160,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":324,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('task",{"_index":370,"title":{},"body":{"controllers/TaskController.html":{}}}],["controller('user",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":601,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":313,"title":{},"body":{"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":371,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["create(createtaskdto",{"_index":320,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["create(createuserdto",{"_index":532,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["created",{"_index":141,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createquerybuilder('task",{"_index":470,"title":{},"body":{"injectables/TaskService.html":{}}}],["createquerybuilder(tablename",{"_index":234,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["creates",{"_index":323,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["createtaskdto",{"_index":83,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createtaskdto.description",{"_index":465,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtaskdto.title",{"_index":464,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtaskdto.user_id",{"_index":467,"title":{},"body":{"injectables/TaskService.html":{}}}],["createuserdto",{"_index":135,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":595,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.name",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":594,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.username",{"_index":593,"title":{},"body":{"injectables/UserService.html":{}}}],["creating",{"_index":89,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["creation",{"_index":444,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["creationdate",{"_index":281,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["creationdate(value",{"_index":283,"title":{},"body":{"entities/Task.html":{}}}],["creationdate.tolocaledatestring('es",{"_index":418,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["crud",{"_index":310,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["current",{"_index":400,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["data",{"_index":92,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["database",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["dataexist",{"_index":230,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["date",{"_index":248,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"dependencies.html":{}}}],["day",{"_index":419,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["deafault",{"_index":287,"title":{},"body":{"entities/Task.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":191,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["decorator.ts",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":255,"title":{},"body":{"entities/Task.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":207,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["defaultmessage(validationarguments",{"_index":215,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["defines",{"_index":308,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["delete",{"_index":344,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":341,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":455,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["deletes",{"_index":343,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleting",{"_index":579,"title":{},"body":{"injectables/UserService.html":{}}}],["deletion",{"_index":347,"title":{},"body":{"controllers/TaskController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":87,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["description(value",{"_index":277,"title":{},"body":{"entities/Task.html":{}}}],["details",{"_index":445,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["development",{"_index":678,"title":{},"body":{"index.html":{}}}],["digit",{"_index":162,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{}}}],["documentation",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":652,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":88,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["dto/create",{"_index":363,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/task",{"_index":366,"title":{},"body":{"controllers/TaskController.html":{}}}],["dto/update",{"_index":365,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["e2e",{"_index":689,"title":{},"body":{"index.html":{}}}],["each",{"_index":267,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["eager",{"_index":261,"title":{},"body":{"entities/Task.html":{}}}],["efficient",{"_index":665,"title":{},"body":{"index.html":{}}}],["email",{"_index":142,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["email(value",{"_index":524,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":540,"title":{},"body":{"controllers/UserController.html":{}}}],["ensures",{"_index":91,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["entities",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"entities/Task.html":{},"entities/User.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["entities/task.entity",{"_index":368,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{}}}],["entities/user.entity",{"_index":546,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":240,"title":{"entities/Task.html":{},"entities/User.html":{}},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entitymanager",{"_index":211,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["enum",{"_index":254,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":644,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["es",{"_index":178,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{}}}],["example",{"_index":674,"title":{},"body":{"index.html":{}}}],["exist",{"_index":239,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["existing",{"_index":457,"title":{},"body":{"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["expose",{"_index":410,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["express",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":489,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["factory",{"_index":408,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["field",{"_index":236,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":314,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findallbyuser",{"_index":315,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["findallbyuser(@param('id",{"_index":377,"title":{},"body":{"controllers/TaskController.html":{}}}],["findallbyuser(id",{"_index":331,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["finding",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":316,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":379,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":337,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["fns",{"_index":415,"title":{},"body":{"classes/TaskResponseDto.html":{},"dependencies.html":{}}}],["format",{"_index":414,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["formatted",{"_index":535,"title":{},"body":{"controllers/UserController.html":{}}}],["found",{"_index":453,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":663,"title":{},"body":{"index.html":{}}}],["full",{"_index":158,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["function",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":653,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":268,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["get(':id",{"_index":338,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["get('user/:id",{"_index":332,"title":{},"body":{"controllers/TaskController.html":{}}}],["getexists",{"_index":235,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":473,"title":{},"body":{"injectables/TaskService.html":{}}}],["getrepository(tablename",{"_index":233,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["getting",{"_index":659,"title":{"index.html":{}},"body":{}}],["given",{"_index":294,"title":{},"body":{"entities/Task.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["grow",{"_index":696,"title":{},"body":{"index.html":{}}}],["handles",{"_index":433,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["handling",{"_index":305,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["hello",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":706,"title":{},"body":{"index.html":{}}}],["host",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["hour",{"_index":422,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["https://nestjs.com",{"_index":713,"title":{},"body":{"index.html":{}}}],["id",{"_index":113,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":266,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["implements",{"_index":228,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["in_progress",{"_index":651,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["including",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":345,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["initialize",{"_index":527,"title":{},"body":{"entities/User.html":{}}}],["injectable",{"_index":77,"title":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":460,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["injectrepository(task",{"_index":461,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectrepository(user",{"_index":462,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["input",{"_index":140,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["installation",{"_index":673,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":676,"title":{},"body":{"index.html":{}}}],["instance",{"_index":293,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["interacts",{"_index":436,"title":{},"body":{"injectables/TaskService.html":{}}}],["isalphanumeric",{"_index":186,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isalphanumeric('es",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":187,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":123,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isenum(taskstatus",{"_index":129,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty",{"_index":122,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty({message",{"_index":144,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":119,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@length(36",{"_index":111,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isstring()@maxlength(60",{"_index":109,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isstring()@minlength(2",{"_index":152,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(5",{"_index":102,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isuniqeinterface",{"_index":227,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["isunique",{"_index":189,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isunique(options",{"_index":656,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isuniqueconstraint",{"_index":42,"title":{"injectables/IsUniqueConstraint.html":{}},"body":{"modules/AppModule.html":{},"injectables/IsUniqueConstraint.html":{},"coverage.html":{},"overview.html":{}}}],["join",{"_index":703,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":710,"title":{},"body":{"index.html":{}}}],["key",{"_index":481,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["leftjoinandselect('task._user",{"_index":471,"title":{},"body":{"injectables/TaskService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":124,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["length'})@isnotempty({message",{"_index":116,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["length(36",{"_index":134,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["less",{"_index":105,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["letter",{"_index":166,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":716,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":693,"title":{},"body":{"index.html":{}}}],["list",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["literal",{"_index":728,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["localhost",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":435,"title":{},"body":{"injectables/TaskService.html":{}}}],["long",{"_index":173,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lowercase",{"_index":165,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["make",{"_index":285,"title":{},"body":{"entities/Task.html":{}}}],["mandatory",{"_index":107,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["mandatory'})@isemail",{"_index":145,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory'})@matches(passwordregex",{"_index":159,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory'})@minlength(3",{"_index":175,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["manytoone",{"_index":270,"title":{},"body":{"entities/Task.html":{}}}],["manytoone(undefined",{"_index":259,"title":{},"body":{"entities/Task.html":{}}}],["match",{"_index":114,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["matches",{"_index":188,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(passwordregex",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":121,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(30",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(60",{"_index":126,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["message",{"_index":103,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["metadata",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":409,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":120,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":201,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":128,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["minute",{"_index":423,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["miscellaneous",{"_index":643,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":692,"title":{},"body":{"index.html":{}}}],["mode",{"_index":682,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":420,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["more",{"_index":705,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":711,"title":{},"body":{"index.html":{}}}],["name",{"_index":143,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["name(value",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["necessary",{"_index":96,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["nest",{"_index":670,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":715,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":493,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":90,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newly",{"_index":534,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["node.js",{"_index":662,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":459,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('no",{"_index":480,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":675,"title":{},"body":{"index.html":{}}}],["null",{"_index":478,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["numeric",{"_index":181,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{}}}],["object",{"_index":398,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["object.entries(updatetaskdto",{"_index":482,"title":{},"body":{"injectables/TaskService.html":{}}}],["object.entries(updateuserdto",{"_index":597,"title":{},"body":{"injectables/UserService.html":{}}}],["of(task",{"_index":406,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["of(user",{"_index":566,"title":{},"body":{"classes/UserResponse.html":{}}}],["omittype",{"_index":492,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["omittype(createtaskdto",{"_index":491,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["one",{"_index":161,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":510,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":694,"title":{},"body":{"index.html":{}}}],["operation",{"_index":348,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["operations",{"_index":311,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["optional",{"_index":214,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":658,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":720,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":626,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":295,"title":{},"body":{"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["param('id",{"_index":383,"title":{},"body":{"controllers/TaskController.html":{}}}],["parameters",{"_index":213,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":131,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["partialtype",{"_index":490,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":499,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["password(value",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["passwordregex",{"_index":193,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":360,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":351,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["patch('status/:id",{"_index":357,"title":{},"body":{"controllers/TaskController.html":{}}}],["pg",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["plaintoinstance",{"_index":411,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["please",{"_index":146,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["populated",{"_index":568,"title":{},"body":{"classes/UserResponse.html":{}}}],["port",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":321,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["postgres",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":304,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":271,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":264,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["private",{"_index":242,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["problematic",{"_index":288,"title":{},"body":{"entities/Task.html":{}}}],["production",{"_index":684,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":661,"title":{},"body":{"index.html":{}}}],["project",{"_index":695,"title":{},"body":{"index.html":{}}}],["promise",{"_index":223,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":99,"title":{"properties.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"properties.html":{}}}],["provide",{"_index":147,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["provided",{"_index":399,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":272,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["read",{"_index":704,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["record",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["records",{"_index":580,"title":{},"body":{"injectables/UserService.html":{}}}],["reflect",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":306,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove",{"_index":317,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":385,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":340,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":437,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":647,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["requests",{"_index":307,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":447,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["response",{"_index":394,"title":{},"body":{"classes/TaskResponseDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{}}}],["response.dto",{"_index":367,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["response.dto.ts",{"_index":393,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":563,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:13",{"_index":403,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:15",{"_index":564,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:18",{"_index":405,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:20",{"_index":565,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:23",{"_index":402,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:25",{"_index":562,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:28",{"_index":404,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:33",{"_index":401,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:38",{"_index":397,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:48",{"_index":567,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:78",{"_index":407,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["result",{"_index":588,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":335,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["retrieved",{"_index":450,"title":{},"body":{"injectables/TaskService.html":{}}}],["retrieves",{"_index":329,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["routes",{"_index":309,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["rules",{"_index":98,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["run",{"_index":679,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["saves",{"_index":443,"title":{},"body":{"injectables/TaskService.html":{}}}],["scalable",{"_index":666,"title":{},"body":{"index.html":{}}}],["second",{"_index":424,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["sent",{"_index":93,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["server",{"_index":667,"title":{},"body":{"index.html":{}}}],["service",{"_index":432,"title":{},"body":{"injectables/TaskService.html":{}}}],["set",{"_index":274,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["side",{"_index":668,"title":{},"body":{"index.html":{}}}],["single",{"_index":452,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"index.html":{}}}],["space",{"_index":170,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["special",{"_index":168,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":334,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["specified",{"_index":336,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["sponsors",{"_index":698,"title":{},"body":{"index.html":{}}}],["src/.../create",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":655,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":654,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../taskstatus.ts",{"_index":645,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["src/main.ts",{"_index":605,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/task/dto/create",{"_index":85,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/task/dto/task",{"_index":392,"title":{},"body":{"classes/TaskResponseDto.html":{},"coverage.html":{}}}],["src/task/dto/update",{"_index":487,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["src/task/entities/task.entity",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["src/task/entities/task.entity.ts",{"_index":241,"title":{},"body":{"entities/Task.html":{},"coverage.html":{}}}],["src/task/entities/task.entity.ts:14",{"_index":265,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:20",{"_index":258,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:32",{"_index":253,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:44",{"_index":257,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:56",{"_index":251,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:70",{"_index":262,"title":{},"body":{"entities/Task.html":{}}}],["src/task/task.controller.ts",{"_index":303,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/task/task.controller.ts:31",{"_index":322,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:40",{"_index":328,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:51",{"_index":333,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:62",{"_index":339,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:73",{"_index":352,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:84",{"_index":358,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:97",{"_index":342,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.module.ts",{"_index":389,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/task/task.service.ts",{"_index":431,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/task/task.service.ts:116",{"_index":458,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:134",{"_index":454,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:16",{"_index":440,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:28",{"_index":442,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:43",{"_index":446,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:53",{"_index":448,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:74",{"_index":451,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:92",{"_index":456,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/taskstatus.ts",{"_index":646,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/dto/create",{"_index":136,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/update",{"_index":498,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/user",{"_index":561,"title":{},"body":{"classes/UserResponse.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":269,"title":{},"body":{"entities/Task.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":501,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:13",{"_index":514,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:19",{"_index":507,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:31",{"_index":513,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:43",{"_index":509,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:55",{"_index":506,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:67",{"_index":512,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":530,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:31",{"_index":533,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:41",{"_index":537,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":538,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:65",{"_index":542,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:76",{"_index":539,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":558,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":576,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:51",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:68",{"_index":589,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:90",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["src/validation/unique/is",{"_index":190,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["start",{"_index":680,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":683,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":685,"title":{},"body":{"index.html":{}}}],["started",{"_index":660,"title":{"index.html":{}},"body":{}}],["starter",{"_index":672,"title":{},"body":{"index.html":{}}}],["state",{"_index":133,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["statements",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":395,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["status",{"_index":130,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["status(value",{"_index":280,"title":{},"body":{"entities/Task.html":{}}}],["status.dto",{"_index":369,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["status.dto.ts",{"_index":495,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:14",{"_index":496,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["status.status",{"_index":485,"title":{},"body":{"injectables/TaskService.html":{}}}],["statuses",{"_index":649,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":707,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["successfully",{"_index":541,"title":{},"body":{"controllers/UserController.html":{}}}],["support",{"_index":699,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":718,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["tablename",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":55,"title":{"entities/Task.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["task.controller",{"_index":390,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.creationdate",{"_index":430,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.description",{"_index":427,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.dto",{"_index":364,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts",{"_index":86,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:22",{"_index":110,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:30",{"_index":108,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:41",{"_index":117,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.id",{"_index":425,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.service",{"_index":362,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.status",{"_index":428,"title":{},"body":{"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{}}}],["task.title",{"_index":426,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.user",{"_index":511,"title":{},"body":{"entities/User.html":{}}}],["task.user.id",{"_index":429,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task/entities/task.entity",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["task/task.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["task[key",{"_index":483,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcontroller",{"_index":302,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskmodule",{"_index":40,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskrepository",{"_index":441,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskresponsedto",{"_index":327,"title":{"classes/TaskResponseDto.html":{}},"body":{"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"coverage.html":{}}}],["taskresponsedto.of(await",{"_index":372,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskresponsedto.of(task",{"_index":376,"title":{},"body":{"controllers/TaskController.html":{}}}],["tasks",{"_index":312,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["tasks(value",{"_index":526,"title":{},"body":{"entities/User.html":{}}}],["tasks.map((task",{"_index":375,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskservice",{"_index":361,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":132,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.to_do",{"_index":278,"title":{},"body":{"entities/Task.html":{}}}],["test",{"_index":688,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":691,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":690,"title":{},"body":{"index.html":{}}}],["tests",{"_index":687,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":697,"title":{},"body":{"index.html":{}}}],["this._creationdate",{"_index":282,"title":{},"body":{"entities/Task.html":{}}}],["this._description",{"_index":276,"title":{},"body":{"entities/Task.html":{}}}],["this._email",{"_index":523,"title":{},"body":{"entities/User.html":{}}}],["this._name",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["this._password",{"_index":521,"title":{},"body":{"entities/User.html":{}}}],["this._status",{"_index":279,"title":{},"body":{"entities/Task.html":{}}}],["this._tasks",{"_index":525,"title":{},"body":{"entities/User.html":{}}}],["this._title",{"_index":273,"title":{},"body":{"entities/Task.html":{}}}],["this._user",{"_index":290,"title":{},"body":{"entities/Task.html":{}}}],["this._username",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.creationdate",{"_index":301,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.description",{"_index":298,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.email",{"_index":571,"title":{},"body":{"classes/UserResponse.html":{}}}],["this.entitymanager",{"_index":232,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["this.id",{"_index":416,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["this.name",{"_index":569,"title":{},"body":{"classes/UserResponse.html":{}}}],["this.status",{"_index":299,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.taskrepository",{"_index":469,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.delete(id",{"_index":486,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.find",{"_index":468,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.findoneby",{"_index":476,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save",{"_index":463,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save(task",{"_index":484,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.create(createtaskdto",{"_index":373,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findall",{"_index":374,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findallbyuser(id",{"_index":378,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findone(id",{"_index":380,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.remove(id",{"_index":386,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.update(id",{"_index":382,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatestatus(id",{"_index":384,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.title",{"_index":297,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.user",{"_index":300,"title":{},"body":{"entities/Task.html":{}}}],["this.user_id",{"_index":417,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["this.username",{"_index":570,"title":{},"body":{"classes/UserResponse.html":{}}}],["this.userrepository.delete(id",{"_index":600,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":596,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":466,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":591,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":599,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":549,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":550,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":553,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":555,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":554,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":479,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["throws",{"_index":475,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":250,"title":{},"body":{"entities/Task.html":{}}}],["title",{"_index":100,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["title(value",{"_index":275,"title":{},"body":{"entities/Task.html":{}}}],["to_do",{"_index":650,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["touch",{"_index":708,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":590,"title":{},"body":{"injectables/UserService.html":{}}}],["transform",{"_index":412,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["transformer",{"_index":413,"title":{},"body":{"classes/TaskResponseDto.html":{},"dependencies.html":{}}}],["true",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{}}}],["twitter",{"_index":714,"title":{},"body":{"index.html":{}}}],["type",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":726,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":226,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":391,"title":{},"body":{"modules/TaskModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":560,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":494,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":671,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":256,"title":{},"body":{"entities/Task.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["unique",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":686,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":325,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":725,"title":{},"body":{"properties.html":{}}}],["update",{"_index":318,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":381,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":349,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":354,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updates",{"_index":353,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatestatus",{"_index":319,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatestatus(id",{"_index":355,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatetaskdto",{"_index":350,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updatetaskstatusdto",{"_index":356,"title":{"classes/UpdateTaskStatusDto.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":497,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updating",{"_index":488,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["uppercase",{"_index":167,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["use",{"_index":289,"title":{},"body":{"entities/Task.html":{}}}],["used",{"_index":138,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user",{"_index":52,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user's",{"_index":150,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user(value",{"_index":291,"title":{},"body":{"entities/Task.html":{}}}],["user.controller",{"_index":559,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":500,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":137,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:28",{"_index":157,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":185,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:53",{"_index":174,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:60",{"_index":149,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":575,"title":{},"body":{"classes/UserResponse.html":{}}}],["user.id",{"_index":474,"title":{},"body":{"injectables/TaskService.html":{}}}],["user.name",{"_index":573,"title":{},"body":{"classes/UserResponse.html":{}}}],["user.service",{"_index":544,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.tasks",{"_index":260,"title":{},"body":{"entities/Task.html":{}}}],["user.username",{"_index":574,"title":{},"body":{"classes/UserResponse.html":{}}}],["user/entities/user.entity",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["user[key",{"_index":598,"title":{},"body":{"injectables/UserService.html":{}}}],["user_id",{"_index":101,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{}}}],["usercontroller",{"_index":529,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":41,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["username(value",{"_index":520,"title":{},"body":{"entities/User.html":{}}}],["userrepository",{"_index":439,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["userresponse",{"_index":536,"title":{"classes/UserResponse.html":{}},"body":{"controllers/UserController.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["userresponse(user.id",{"_index":572,"title":{},"body":{"classes/UserResponse.html":{}}}],["userresponse.of(await",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["userresponse.of(user",{"_index":552,"title":{},"body":{"controllers/UserController.html":{}}}],["users",{"_index":531,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.map((user",{"_index":551,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":543,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":115,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["valid",{"_index":148,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":139,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["validate(value",{"_index":219,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validation",{"_index":97,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["validation/unique/is",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["validationarguments",{"_index":216,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validationarguments.property",{"_index":237,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validationoptions",{"_index":657,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":125,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/UpdateTaskStatusDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":224,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validatorconstraintinterface",{"_index":225,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["value",{"_index":222,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":252,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["variable",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":729,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":648,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":723,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":681,"title":{},"body":{"index.html":{}}}],["way",{"_index":284,"title":{},"body":{"entities/Task.html":{}}}],["website",{"_index":712,"title":{},"body":{"index.html":{}}}],["where('user.id",{"_index":472,"title":{},"body":{"injectables/TaskService.html":{}}}],["whose",{"_index":449,"title":{},"body":{"injectables/TaskService.html":{}}}],["work",{"_index":286,"title":{},"body":{"entities/Task.html":{}}}],["world",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["wrapped",{"_index":326,"title":{},"body":{"controllers/TaskController.html":{}}}],["year",{"_index":421,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["yes",{"_index":218,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":702,"title":{},"body":{"index.html":{}}}],["z])(?=.*[a",{"_index":196,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\w",{"_index":197,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nIsUniqueConstraint\n\nIsUniqueConstraint\n\nAppModule -->\n\nIsUniqueConstraint->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            IsUniqueConstraint\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TaskModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './user/user.module';\nimport { User } from './user/entities/user.entity';\nimport { TaskModule } from './task/task.module';\nimport { Task } from './task/entities/task.entity';\nimport { IsUniqueConstraint } from './validation/unique/is-unique-constraint';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: 'localhost',\n      port: 5432,\n      password: 'admin',\n      username: 'postgres',\n      entities: [User, Task],\n      database: 'awesome_todo-list',\n      synchronize: true,\n      logging: true,\n    }),\n    UserModule,\n    TaskModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, IsUniqueConstraint],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/create-task.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new task.\nThis DTO ensures that the data sent to the API for creating a task\nadheres to the necessary validation rules.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(5, {message: 'Description must have 60 or less characters'})@IsNotEmpty({message: 'Description is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:30\n                        \n                    \n\n            \n                \n                    The description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(60, {message: 'Title must have 60 or less characters'})@IsNotEmpty({message: 'Title is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:22\n                        \n                    \n\n            \n                \n                    The title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(36, 36, {message: 'User ID must match UUID length'})@IsNotEmpty({message: 'Description is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:41\n                        \n                    \n\n            \n                \n                    The ID of the user to whom the task is assigned.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  MinLength,\n  MaxLength,\n  IsNotEmpty,\n  IsEnum,\n  Length,\n} from 'class-validator';\n\n/**\n * DTO for creating a new task.\n * This DTO ensures that the data sent to the API for creating a task\n * adheres to the necessary validation rules.\n */\nexport class CreateTaskDto {\n  /**\n   * The title of the task.\n   */\n  @IsString()\n  @MaxLength(60, { message: 'Title must have 60 or less characters' })\n  @IsNotEmpty({ message: 'Title is mandatory' })\n  title: string;\n\n  /**\n   * The description of the task.\n   */\n  @IsString()\n  @MinLength(5, { message: 'Description must have 60 or less characters' })\n  @IsNotEmpty({ message: 'Description is mandatory' })\n  description: string;\n\n  //@IsEnum(TaskStatus, { message: 'Status must be part of TaskStatus' })\n  //state: TaskStatus;\n\n  /**\n   * The ID of the user to whom the task is assigned.\n   */\n  @IsString()\n  @Length(36, 36, { message: 'User ID must match UUID length' })\n  @IsNotEmpty({ message: 'Description is mandatory' })\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\nThis class is used to validate the input data when a new user is created.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Email is mandatory'})@IsEmail({}, {message: 'Please provide valid Email.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:60\n                        \n                    \n\n            \n                \n                    The user's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(2, {message: 'Name must have atleast 2 characters.'})@MaxLength(30, {message: 'Name must have 30 or less characters'})@IsNotEmpty({message: 'Name is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    The user's full name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password is mandatory'})@Matches(passwordRegEx, {message: Password must contain one digit from 1 to 9, one lowercase letter, one uppercase letter, one special character, no space, and it must be 8-16 characters long.})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    The user's password.\nPassword must contain one digit from 1 to 9,\none lowercase letter, one uppercase letter,\none special character, no space,\nand it must be 8-16 characters long.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Username is mandatory'})@MinLength(3, {message: 'Username must have atleast 3 characters.'})@MaxLength(30, {message: 'Username must have 30 or less characters'})@IsAlphanumeric('es-ES', {message: 'Username only allows alpha numeric chars.'})@IsUnique({tableName: 'user', column: '_username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:40\n                        \n                    \n\n            \n                \n                    The user's unique username.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { IsUnique } from 'src/validation/unique/is-unique-decorator';\n\nconst passwordRegEx =\n  /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/;\n\n/**\n * DTO for creating a new user.\n * This class is used to validate the input data when a new user is created.\n */\nexport class CreateUserDto {\n  /**\n   * The user's full name.\n   */\n  @IsString()\n  @MinLength(2, { message: 'Name must have atleast 2 characters.' })\n  @MaxLength(30, { message: 'Name must have 30 or less characters' })\n  @IsNotEmpty({ message: 'Name is mandatory' })\n  name: string;\n\n  /**\n   * The user's unique username.\n   */\n  @IsNotEmpty({ message: 'Username is mandatory' })\n  @MinLength(3, { message: 'Username must have atleast 3 characters.' })\n  @MaxLength(30, { message: 'Username must have 30 or less characters' })\n  @IsAlphanumeric('es-ES', {\n    message: 'Username only allows alpha numeric chars.',\n  })\n  @IsUnique({ tableName: 'user', column: '_username' })\n  username: string;\n\n  /**\n   * The user's password.\n   * Password must contain one digit from 1 to 9,\n   * one lowercase letter, one uppercase letter,\n   * one special character, no space,\n   * and it must be 8-16 characters long.\n   */\n  @IsNotEmpty({ message: 'Password is mandatory' })\n  @Matches(passwordRegEx, {\n    message: `Password must contain one digit from 1 to 9, one lowercase letter, one uppercase letter, one special character, no space, and it must be 8-16 characters long.`,\n  })\n  password: string;\n\n  /**\n   * The user's email address.\n   */\n  @IsNotEmpty({ message: 'Email is mandatory' })\n  @IsEmail({}, { message: 'Please provide valid Email.' })\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsUniqueConstraint.html":{"url":"injectables/IsUniqueConstraint.html","title":"injectable - IsUniqueConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsUniqueConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/unique/is-unique-constraint.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityManager: EntityManager)\n                    \n                \n                        \n                            \n                                Defined in src/validation/unique/is-unique-constraint.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/unique/is-unique-constraint.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationArguments\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(value: any, args?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/unique/is-unique-constraint.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { EntityManager } from 'typeorm';\nimport { IsUniqeInterface } from './is-unique-decorator';\n\n@ValidatorConstraint({ name: 'IsUniqueConstraint', async: true })\n@Injectable()\nexport class IsUniqueConstraint implements ValidatorConstraintInterface {\n  constructor(private readonly entityManager: EntityManager) {}\n  async validate(value: any, args?: ValidationArguments): Promise {\n    const { tableName, column }: IsUniqeInterface = args.constraints[0];\n\n    const dataExist = await this.entityManager\n      .getRepository(tableName)\n      .createQueryBuilder(tableName)\n      .where({ [column]: value })\n      .getExists();\n\n    return !dataExist;\n  }\n\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    const field: string = validationArguments.property;\n    return `${field} already exist`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Task.html":{"url":"entities/Task.html","title":"entity - Task","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/entities/task.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Task entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                _creationDate\n                            \n                            \n                                    \n                                    Private\n                                _description\n                            \n                            \n                                    \n                                    Private\n                                _status\n                            \n                            \n                                    \n                                    Private\n                                _title\n                            \n                            \n                                    \n                                    Private\n                                _user\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:56\n                        \n                    \n\n            \n                \n                    The date when the task was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:32\n                        \n                    \n\n            \n                \n                    The description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TaskStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:44\n                        \n                    \n\n            \n                \n                    The status of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:20\n                        \n                    \n\n            \n                \n                    The title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.tasks, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:70\n                        \n                    \n\n            \n                \n                    The user who is associated with the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:14\n                        \n                    \n\n            \n                \n                    Unique identifier for each task, generated as a UUID.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/user/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { TaskStatus } from '../taskStatus';\n\n/**\n * Task entity\n */\n@Entity()\nexport class Task {\n  /**\n   * Unique identifier for each task, generated as a UUID.\n   */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * The title of the task.\n   */\n  @Column({ type: 'varchar', length: 60 })\n  private _title: string;\n  public get title(): string {\n    return this._title;\n  }\n  public set title(value: string) {\n    this._title = value;\n  }\n\n  /**\n   * The description of the task.\n   */\n  @Column({ type: 'varchar' })\n  private _description: string;\n  public get description(): string {\n    return this._description;\n  }\n  public set description(value: string) {\n    this._description = value;\n  }\n\n  /**\n   * The status of the task.\n   */\n  @Column({ type: 'enum', enum: TaskStatus, default: TaskStatus.TO_DO })\n  private _status: TaskStatus;\n  public get status(): TaskStatus {\n    return this._status;\n  }\n  public set status(value: TaskStatus) {\n    this._status = value;\n  }\n\n  /**\n   * The date when the task was created.\n   */\n  @Column({ type: 'timestamp' })\n  private _creationDate: Date;\n  public get creationDate(): Date {\n    return this._creationDate;\n  }\n  public set creationDate(value: Date) {\n    this._creationDate = value;\n  }\n\n  //There should be a way to make it work in deafault,\n  //but since is a ManyToOne is not problematic to use eager\n  /**\n   * The user who is associated with the task.\n   */\n  @ManyToOne(() => User, (user: User) => user.tasks, { eager: true })\n  private _user: User;\n  public get user(): User {\n    return this._user;\n  }\n  public set user(value: User) {\n    this._user = value;\n  }\n\n  /**\n   * Constructs a new task instance with the given title, description, and associated user.\n   *\n   * @param {string} title - The title of the task.\n   * @param {string} description - The description of the task.\n   * @param {User} user - The user associated with this task.\n   */\n  constructor(title: string, description: string, user: User) {\n    this.title = title;\n    this.description = description;\n    this.status = TaskStatus.TO_DO;\n    this.user = user;\n    this.creationDate = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling task-related requests.\nDefines the routes and methods for CRUD operations on tasks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing data for creating a new task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created task wrapped in a TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of tasks wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks associated with a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user for whom to retrieve tasks.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of tasks for the specified user, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The task with the specified ID, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Deletes a task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise indicating the completion of the deletion operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Updates a task with new data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to update.\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing updated data for the task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: UpdateTaskStatusDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('status/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Updates the status of a task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to update.\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing the new status for the task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task with the new status, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TaskResponseDto } from './dto/task-response.dto';\nimport { Task } from './entities/task.entity';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\n\n/**\n * Controller for handling task-related requests.\n * Defines the routes and methods for CRUD operations on tasks.\n */\n@Controller('task')\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  /**\n   * Creates a new task.\n   * @param {CreateTaskDto} createTaskDto The DTO containing data for creating a new task.\n   * @returns {TaskResponseDto} The created task wrapped in a TaskResponseDto.\n   */\n  @Post()\n  async create(@Body() createTaskDto: CreateTaskDto) {\n    return TaskResponseDto.of(await this.taskService.create(createTaskDto));\n  }\n\n  /**\n   * Retrieves all tasks.\n   * @returns {TaskResponseDto[]} An array of tasks wrapped in TaskResponseDto.\n   */\n  @Get()\n  async findAll() {\n    const tasks: Task[] = await this.taskService.findAll();\n    return tasks.map((task) => TaskResponseDto.of(task));\n  }\n\n  /**\n   * Retrieves all tasks associated with a specific user.\n   * @param {string} id The ID of the user for whom to retrieve tasks.\n   * @returns {TaskResponseDto[]} An array of tasks for the specified user, wrapped in TaskResponseDto.\n   */\n  @Get('user/:id')\n  async findAllByUser(@Param('id') id: string) {\n    const tasks: Task[] = await this.taskService.findAllByUser(id);\n    return tasks.map((task) => TaskResponseDto.of(task));\n  }\n\n  /**\n   * Retrieves a specific task by its ID.\n   * @param {string} id The ID of the task to retrieve.\n   * @returns {TaskResponseDto} The task with the specified ID, wrapped in TaskResponseDto.\n   */\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return TaskResponseDto.of(await this.taskService.findOne(id));\n  }\n\n  /**\n   * Updates a task with new data.\n   * @param {string} id The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto The DTO containing updated data for the task.\n   * @returns {TaskResponseDto} The updated task wrapped in TaskResponseDto.\n   */\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto) {\n    return TaskResponseDto.of(await this.taskService.update(id, updateTaskDto));\n  }\n\n  /**\n   * Updates the status of a task.\n   * @param {string} id The ID of the task to update.\n   * @param {UpdateTaskStatusDto} status The DTO containing the new status for the task.\n   * @returns {TaskResponseDto} The updated task with the new status, wrapped in TaskResponseDto.\n   */\n  @Patch('status/:id')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() status: UpdateTaskStatusDto,\n  ) {\n    return TaskResponseDto.of(await this.taskService.updateStatus(id, status));\n  }\n\n  /**\n   * Deletes a task by its ID.\n   * @param {string} id The ID of the task to delete.\n   * @returns A promise indicating the completion of the deletion operation.\n   */\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.taskService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nTaskService\n\nTaskService\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Task } from './entities/task.entity';\nimport { User } from 'src/user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task, User])],\n  controllers: [TaskController],\n  providers: [TaskService],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskResponseDto.html":{"url":"classes/TaskResponseDto.html","title":"class - TaskResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/task-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for Task Response.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                creationDate\n                            \n                            \n                                    Private\n                                description\n                            \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                status\n                            \n                            \n                                    Private\n                                title\n                            \n                            \n                                    Private\n                                user_id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, title: string, description: string, status: TaskStatus, user_id: string, creationDate: Date)\n                    \n                \n                        \n                            \n                                Defined in src/task/dto/task-response.dto.ts:38\n                            \n                        \n\n                \n                    \n                            Constructs a TaskResponseDto object with the provided parameters.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe title of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe description of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        TaskStatus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe current status of the task (enum TaskStatus).\n\n\n                                                        \n                                                \n                                                \n                                                        user_id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the user associated with the task.\n\n\n                                                        \n                                                \n                                                \n                                                        creationDate\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The date when the task was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    Description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:28\n                        \n                    \n\n            \n                \n                    Current status of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:18\n                        \n                    \n\n            \n                \n                    Title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:38\n                        \n                    \n\n            \n                \n                    Unique identifier of the user associated with the task.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        of\n                        \n                    \n                \n            \n            \n                \n                        \n                    of(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/dto/task-response.dto.ts:78\n                        \n                    \n\n\n            \n                \n                        Static factory method to create a TaskResponseDto from a Task entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Task entity from which to create the DTO.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TaskResponseDto\n\n                        \n                            \n                                A new instance of TaskResponseDto.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, plainToInstance, Transform } from 'class-transformer';\nimport { Task } from '../entities/task.entity';\nimport { TaskStatus } from '../taskStatus';\nimport { format } from 'date-fns';\n\n/**\n * DTO for Task Response.\n */\nexport class TaskResponseDto {\n  /**\n   * Unique identifier of the task.\n   */\n  private id: string;\n\n  /**\n   * Title of the task.\n   */\n  private title: string;\n\n  /**\n   * Description of the task.\n   */\n  private description: string;\n\n  /**\n   * Current status of the task.\n   */\n  private status: TaskStatus;\n\n  /**\n   * The date when the task was created.\n   */\n  private creationDate: string;\n\n  /**\n   * Unique identifier of the user associated with the task.\n   */\n  private user_id: string;\n\n  /**\n   * Constructs a TaskResponseDto object with the provided parameters.\n   *\n   * @param {string} id - The unique identifier of the task.\n   * @param {string} title - The title of the task.\n   * @param {string} description - The description of the task.\n   * @param {TaskStatus} status - The current status of the task (enum TaskStatus).\n   * @param {string} user_id - The unique identifier of the user associated with the task.\n   */\n  constructor(\n    id: string,\n    title: string,\n    description: string,\n    status: TaskStatus,\n    user_id: string,\n    creationDate: Date,\n  ) {\n    this.id = id;\n    this.title = title;\n    this.description = description;\n    this.status = status;\n    this.user_id = user_id;\n    this.creationDate = creationDate.toLocaleDateString('es-Es', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    });\n  }\n\n  /**\n   * Static factory method to create a TaskResponseDto from a Task entity.\n   *\n   * @param {Task} task - The Task entity from which to create the DTO.\n   * @returns A new instance of TaskResponseDto.\n   */\n  public static of(task: Task): TaskResponseDto {\n    return new TaskResponseDto(\n      task.id,\n      task.title,\n      task.description,\n      task.status,\n      task.user.id,\n      task.creationDate,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that handles business logic related to tasks.\nIt interacts with the Task repository for data operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllByUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a new task and saves it in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing task creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks from the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of tasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \nfindAllByUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks associated with a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose tasks are to be retrieved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of tasks associated with the user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Retrieves a single task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The found task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Deletes a task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the task is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Updates an existing task with new data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the updated task details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: UpdateTaskStatusDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Updates the status of a specific task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the new status of the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Task } from './entities/task.entity';\nimport { User } from 'src/user/entities/user.entity';\nimport { TaskStatus } from './taskStatus';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\n\n/**\n * Service that handles business logic related to tasks.\n * It interacts with the Task repository for data operations.\n */\n@Injectable()\nexport class TaskService {\n  constructor(\n    @InjectRepository(Task) private readonly taskRepository: Repository,\n    @InjectRepository(User) private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new task and saves it in the database.\n   *\n   * @param {CreateTaskDto} createTaskDto - DTO containing task creation details.\n   * @returns {Task} The created task.\n   */\n  async create(createTaskDto: CreateTaskDto) {\n    return this.taskRepository.save(\n      new Task(\n        createTaskDto.title,\n        createTaskDto.description,\n        await this.userRepository.findOneBy({ id: createTaskDto.user_id }),\n      ),\n    );\n  }\n\n  /**\n   * Retrieves all tasks from the database.\n   *\n   * @returns {Promise}  A promise that resolves to an array of tasks.\n   */\n  findAll(): Promise {\n    return this.taskRepository.find();\n  }\n\n  /**\n   * Retrieves all tasks associated with a specific user.\n   *\n   * @param {string} id - The ID of the user whose tasks are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of tasks associated with the user.\n   */\n  findAllByUser(id: string): Promise {\n    return this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('user.id = :id', { id })\n      .getMany();\n    //return this.taskRepository.find({ where: { user: { id: id } } });\n    // return this.taskRepository.find({\n    //   where: {\n    //     user.id: id\n    //   },\n    // });\n  }\n\n  /**\n   * Retrieves a single task by its ID.\n   *\n   * @param {string} id - The ID of the task to retrieve.\n   * @returns {Task} The found task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async findOne(id: string) {\n    let task = await this.taskRepository.findOneBy({ id });\n    console.log(task);\n    if (task !== null) {\n      return task;\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Updates an existing task with new data.\n   *\n   * @param {string} id - The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto - DTO containing the updated task details.\n   * @returns {Task} The updated task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async update(id: string, updateTaskDto: UpdateTaskDto) {\n    let task = await this.taskRepository.findOneBy({ id });\n\n    if (task !== null) {\n      for (const [key, value] of Object.entries(updateTaskDto)) {\n        if (value !== undefined) {\n          task[key] = value;\n        }\n      }\n\n      return this.taskRepository.save(task);\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Updates the status of a specific task.\n   *\n   * @param {string} id - The ID of the task to update.\n   * @param {UpdateTaskStatusDto} status - DTO containing the new status of the task.\n   * @returns {Promise} The updated task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async updateStatus(id: string, status: UpdateTaskStatusDto) {\n    let task = await this.taskRepository.findOneBy({ id });\n\n    if (task !== null) {\n      task.status = status.status;\n\n      return this.taskRepository.save(task);\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Deletes a task by its ID.\n   *\n   * @param {String} id - The ID of the task to delete.\n   * @returns A promise that resolves when the task is deleted.\n   */\n  remove(id: string) {\n    return this.taskRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/update-task.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing task.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateTaskDto, ['user_id'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskDto } from './create-task.dto';\n\n/**\n * DTO for updating an existing task.\n */\nexport class UpdateTaskDto extends PartialType(\n  OmitType(CreateTaskDto, ['user_id'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskStatusDto.html":{"url":"classes/UpdateTaskStatusDto.html","title":"class - UpdateTaskStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/update-task-status.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating the status of a task.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(TaskStatus, {message: 'Status must be part of TaskStatus.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/update-task-status.dto.ts:14\n                        \n                    \n\n            \n                \n                    The status of the task.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { TaskStatus } from '../taskStatus';\n\n/**\n * DTO for updating the status of a task.\n */\nexport class UpdateTaskStatusDto {\n  /**\n   * The status of the task.\n   */\n  @IsEnum(TaskStatus, {\n    message: 'Status must be part of TaskStatus.',\n  })\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing user.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an existing user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                _email\n                            \n                            \n                                    \n                                    Private\n                                _name\n                            \n                            \n                                    \n                                    Private\n                                _password\n                            \n                            \n                                    \n                                    Private\n                                _tasks\n                            \n                            \n                                    \n                                    Private\n                                _username\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 15})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    The password of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, task => task.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:67\n                        \n                    \n\n            \n                \n                    The list of tasks associated with the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    The username of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for each User, generated as a UUID.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Task } from 'src/task/entities/task.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * User entity\n */\n@Entity()\nexport class User {\n  /**\n   * Unique identifier for each User, generated as a UUID.\n   */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * The name of the user.\n   */\n  @Column({ type: 'varchar', length: 30 })\n  private _name: string;\n  public get name(): string {\n    return this._name;\n  }\n  public set name(value: string) {\n    this._name = value;\n  }\n\n  /**\n   * The username of the user.\n   */\n  @Column({ type: 'varchar', length: 30 })\n  private _username: string;\n  public get username(): string {\n    return this._username;\n  }\n  public set username(value: string) {\n    this._username = value;\n  }\n\n  /**\n   * The password of the user.\n   */\n  @Column({ type: 'varchar', length: 15 })\n  private _password: string;\n  public get password(): string {\n    return this._password;\n  }\n  public set password(value: string) {\n    this._password = value;\n  }\n\n  /**\n   * The email of the user.\n   */\n  @Column({ type: 'varchar', length: 30 })\n  private _email: string;\n  public get email(): string {\n    return this._email;\n  }\n  public set email(value: string) {\n    this._email = value;\n  }\n\n  /**\n   * The list of tasks associated with the user.\n   */\n  @OneToMany(() => Task, (task: Task) => task.user)\n  private _tasks: Task[];\n  public get tasks(): Task[] {\n    return this._tasks;\n  }\n  public set tasks(value: Task[]) {\n    this._tasks = value;\n  }\n\n  /**\n   * Constructor to initialize a new User instance.\n   *\n   * @param {string} name - The name of the user.\n   * @param {string} username - The username of the user.\n   * @param {string} password - The password of the user.\n   * @param {string} email - The email of the user.\n   */\n  constructor(name: string, username: string, password: string, email: string) {\n    this._name = name;\n    this._username = username;\n    this._password = password;\n    this._email = email;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling user-related requests.\nDefines the routes and methods for CRUD operations on users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the user creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created user, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of all users.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all users, each formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user with the specified ID, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:76\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty response, indicating the user was successfully deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Updates an existing user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the updated user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated user, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserResponse } from './dto/user-response.dto';\nimport { User } from './entities/user.entity';\n\n/**\n * Controller for handling user-related requests.\n * Defines the routes and methods for CRUD operations on users.\n */\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * Creates a new user.\n   *\n   * @param {CreateUserDto} createUserDto - DTO containing the user creation details.\n   * @returns {Promise} The newly created user, formatted as a UserResponse.\n   */\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto): Promise {\n    return UserResponse.of(await this.userService.create(createUserDto));\n  }\n\n  /**\n   * Retrieves a list of all users.\n   *\n   * @returns {Promise} An array of all users, each formatted as a UserResponse.\n   */\n  @Get()\n  async findAll() {\n    const users: User[] = await this.userService.findAll();\n    return users.map((user) => UserResponse.of(user));\n  }\n\n  /**\n   * Retrieves a single user by ID.\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Promise} The user with the specified ID, formatted as a UserResponse.\n   */\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return UserResponse.of(await this.userService.findOne(id));\n  }\n\n  /**\n   * Updates an existing user by ID.\n   *\n   * @param {string} id - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - DTO containing the updated user details.\n   * @returns {Promise} The updated user, formatted as a UserResponse.\n   */\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return UserResponse.of(await this.userService.update(id, updateUserDto));\n  }\n\n  /**\n   * Deletes a user by ID.\n   *\n   * @param {string} id - The ID of the user to delete.\n   * @returns An empty response, indicating the user was successfully deleted.\n   */\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponse.html":{"url":"classes/UserResponse.html","title":"class - UserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for User Response.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                email\n                            \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                name\n                            \n                            \n                                    Private\n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, name: string, username: string, email: string)\n                    \n                \n                        \n                            \n                                Defined in src/user/dto/user-response.dto.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserResponse.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe username of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe email of the user.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:10\n                        \n                    \n\n            \n                \n                    The unique identifier of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:20\n                        \n                    \n\n            \n                \n                    The username of the user.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        of\n                        \n                    \n                \n            \n            \n                \n                        \n                    of(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/dto/user-response.dto.ts:48\n                        \n                    \n\n\n            \n                \n                        Creates a UserResponse object from a User entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity from which to create the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserResponse\n\n                        \n                            \n                                \nA new instance of UserResponse populated with user data.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for User Response.\n */\nexport class UserResponse {\n  /**\n   * The unique identifier of the user.\n   */\n  private id: string;\n\n  /**\n   * The name of the user.\n   */\n  private name: string;\n\n  /**\n   * The username of the user.\n   */\n  private username: string;\n\n  /**\n   * The email of the user.\n   */\n  private email: string;\n\n  /**\n   * Creates an instance of UserResponse.\n   *\n   * @param {string} id - The unique identifier of the user.\n   * @param {string} name - The name of the user.\n   * @param {string} username - The username of the user.\n   * @param {string} email - The email of the user.\n   */\n  constructor(id: string, name: string, username: string, email: string) {\n    this.id = id;\n    this.name = name;\n    this.username = username;\n    this.email = email;\n  }\n\n  /**\n   * Creates a UserResponse object from a User entity.\n   *\n   * @param {User} user - The user entity from which to create the response.\n   * @returns {UserResponse} - A new instance of UserResponse populated with user data.\n   */\n  public static of(user: User): UserResponse {\n    return new UserResponse(user.id, user.name, user.username, user.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The UserService handles all operations related to users,\nincluding creating, finding, updating, and deleting user records.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Creates a new user record in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO containing the details for the new user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The newly created User entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all users from the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of User entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the User entity if found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Deletes a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Updates an existing user record.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the updated user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the updated User entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\n\n/**\n * The UserService handles all operations related to users,\n * including creating, finding, updating, and deleting user records.\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new user record in the database.\n   *\n   * @param {CreateUserDto} createUserDto - The DTO containing the details for the new user.\n   * @returns {Promise} The newly created User entity.\n   */\n  create(createUserDto: CreateUserDto) {\n    return this.userRepository.save(\n      new User(\n        createUserDto.name,\n        createUserDto.username,\n        createUserDto.password,\n        createUserDto.email,\n      ),\n    );\n  }\n\n  /**\n   * Retrieves all users from the database.\n   *\n   * @returns {Promise} A promise that resolves to an array of User entities.\n   */\n  findAll(): Promise {\n    return this.userRepository.find();\n  }\n\n  /**\n   * Retrieves a single user by their ID.\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Promise} A promise that resolves to the User entity if found.\n   * @throws {NotFoundException} NotFoundException if no user is found with the given ID.\n   */\n  async findOne(id: string): Promise {\n    let user = await this.userRepository.findOneBy({ id });\n    if (user !== null) {\n      return user;\n    } else {\n      throw new NotFoundException('No user was found');\n    }\n  }\n\n  /**\n   * Updates an existing user record.\n   *\n   * @param {string} id - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - The data transfer object containing the updated user details.\n   * @returns {Promise} A promise that resolves to the updated User entity.\n   * @throws {NotFoundException} NotFoundException if no user is found with the given ID.\n   */\n  async update(id: string, updateUserDto: UpdateUserDto): Promise {\n    let user = await this.userRepository.findOneBy({ id });\n\n    if (user !== null) {\n      for (const [key, value] of Object.entries(updateUserDto)) {\n        if (value !== undefined) {\n          user[key] = value;\n        }\n      }\n\n      return this.userRepository.save(user);\n    } else {\n      throw new NotFoundException('No user was found');\n    }\n  }\n\n  /**\n   * Deletes a user by their ID.\n   *\n   * @param {string} id - The ID of the user to delete.\n   * @returns A promise that resolves to the result of the delete operation.\n   */\n  remove(id: string) {\n    return this.userRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/task/dto/task-response.dto.ts\n            \n            class\n            TaskResponseDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/task/dto/update-task-status.dto.ts\n            \n            class\n            UpdateTaskStatusDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/task/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/task/entities/task.entity.ts\n            \n            entity\n            Task\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            variable\n            passwordRegEx\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/dto/user-response.dto.ts\n            \n            class\n            UserResponse\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/validation/unique/is-unique-constraint.ts\n            \n            injectable\n            IsUniqueConstraint\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/validation/unique/is-unique-decorator.ts\n            \n            function\n            IsUnique\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^3.6.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../taskStatus.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/task/taskStatus.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                    \n                        \n                            Enum representing the various statuses of a task.\n\n                        \n                    \n                        \n                            \n                                 TO_DO\n                            \n                        \n                        \n                            \n                                Value : TO-DO\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsUnique   (src/.../is-unique-decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/validation/unique/is-unique-decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUnique\n                        \n                    \n                \n            \n            \n                \nIsUnique(options: IsUniqeInterface, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            IsUniqeInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nIsUniqueConstraint\n\nIsUniqueConstraint\n\nAppModule -->\n\nIsUniqueConstraint->AppModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IsUniqeInterface   (src/.../is-unique-decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/validation/unique/is-unique-decorator.ts\n    \n    \n        \n            \n                \n                    \n                    IsUniqeInterface\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            passwordRegEx   (src/.../create-user.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/dto/create-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        passwordRegEx\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
