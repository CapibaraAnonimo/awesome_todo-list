var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.45,1,1.985]],["body/controllers/AppController.html",[0,2.388,1,3.268,2,1.962,3,0.61,4,0.539,5,0.539,6,3.517,7,0.61,8,1.981,9,4.801,10,1.785,11,0.035,12,1.029,13,4.239,14,1.627,15,1.375,16,0.742,17,1.357,18,2.84,19,3.517,20,0.61,21,0.073,22,2.685,23,2.164,24,1.357,25,4.239,26,0.029,27,0.029]],["title/modules/AppModule.html",[28,1.45,29,1.985]],["body/modules/AppModule.html",[1,3.123,2,2.027,3,0.472,4,0.417,5,0.417,11,0.036,16,0.852,17,1.05,18,2.88,19,2.72,20,0.472,21,0.056,26,0.025,27,0.025,28,2.282,29,3.85,30,1.674,31,1.674,32,2.077,33,2.077,34,1.674,35,3.123,36,2.077,37,2.72,38,2.72,39,2.72,40,3.194,41,3.194,42,3.194,43,2.773,44,2.077,45,2.077,46,3.279,47,3.141,48,3.279,49,2.352,50,1.674,51,3.279,52,0.874,53,3.279,54,3.279,55,1.167,56,3.279,57,3.279,58,1.149,59,3.279,60,3.279,61,0.654,62,4.379,63,3.279,64,3.279,65,3.279,66,3.279,67,2.352,68,3.279,69,2.077,70,1.857,71,2.352,72,3.279,73,2.352,74,3.279,75,3.141,76,3.279]],["title/injectables/AppService.html",[18,1.6,77,1.203]],["body/injectables/AppService.html",[3,0.632,4,0.558,5,0.558,7,0.632,8,2.023,9,4.859,11,0.035,12,1.066,14,1.686,15,1.405,16,0.632,17,1.406,18,2.691,20,0.632,21,0.075,24,1.406,26,0.03,27,0.03,77,2.023,78,2.487,79,3.643,80,4.392,81,4.392,82,4.392]],["title/classes/CreateTaskDto.html",[21,0.054,83,1.6]],["body/classes/CreateTaskDto.html",[3,0.409,4,0.361,5,0.361,7,0.409,10,1.927,11,0.036,12,1.111,15,1.44,16,0.409,20,0.409,21,0.068,26,0.022,27,0.022,52,0.989,55,1.552,61,0.914,83,2.028,84,1.197,85,4.112,86,2.039,87,1.309,88,1.587,89,3.139,90,1.271,91,3.972,92,2.028,93,3.972,94,3.972,95,3.972,96,3.972,97,3.972,98,3.972,99,1.525,100,4.123,101,3.284,102,2.843,103,4.176,104,4.112,105,4.112,106,3.295,107,4.482,108,2.843,109,2.843,110,2.843,111,2.843,112,3.972,113,1.903,114,3.972,115,2.849,116,2.843,117,2.843,118,3.972,119,4.112,120,2.358,121,2.358,122,4.112,123,2.358,124,2.849,125,1.61,126,2.843,127,3.295,128,2.843,129,2.358,130,1.451,131,2.358,132,2.028,133,2.843,134,2.843]],["title/classes/CreateUserDto.html",[21,0.054,135,1.6]],["body/classes/CreateUserDto.html",[3,0.303,4,0.268,5,0.268,7,0.303,10,1.812,11,0.036,12,1.044,15,1.388,16,0.459,20,0.303,21,0.074,26,0.018,27,0.018,52,0.971,58,1.352,61,0.859,67,3.961,69,3.587,84,0.888,87,0.465,88,1.022,89,2.023,90,1.377,92,1.631,99,1.226,103,4.227,105,3.569,106,1.749,107,3.836,119,2.65,120,1.749,121,1.749,122,3.836,125,1.194,127,4.319,135,1.631,136,3.316,137,1.335,138,3.195,139,3.199,140,3.195,141,1.809,142,3.823,143,1.935,144,3.857,145,2.108,146,2.65,147,3.195,148,3.195,149,2.108,150,5.207,151,3.195,152,2.108,153,4.303,154,2.65,155,3.195,156,3.569,157,2.108,158,3.195,159,2.108,160,4.303,161,5.818,162,4.303,163,4.303,164,4.303,165,4.303,166,5.207,167,4.303,168,4.303,169,4.303,170,4.303,171,4.303,172,4.303,173,4.303,174,2.108,175,2.108,176,2.65,177,2.108,178,3.195,179,3.195,180,3.195,181,3.195,182,2.108,183,2.023,184,2.65,185,2.108,186,2.108,187,3.195,188,2.108,189,2.291,190,1.194,191,1.749,192,0.976,193,1.512,194,1.512,195,1.749,196,1.749,197,1.749,198,1.749,199,2.108,200,3.195,201,2.108,202,2.108,203,2.108,204,1.749,205,2.108]],["title/injectables/IsUniqueConstraint.html",[42,1.775,77,1.203]],["body/injectables/IsUniqueConstraint.html",[3,0.457,4,0.404,5,0.404,7,0.457,8,1.646,11,0.036,12,1.178,14,1.646,15,1.294,16,0.747,17,1.017,20,0.457,21,0.073,22,2.013,23,1.623,24,1.373,26,0.024,27,0.024,42,2.749,58,1.901,61,0.969,75,2.279,77,1.646,78,1.8,125,1.8,139,3.557,143,1.821,183,2.716,190,2.942,191,2.636,192,2.246,204,2.636,206,2.636,207,4.289,208,2.942,209,1.623,210,3.178,211,5.59,212,3.178,213,2.043,214,2.043,215,4.289,216,5.811,217,3.178,218,3.557,219,4.289,220,4.854,221,3.178,222,1.985,223,2.429,224,4.289,225,4.289,226,1.623,227,3.076,228,3.178,229,3.178,230,4.289,231,1.8,232,3.178,233,3.178,234,3.178,235,3.178,236,4.289,237,3.178,238,3.178,239,3.178]],["title/entities/Task.html",[55,0.835,240,1.319]],["body/entities/Task.html",[3,0.324,4,0.286,5,0.286,7,0.324,10,2.003,11,0.036,12,1.155,15,1.544,16,0.577,20,0.324,21,0.039,24,1.424,26,0.019,27,0.019,52,1.194,55,1.587,58,1.177,61,1.06,70,1.276,75,2.408,87,1.197,90,0.721,99,1.289,100,3.707,104,2.785,113,1.541,115,2.408,124,2.408,130,2.049,132,2.712,183,2.817,222,2.059,226,1.15,240,1.873,241,1.869,242,2.899,243,4.014,244,4.014,245,4.014,246,4.014,247,3.33,248,3.69,249,2.253,250,3.191,251,2.785,252,1.616,253,2.253,254,2.253,255,2.253,256,3.358,257,4.014,258,2.253,259,2.519,260,2.785,261,2.253,262,1.902,263,2.408,264,2.785,265,1.616,266,4.014,267,1.869,268,3.364,269,3.358,270,3.69,271,2.253,272,3.358,273,2.253,274,3.358,275,3.358,276,2.253,277,2.253,278,2.253,279,2.253,280,2.253,281,2.253,282,2.253,283,3.358,284,2.253,285,1.869,286,1.427,287,1.616,288,1.69,289,2.253,290,1.869,291,1.869,292,1.869,293,2.253]],["title/controllers/TaskController.html",[0,1.45,294,1.985]],["body/controllers/TaskController.html",[0,1.477,2,0.727,3,0.226,4,0.2,5,0.2,7,0.226,8,1.407,10,1.905,11,0.036,12,1.098,14,2.06,15,1.515,16,0.651,17,0.503,20,0.226,21,0.027,22,0.995,23,0.802,24,1.449,26,0.014,27,0.014,52,0.858,55,1.624,61,0.858,83,2.405,87,0.998,88,1.377,89,1.607,90,1.599,92,2.196,113,2.294,130,2.608,141,1.437,143,1.507,192,1.174,208,3.17,213,1.811,214,1.811,223,1.437,231,1.437,259,1.437,288,2.048,294,1.607,295,1.304,296,1.304,297,2.105,298,1.607,299,2.105,300,2.105,301,2.105,302,2.105,303,1.607,304,3.849,305,1.068,306,2.321,307,2.105,308,1.607,309,1.607,310,2.724,311,2.648,312,1.304,313,2.648,314,1.572,315,1.437,316,2.724,317,3.085,318,5.205,319,3.573,320,1.572,321,2.724,322,2.321,323,1.304,324,2.538,325,1.572,326,3.04,327,2.321,328,3.04,329,0.995,330,2.105,331,1.572,332,0.995,333,2.105,334,1.572,335,1.607,336,2.022,337,2.105,338,2.538,339,2.538,340,2.105,341,0.995,342,2.829,343,2.105,344,1.572,345,2.321,346,2.724,347,1.304,348,2.278,349,2.538,350,1.572,351,2.648,352,1.304,353,1.63,354,1.304,355,0.995,356,1.82,357,1.607,358,1.572,359,1.304,360,0.995,361,1.304,362,1.572,363,1.304,364,3.665,365,1.572,366,1.572,367,2.538,368,2.538,369,1.572,370,1.572,371,1.304,372,1.572,373,1.304,374,1.572,375,1.572,376,1.572,377,1.304,378,1.572]],["title/modules/TaskModule.html",[28,1.45,40,1.775]],["body/modules/TaskModule.html",[2,2.266,3,0.56,4,0.495,5,0.495,11,0.036,16,0.85,17,1.247,20,0.56,21,0.067,26,0.027,27,0.027,28,2.478,30,1.989,31,1.989,32,2.467,33,2.467,34,1.989,35,3.392,36,2.467,40,3.346,43,3.101,44,2.467,45,2.467,47,2.794,49,2.794,50,1.989,52,0.977,55,1.038,265,2.794,294,3.392,353,3.017,354,3.232,360,2.467,379,3.232,380,3.232,381,3.896,382,3.896,383,3.896]],["title/classes/TaskResponseDto.html",[21,0.054,319,1.985]],["body/classes/TaskResponseDto.html",[3,0.313,4,0.277,5,0.277,7,0.313,8,1.258,11,0.036,12,1.241,14,1.258,15,1.62,16,0.471,20,0.313,21,0.037,24,0.698,26,0.018,27,0.018,52,0.873,55,1.655,58,1.843,61,1.02,84,0.918,87,1.28,88,1.401,90,1.26,99,1.258,100,4.045,101,3.772,113,1.963,130,2.879,132,2.798,143,1.148,209,1.673,213,1.842,214,1.379,240,1.842,242,2.965,250,2.35,259,2.478,262,2.979,268,1.38,285,2.718,286,2.075,288,2.075,290,1.808,291,1.808,292,1.808,305,1.842,319,3.525,360,1.38,384,4.363,385,1.563,386,2.35,387,3.892,388,1.808,389,3.276,390,2.35,391,3.276,392,4.377,393,2.18,394,2.18,395,2.18,396,2.18,397,3.276,398,2.18,399,3.276,400,3.276,401,1.808,402,2.18,403,2.18,404,2.18,405,2.18,406,1.808,407,2.18]],["title/injectables/TaskService.html",[77,1.203,353,1.6]],["body/injectables/TaskService.html",[3,0.203,4,0.179,5,0.179,7,0.203,8,0.893,11,0.036,12,1.097,14,2.005,15,1.484,16,0.673,17,0.452,20,0.203,21,0.024,23,1.187,24,1.499,26,0.013,27,0.013,50,0.721,52,0.934,55,1.647,61,0.863,71,2.465,77,0.893,78,0.799,83,2.208,87,0.953,88,1.309,90,1.543,92,1.755,113,2.296,130,2.307,132,1.187,141,1.317,143,1.515,192,0.653,208,2.858,209,1.187,213,1.82,214,1.82,222,1.372,223,2.911,226,0.721,231,1.947,242,1.187,252,1.012,259,1.947,265,1.012,287,2.126,288,1.902,298,1.473,303,1.473,304,3.62,305,0.979,306,2.177,307,1.929,308,1.473,309,1.473,310,2.59,311,1.929,312,1.929,315,1.317,316,2.59,317,2.465,321,2.59,322,2.177,323,1.929,326,2.852,327,1.473,329,1.473,332,1.473,335,1.473,336,1.473,341,1.473,342,2.651,345,2.177,346,2.59,347,1.929,348,2.153,353,1.187,355,0.894,356,1.668,357,1.473,360,0.894,361,1.171,406,1.171,408,1.171,409,2.325,410,1.929,411,2.325,412,2.325,413,2.325,414,3.358,415,1.412,416,2.459,417,1.412,418,2.325,419,1.412,420,2.325,421,1.929,422,2.465,423,1.412,424,3.393,425,1.412,426,2.325,427,2.325,428,1.412,429,1.668,430,3.748,431,1.412,432,1.929,433,1.412,434,1.317,435,1.412,436,3.587,437,1.171,438,1.412,439,1.171,440,1.412,441,1.412,442,1.412,443,1.171,444,1.412,445,2.965,446,1.412,447,1.412,448,1.412,449,1.412,450,1.412,451,1.412,452,2.459,453,2.965,454,1.412,455,2.459,456,2.459,457,2.459,458,1.171,459,1.412,460,1.412,461,2.325,462,1.412,463,1.412]],["title/classes/UpdateTaskDto.html",[21,0.054,342,1.775]],["body/classes/UpdateTaskDto.html",[3,0.606,4,0.535,5,0.535,11,0.035,16,0.739,20,0.606,21,0.072,26,0.029,27,0.029,55,1.37,83,2.151,84,1.774,86,3.021,87,0.929,88,1.645,101,3.686,192,2.379,305,1.774,342,2.911,356,3.021,434,2.911,464,3.021,465,3.255,466,4.264,467,4.601,468,5.14,469,4.213,470,3.021,471,3.021]],["title/classes/UpdateTaskStatusDto.html",[21,0.054,348,1.775]],["body/classes/UpdateTaskStatusDto.html",[3,0.565,4,0.5,5,0.5,7,0.565,10,1.654,11,0.036,12,0.954,16,0.708,20,0.565,21,0.084,26,0.028,27,0.028,55,1.579,61,0.784,84,1.654,87,0.866,88,1.576,99,1.89,103,3.531,123,3.26,125,2.226,129,4.084,130,3.129,131,4.084,132,3.024,348,2.788,464,3.531,465,3.118,472,3.26,473,3.93]],["title/classes/UpdateUserDto.html",[21,0.054,474,1.775]],["body/classes/UpdateUserDto.html",[3,0.623,4,0.551,5,0.551,11,0.035,16,0.752,20,0.623,21,0.074,26,0.029,27,0.029,52,1.044,84,1.825,87,0.956,88,1.674,135,2.213,137,2.745,305,1.825,434,2.962,465,3.312,466,4.338,467,3.596,470,3.109,471,3.109,474,2.962,475,3.596,476,5.23,477,3.109]],["title/entities/User.html",[52,0.625,240,1.319]],["body/entities/User.html",[3,0.307,4,0.271,5,0.271,7,0.307,10,2.058,11,0.036,12,1.187,15,1.626,16,0.464,20,0.307,21,0.037,24,1.488,26,0.018,27,0.018,52,1.196,55,1.426,58,1.13,61,1.088,67,3.641,69,3.215,70,1.209,73,2.313,87,0.471,90,0.683,99,1.238,113,1.492,115,2.313,124,3.749,142,3.641,143,1.714,156,4.056,183,2.945,184,3.224,209,1.09,222,2.152,226,1.09,240,1.823,242,2.954,247,3.592,248,4.336,259,1.826,260,2.675,262,1.826,263,2.313,264,2.675,267,1.771,268,3.453,270,3.857,286,1.352,288,1.823,304,2.787,478,1.771,479,3.887,480,3.887,481,3.887,482,3.887,483,2.135,484,2.135,485,3.225,486,2.135,487,2.135,488,3.225,489,2.135,490,2.135,491,2.135,492,2.135,493,3.225,494,3.887,495,2.135,496,3.887,497,2.135,498,3.887,499,2.135,500,3.887,501,2.135,502,3.225,503,2.135,504,2.135,505,2.135]],["title/controllers/UserController.html",[0,1.45,506,1.985]],["body/controllers/UserController.html",[0,1.697,2,0.9,3,0.28,4,0.247,5,0.247,7,0.28,8,1.583,10,1.877,11,0.036,12,1.082,14,2.042,15,1.465,16,0.678,17,0.622,20,0.28,21,0.033,22,1.231,23,0.992,24,1.427,26,0.017,27,0.017,52,1.221,61,0.823,73,2.153,87,0.983,88,1.32,90,0.961,113,2.292,135,2.591,141,1.7,143,1.446,192,0.9,208,3.112,213,1.737,214,1.737,223,2.669,231,1.101,263,2.153,288,1.984,296,1.612,297,2.49,298,1.901,299,2.49,300,2.49,301,2.49,302,2.49,303,1.901,305,1.264,306,2.612,308,1.901,309,1.901,310,2.612,313,3.042,315,1.7,316,2.612,317,2.63,321,2.612,322,1.901,327,1.901,328,2.49,329,1.231,330,2.49,332,1.231,333,2.49,335,1.901,336,2.323,337,2.49,341,1.231,343,2.49,345,1.901,346,2.612,351,2.49,352,1.612,355,1.231,357,1.231,359,1.612,363,1.612,371,1.612,373,1.612,377,1.612,386,2.153,421,2.49,422,2.958,429,2.153,432,2.49,434,1.7,474,3.012,477,2.153,506,1.901,507,1.612,508,4.075,509,1.612,510,1.944,511,2.49,512,5.074,513,3.298,514,1.944,515,1.944,516,1.944,517,3.002,518,3.002,519,1.944,520,1.873,521,1.612,522,1.944,523,1.231,524,1.944,525,3.668,526,1.944,527,1.944,528,1.944,529,1.944,530,1.944,531,1.944,532,1.944]],["title/modules/UserModule.html",[28,1.45,41,1.775]],["body/modules/UserModule.html",[2,2.291,3,0.57,4,0.504,5,0.504,11,0.035,16,0.837,17,1.269,20,0.57,21,0.068,26,0.028,27,0.028,28,2.498,30,2.024,31,2.024,32,2.511,33,2.511,34,2.024,35,3.419,36,2.511,41,3.361,43,3.135,44,2.511,45,2.511,47,2.843,49,2.843,50,2.024,52,0.791,506,3.419,520,3.03,521,3.289,523,2.511,533,3.289,534,3.289,535,3.965,536,3.965,537,3.965]],["title/classes/UserResponse.html",[21,0.054,513,1.985]],["body/classes/UserResponse.html",[3,0.352,4,0.311,5,0.311,7,0.352,8,1.371,11,0.036,12,1.248,14,1.371,15,1.641,16,0.352,20,0.352,21,0.042,24,0.784,26,0.02,27,0.02,52,1.247,58,1.624,61,1.026,69,3.658,84,1.031,87,0.929,88,1.143,90,1.349,92,1.823,99,1.371,113,1.974,142,4.143,143,2.061,209,1.251,213,1.504,214,1.504,240,1.95,242,2.949,262,2.623,268,1.551,286,2.934,288,2.073,305,1.504,315,2.623,385,1.757,386,3.322,387,3.497,388,2.963,390,2.562,401,2.032,513,3.618,523,1.551,538,4.403,539,3.572,540,2.45,541,2.45,542,2.45,543,3.572,544,2.45,545,3.572,546,2.45,547,2.45,548,2.45,549,2.45,550,2.45,551,2.45,552,2.45]],["title/injectables/UserService.html",[77,1.203,520,1.6]],["body/injectables/UserService.html",[3,0.261,4,0.23,5,0.23,7,0.261,8,1.092,11,0.036,12,1.111,14,2.002,15,1.44,16,0.658,17,0.58,20,0.261,21,0.031,23,0.926,24,1.381,26,0.016,27,0.016,50,0.926,52,1.232,61,0.861,70,1.61,71,2.849,77,1.092,78,1.027,87,0.951,88,0.91,89,1.801,90,1.533,92,1.452,113,2.235,135,2.444,141,1.61,143,1.512,192,0.839,208,2.593,209,1.452,213,1.817,214,1.817,222,1.624,223,3.256,226,0.926,231,1.61,240,1.928,242,0.926,252,1.3,287,2.039,288,1.817,298,1.801,303,1.801,305,1.197,306,2.516,308,1.801,309,1.801,310,2.516,315,1.61,316,2.516,321,2.516,322,1.801,327,1.801,329,1.801,332,1.801,335,1.801,336,2.516,340,2.359,341,1.801,345,1.801,346,2.516,355,1.148,357,1.148,390,2.039,410,2.359,414,2.849,416,2.359,422,2.849,424,4.112,429,2.039,430,3.798,434,1.61,436,3.58,437,1.504,439,1.504,443,2.359,452,2.359,455,2.359,456,2.359,457,2.359,458,1.504,465,1.801,474,2.887,477,2.039,508,3.296,509,2.359,511,2.359,520,2.028,523,1.148,553,1.504,554,2.844,555,2.844,556,2.844,557,2.844,558,1.813,559,1.813,560,1.813,561,3.973,562,1.813,563,1.813,564,1.813,565,2.844,566,1.813,567,2.844,568,1.813,569,1.813,570,1.813,571,1.813,572,1.813,573,1.813,574,1.813,575,1.813,576,1.813,577,1.813]],["title/coverage.html",[578,3.046]],["body/coverage.html",[0,2.29,1,2.092,5,0.42,6,2.74,11,0.035,18,1.686,21,0.099,26,0.025,27,0.025,34,1.686,42,1.871,52,0.659,55,1.173,58,1.542,61,0.659,77,2.026,79,2.74,83,1.686,85,2.74,86,3.156,90,1.057,135,1.686,136,3.156,137,3.134,189,2.369,190,2.492,193,2.369,194,4.054,206,2.74,240,1.853,241,2.74,262,1.871,294,2.092,295,2.74,319,2.092,342,1.871,348,1.871,353,1.686,384,2.74,385,3.156,408,2.74,464,3.156,472,2.74,474,1.871,475,2.74,478,2.74,506,2.092,507,2.74,513,2.092,520,1.686,538,2.74,553,2.74,578,2.369,579,3.303,580,3.303,581,4.401,582,2.74,583,4.401,584,4.949,585,6.044,586,3.303,587,4.401,588,3.303,589,5.278,590,3.303,591,3.303,592,3.303,593,3.303,594,3.303,595,3.303,596,3.303,597,3.303,598,3.303,599,2.369,600,3.303,601,3.303]],["title/dependencies.html",[31,1.92,602,2.183]],["body/dependencies.html",[11,0.036,17,1.388,21,0.09,26,0.029,27,0.029,31,2.213,50,2.213,125,2.455,226,2.213,470,3.109,471,3.109,603,5.616,604,4.335,605,4.335,606,4.335,607,4.335,608,4.335,609,4.335,610,4.335,611,4.335,612,4.335,613,4.335,614,4.335,615,4.335,616,4.335,617,4.335,618,4.335]],["title/miscellaneous/enumerations.html",[619,1.108,620,3.12]],["body/miscellaneous/enumerations.html",[7,0.657,11,0.034,26,0.03,27,0.03,55,1.218,132,2.756,222,2.658,250,3.278,619,1.924,620,3.791,621,4.571,622,4.571,623,4.571,624,4.571,625,4.571,626,4.571,627,5.398,628,5.398]],["title/miscellaneous/functions.html",[619,1.108,629,3.12]],["body/miscellaneous/functions.html",[7,0.642,11,0.032,26,0.03,27,0.03,34,2.904,58,1.865,61,0.891,143,1.565,189,3.818,190,2.528,213,1.879,214,1.879,218,3.703,227,3.818,582,3.703,599,3.818,619,1.879,629,3.703,630,4.464,631,3.703,632,4.464,633,5.889,634,4.464]],["title/index.html",[7,0.378,635,2.631,636,2.631]],["body/index.html",[4,0.467,11,0.035,26,0.026,27,0.026,87,0.81,146,3.046,414,2.634,578,2.634,637,3.673,638,3.673,639,4.717,640,3.673,641,3.673,642,3.673,643,3.673,644,3.673,645,3.673,646,5.211,647,3.673,648,3.673,649,3.673,650,5.211,651,5.919,652,3.673,653,3.673,654,3.673,655,5.82,656,3.673,657,3.673,658,4.717,659,3.673,660,3.673,661,3.673,662,3.673,663,4.717,664,4.717,665,3.673,666,3.673,667,3.673,668,4.717,669,4.717,670,3.673,671,3.673,672,3.673,673,3.673,674,3.673,675,3.046,676,3.673,677,3.673,678,3.673,679,3.673,680,3.673,681,3.673,682,3.673,683,3.673,684,3.673,685,3.046,686,3.673,687,3.673,688,3.673,689,3.673,690,3.673,691,3.673,692,3.046]],["title/modules.html",[30,2.169]],["body/modules.html",[11,0.031,26,0.031,27,0.031,29,2.965,30,2.39,40,2.651,41,2.651,675,4.813,693,5.802,694,5.802,695,5.802]],["title/overview.html",[696,3.523]],["body/overview.html",[2,1.84,11,0.034,18,2.76,26,0.028,27,0.028,28,1.84,29,3.916,30,2.03,31,2.03,32,2.518,33,2.518,34,2.03,35,2.518,36,2.518,37,3.298,38,3.298,39,3.298,40,3.299,41,3.299,42,3.061,43,3.141,44,2.518,45,2.518,70,2.252,78,2.252,84,1.674,154,3.298,176,4.114,353,2.76,379,3.298,380,3.298,520,2.76,533,3.298,534,3.298,696,3.298,697,3.976,698,3.976]],["title/properties.html",[99,1.444,602,2.183]],["body/properties.html",[11,0.035,26,0.031,27,0.031,87,1.05,99,1.829,685,3.952,692,3.952,699,4.765,700,4.765,701,4.765]],["title/miscellaneous/typealiases.html",[619,1.108,702,3.761]],["body/miscellaneous/typealiases.html",[7,0.678,11,0.031,26,0.031,27,0.031,58,1.926,61,1.097,190,2.67,227,3.942,599,3.942,619,1.985,631,3.911,703,4.715,704,4.715]],["title/miscellaneous/variables.html",[619,1.108,705,3.12]],["body/miscellaneous/variables.html",[7,0.671,11,0.033,26,0.031,27,0.031,136,3.346,137,3.46,193,3.918,194,3.346,195,3.87,196,3.87,197,3.87,198,3.87,222,2.159,251,3.87,619,1.964,705,3.87,706,4.666]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":194,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":700,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":163,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1/1",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":585,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":485,"title":{},"body":{"entities/User.html":{}}}],["16",{"_index":172,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["2",{"_index":154,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["2/2",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":176,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["30",{"_index":156,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["36",{"_index":112,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["4",{"_index":697,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["6/6",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":104,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{}}}],["7",{"_index":698,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":171,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8,16",{"_index":198,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["8.12.0",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":164,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9])(?=.*[a",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["_description",{"_index":243,"title":{},"body":{"entities/Task.html":{}}}],["_email",{"_index":479,"title":{},"body":{"entities/User.html":{}}}],["_name",{"_index":480,"title":{},"body":{"entities/User.html":{}}}],["_password",{"_index":481,"title":{},"body":{"entities/User.html":{}}}],["_status",{"_index":244,"title":{},"body":{"entities/Task.html":{}}}],["_tasks",{"_index":482,"title":{},"body":{"entities/User.html":{}}}],["_title",{"_index":245,"title":{},"body":{"entities/Task.html":{}}}],["_user",{"_index":246,"title":{},"body":{"entities/Task.html":{}}}],["_username",{"_index":184,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["address",{"_index":151,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["adheres",{"_index":95,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["admin",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["aliases",{"_index":703,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allows",{"_index":179,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["alpha",{"_index":180,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["already",{"_index":238,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["amazing",{"_index":676,"title":{},"body":{"index.html":{}}}],["api",{"_index":94,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["app",{"_index":653,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":645,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":220,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["args.constraints[0",{"_index":229,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["array",{"_index":322,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["assigned",{"_index":118,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["associated",{"_index":259,"title":{},"body":{"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["async",{"_index":208,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["atleast",{"_index":153,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["author",{"_index":685,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":231,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["awesome_todo",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":677,"title":{},"body":{"index.html":{}}}],["body",{"_index":351,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":695,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":693,"title":{},"body":{"modules.html":{}}}],["building",{"_index":640,"title":{},"body":{"index.html":{}}}],["business",{"_index":411,"title":{},"body":{"injectables/TaskService.html":{}}}],["character",{"_index":169,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":127,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["characters'})@isalphanumeric('es",{"_index":177,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters'})@isnotempty({message",{"_index":106,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["characters.'})@maxlength(30",{"_index":155,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":203,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars.'})@isunique({tablename",{"_index":182,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":21,"title":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponse.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":84,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponse.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":379,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":380,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":533,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":534,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":183,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["column({type",{"_index":247,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["completion",{"_index":338,"title":{},"body":{"controllers/TaskController.html":{}}}],["console.log(task",{"_index":454,"title":{},"body":{"injectables/TaskService.html":{}}}],["const",{"_index":192,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constraint",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["constraint.ts",{"_index":206,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"coverage.html":{}}}],["constraint.ts:12",{"_index":212,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constraint.ts:14",{"_index":221,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constraint.ts:26",{"_index":217,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constructor",{"_index":209,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["constructor(entitymanager",{"_index":210,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["constructor(id",{"_index":388,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["constructor(name",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["constructor(taskrepository",{"_index":415,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(title",{"_index":289,"title":{},"body":{"entities/Task.html":{}}}],["constructor(userrepository",{"_index":558,"title":{},"body":{"injectables/UserService.html":{}}}],["constructs",{"_index":285,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["contain",{"_index":160,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":316,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('task",{"_index":362,"title":{},"body":{"controllers/TaskController.html":{}}}],["controller('user",{"_index":524,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":578,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":305,"title":{},"body":{"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":363,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["create(createtaskdto",{"_index":312,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["create(createuserdto",{"_index":509,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["created",{"_index":141,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createquerybuilder('task",{"_index":447,"title":{},"body":{"injectables/TaskService.html":{}}}],["createquerybuilder(tablename",{"_index":234,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["creates",{"_index":315,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["createtaskdto",{"_index":83,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createtaskdto.description",{"_index":442,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtaskdto.title",{"_index":441,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtaskdto.user_id",{"_index":444,"title":{},"body":{"injectables/TaskService.html":{}}}],["createuserdto",{"_index":135,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.name",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.username",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["creating",{"_index":89,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["creation",{"_index":421,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["crud",{"_index":302,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["current",{"_index":392,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["data",{"_index":92,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["database",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["dataexist",{"_index":230,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["deafault",{"_index":280,"title":{},"body":{"entities/Task.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":191,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["decorator.ts",{"_index":599,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":251,"title":{},"body":{"entities/Task.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":207,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["defaultmessage(validationarguments",{"_index":215,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["defines",{"_index":300,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["delete",{"_index":336,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":333,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":432,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["deletes",{"_index":335,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleting",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["deletion",{"_index":339,"title":{},"body":{"controllers/TaskController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":87,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["description(value",{"_index":273,"title":{},"body":{"entities/Task.html":{}}}],["details",{"_index":422,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["development",{"_index":654,"title":{},"body":{"index.html":{}}}],["digit",{"_index":162,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["documentation",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":628,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":88,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["dto/create",{"_index":355,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/task",{"_index":358,"title":{},"body":{"controllers/TaskController.html":{}}}],["dto/update",{"_index":357,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user",{"_index":522,"title":{},"body":{"controllers/UserController.html":{}}}],["e2e",{"_index":665,"title":{},"body":{"index.html":{}}}],["each",{"_index":263,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["eager",{"_index":257,"title":{},"body":{"entities/Task.html":{}}}],["efficient",{"_index":641,"title":{},"body":{"index.html":{}}}],["email",{"_index":142,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["email(value",{"_index":501,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":517,"title":{},"body":{"controllers/UserController.html":{}}}],["ensures",{"_index":91,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["entities",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"entities/Task.html":{},"entities/User.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["entities/task.entity",{"_index":360,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{}}}],["entities/user.entity",{"_index":523,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":240,"title":{"entities/Task.html":{},"entities/User.html":{}},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entitymanager",{"_index":211,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["enum",{"_index":250,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":620,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["es",{"_index":178,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["example",{"_index":650,"title":{},"body":{"index.html":{}}}],["exist",{"_index":239,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["existing",{"_index":434,"title":{},"body":{"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":466,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["factory",{"_index":399,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["field",{"_index":236,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":306,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findallbyuser",{"_index":307,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["findallbyuser(@param('id",{"_index":369,"title":{},"body":{"controllers/TaskController.html":{}}}],["findallbyuser(id",{"_index":323,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["finding",{"_index":555,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":308,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":371,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":329,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["formatted",{"_index":512,"title":{},"body":{"controllers/UserController.html":{}}}],["found",{"_index":430,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":639,"title":{},"body":{"index.html":{}}}],["full",{"_index":158,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["function",{"_index":583,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":629,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":264,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["get(':id",{"_index":330,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["get('user/:id",{"_index":324,"title":{},"body":{"controllers/TaskController.html":{}}}],["getexists",{"_index":235,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":450,"title":{},"body":{"injectables/TaskService.html":{}}}],["getrepository(tablename",{"_index":233,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["getting",{"_index":635,"title":{"index.html":{}},"body":{}}],["given",{"_index":287,"title":{},"body":{"entities/Task.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["grow",{"_index":672,"title":{},"body":{"index.html":{}}}],["handles",{"_index":410,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["handling",{"_index":297,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["hello",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":682,"title":{},"body":{"index.html":{}}}],["host",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":689,"title":{},"body":{"index.html":{}}}],["id",{"_index":113,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":262,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["implements",{"_index":228,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["in_progress",{"_index":627,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["including",{"_index":554,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":337,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["initialize",{"_index":504,"title":{},"body":{"entities/User.html":{}}}],["injectable",{"_index":77,"title":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":437,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["injectrepository(task",{"_index":438,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectrepository(user",{"_index":439,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["input",{"_index":140,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["installation",{"_index":649,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":652,"title":{},"body":{"index.html":{}}}],["instance",{"_index":286,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["interacts",{"_index":413,"title":{},"body":{"injectables/TaskService.html":{}}}],["isalphanumeric",{"_index":186,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isalphanumeric('es",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":187,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":123,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isenum(taskstatus",{"_index":129,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty",{"_index":122,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty({message",{"_index":144,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":119,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@length(36",{"_index":111,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isstring()@maxlength(60",{"_index":109,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isstring()@minlength(2",{"_index":152,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(5",{"_index":102,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isuniqeinterface",{"_index":227,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["isunique",{"_index":189,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isunique(options",{"_index":632,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isuniqueconstraint",{"_index":42,"title":{"injectables/IsUniqueConstraint.html":{}},"body":{"modules/AppModule.html":{},"injectables/IsUniqueConstraint.html":{},"coverage.html":{},"overview.html":{}}}],["join",{"_index":679,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":686,"title":{},"body":{"index.html":{}}}],["key",{"_index":458,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["leftjoinandselect('task._user",{"_index":448,"title":{},"body":{"injectables/TaskService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":124,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["length'})@isnotempty({message",{"_index":116,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["length(36",{"_index":134,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["less",{"_index":105,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["letter",{"_index":166,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":692,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":669,"title":{},"body":{"index.html":{}}}],["list",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["literal",{"_index":704,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["localhost",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":412,"title":{},"body":{"injectables/TaskService.html":{}}}],["long",{"_index":173,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lowercase",{"_index":165,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["make",{"_index":278,"title":{},"body":{"entities/Task.html":{}}}],["mandatory",{"_index":107,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["mandatory'})@isemail",{"_index":145,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory'})@matches(passwordregex",{"_index":159,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mandatory'})@minlength(3",{"_index":175,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["manytoone",{"_index":266,"title":{},"body":{"entities/Task.html":{}}}],["manytoone(undefined",{"_index":255,"title":{},"body":{"entities/Task.html":{}}}],["match",{"_index":114,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["matches",{"_index":188,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(passwordregex",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":121,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(30",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(60",{"_index":126,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["message",{"_index":103,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["metadata",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":400,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":120,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":201,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":128,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["miscellaneous",{"_index":619,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":668,"title":{},"body":{"index.html":{}}}],["mode",{"_index":658,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":681,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":687,"title":{},"body":{"index.html":{}}}],["name",{"_index":143,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["name(value",{"_index":495,"title":{},"body":{"entities/User.html":{}}}],["necessary",{"_index":96,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["nest",{"_index":646,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":691,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":470,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":90,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newly",{"_index":511,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["node.js",{"_index":638,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":436,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('no",{"_index":457,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":651,"title":{},"body":{"index.html":{}}}],["null",{"_index":455,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["numeric",{"_index":181,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["object",{"_index":390,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["object.entries(updatetaskdto",{"_index":459,"title":{},"body":{"injectables/TaskService.html":{}}}],["object.entries(updateuserdto",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["of(task",{"_index":397,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["of(user",{"_index":543,"title":{},"body":{"classes/UserResponse.html":{}}}],["omittype",{"_index":469,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["omittype(createtaskdto",{"_index":468,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["one",{"_index":161,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":493,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":487,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":670,"title":{},"body":{"index.html":{}}}],["operation",{"_index":340,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["operations",{"_index":303,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["optional",{"_index":214,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":634,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":696,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":602,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":288,"title":{},"body":{"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["param('id",{"_index":375,"title":{},"body":{"controllers/TaskController.html":{}}}],["parameters",{"_index":213,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":131,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["partialtype",{"_index":467,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":476,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["password(value",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["passwordregex",{"_index":193,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":352,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":343,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["patch('status/:id",{"_index":349,"title":{},"body":{"controllers/TaskController.html":{}}}],["pg",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":146,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["populated",{"_index":545,"title":{},"body":{"classes/UserResponse.html":{}}}],["port",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":313,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["postgres",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":296,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":267,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":260,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["private",{"_index":242,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["problematic",{"_index":281,"title":{},"body":{"entities/Task.html":{}}}],["production",{"_index":660,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":637,"title":{},"body":{"index.html":{}}}],["project",{"_index":671,"title":{},"body":{"index.html":{}}}],["promise",{"_index":223,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":99,"title":{"properties.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"properties.html":{}}}],["provide",{"_index":147,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["provided",{"_index":391,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":268,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["read",{"_index":680,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["record",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["records",{"_index":557,"title":{},"body":{"injectables/UserService.html":{}}}],["reflect",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":298,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove",{"_index":309,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":377,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":332,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":414,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":623,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["requests",{"_index":299,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":424,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["response",{"_index":386,"title":{},"body":{"classes/TaskResponseDto.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{}}}],["response.dto",{"_index":359,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["response.dto.ts",{"_index":385,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":540,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:11",{"_index":394,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:15",{"_index":541,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:16",{"_index":396,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:20",{"_index":542,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:21",{"_index":393,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:25",{"_index":539,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:26",{"_index":395,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:31",{"_index":389,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["response.dto.ts:48",{"_index":544,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:62",{"_index":398,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["result",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":327,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["retrieved",{"_index":427,"title":{},"body":{"injectables/TaskService.html":{}}}],["retrieves",{"_index":321,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/IsUniqueConstraint.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["routes",{"_index":301,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["rules",{"_index":98,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["run",{"_index":655,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["saves",{"_index":420,"title":{},"body":{"injectables/TaskService.html":{}}}],["scalable",{"_index":642,"title":{},"body":{"index.html":{}}}],["sent",{"_index":93,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["server",{"_index":643,"title":{},"body":{"index.html":{}}}],["service",{"_index":409,"title":{},"body":{"injectables/TaskService.html":{}}}],["set",{"_index":270,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["side",{"_index":644,"title":{},"body":{"index.html":{}}}],["single",{"_index":429,"title":{},"body":{"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"index.html":{}}}],["space",{"_index":170,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["special",{"_index":168,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":326,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["specified",{"_index":328,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["sponsors",{"_index":674,"title":{},"body":{"index.html":{}}}],["src/.../create",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":631,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":630,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../taskstatus.ts",{"_index":621,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["src/main.ts",{"_index":582,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/task/dto/create",{"_index":85,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/task/dto/task",{"_index":384,"title":{},"body":{"classes/TaskResponseDto.html":{},"coverage.html":{}}}],["src/task/dto/update",{"_index":464,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["src/task/entities/task.entity",{"_index":492,"title":{},"body":{"entities/User.html":{}}}],["src/task/entities/task.entity.ts",{"_index":241,"title":{},"body":{"entities/Task.html":{},"coverage.html":{}}}],["src/task/entities/task.entity.ts:14",{"_index":261,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:20",{"_index":254,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:32",{"_index":249,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:44",{"_index":253,"title":{},"body":{"entities/Task.html":{}}}],["src/task/entities/task.entity.ts:58",{"_index":258,"title":{},"body":{"entities/Task.html":{}}}],["src/task/task.controller.ts",{"_index":295,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/task/task.controller.ts:31",{"_index":314,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:40",{"_index":320,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:51",{"_index":325,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:62",{"_index":331,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:73",{"_index":344,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:84",{"_index":350,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:97",{"_index":334,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.module.ts",{"_index":381,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/task/task.service.ts",{"_index":408,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/task/task.service.ts:116",{"_index":435,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:134",{"_index":431,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:16",{"_index":417,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:28",{"_index":419,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:43",{"_index":423,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:53",{"_index":425,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:74",{"_index":428,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:92",{"_index":433,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/taskstatus.ts",{"_index":622,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/dto/create",{"_index":136,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/update",{"_index":475,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/user",{"_index":538,"title":{},"body":{"classes/UserResponse.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":265,"title":{},"body":{"entities/Task.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":478,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:13",{"_index":491,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:19",{"_index":484,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:31",{"_index":490,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:43",{"_index":486,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:55",{"_index":483,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:67",{"_index":489,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":507,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:31",{"_index":510,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:41",{"_index":514,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":515,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:65",{"_index":519,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:76",{"_index":516,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":535,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":553,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:51",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:68",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:90",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["src/validation/unique/is",{"_index":190,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["start",{"_index":656,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":659,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":661,"title":{},"body":{"index.html":{}}}],["started",{"_index":636,"title":{"index.html":{}},"body":{}}],["starter",{"_index":648,"title":{},"body":{"index.html":{}}}],["state",{"_index":133,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["statements",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":387,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["status",{"_index":130,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["status(value",{"_index":276,"title":{},"body":{"entities/Task.html":{}}}],["status.dto",{"_index":361,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["status.dto.ts",{"_index":472,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:14",{"_index":473,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["status.status",{"_index":462,"title":{},"body":{"injectables/TaskService.html":{}}}],["statuses",{"_index":625,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":683,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{}}}],["successfully",{"_index":518,"title":{},"body":{"controllers/UserController.html":{}}}],["support",{"_index":675,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":694,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["tablename",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":55,"title":{"entities/Task.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["task.controller",{"_index":382,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.description",{"_index":405,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.dto",{"_index":356,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts",{"_index":86,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:22",{"_index":110,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:30",{"_index":108,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:41",{"_index":117,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.id",{"_index":403,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.service",{"_index":354,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.status",{"_index":406,"title":{},"body":{"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{}}}],["task.title",{"_index":404,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task.user",{"_index":488,"title":{},"body":{"entities/User.html":{}}}],["task.user.id",{"_index":407,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["task/entities/task.entity",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["task/task.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["task[key",{"_index":460,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcontroller",{"_index":294,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskmodule",{"_index":40,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskrepository",{"_index":418,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskresponsedto",{"_index":319,"title":{"classes/TaskResponseDto.html":{}},"body":{"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"coverage.html":{}}}],["taskresponsedto.of(await",{"_index":364,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskresponsedto.of(task",{"_index":368,"title":{},"body":{"controllers/TaskController.html":{}}}],["tasks",{"_index":304,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["tasks(value",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["tasks.map((task",{"_index":367,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskservice",{"_index":353,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":132,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.to_do",{"_index":274,"title":{},"body":{"entities/Task.html":{}}}],["test",{"_index":664,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":667,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":666,"title":{},"body":{"index.html":{}}}],["tests",{"_index":663,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":673,"title":{},"body":{"index.html":{}}}],["this._description",{"_index":272,"title":{},"body":{"entities/Task.html":{}}}],["this._email",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["this._name",{"_index":494,"title":{},"body":{"entities/User.html":{}}}],["this._password",{"_index":498,"title":{},"body":{"entities/User.html":{}}}],["this._status",{"_index":275,"title":{},"body":{"entities/Task.html":{}}}],["this._tasks",{"_index":502,"title":{},"body":{"entities/User.html":{}}}],["this._title",{"_index":269,"title":{},"body":{"entities/Task.html":{}}}],["this._user",{"_index":283,"title":{},"body":{"entities/Task.html":{}}}],["this._username",{"_index":496,"title":{},"body":{"entities/User.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.description",{"_index":291,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.email",{"_index":548,"title":{},"body":{"classes/UserResponse.html":{}}}],["this.entitymanager",{"_index":232,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["this.id",{"_index":401,"title":{},"body":{"classes/TaskResponseDto.html":{},"classes/UserResponse.html":{}}}],["this.name",{"_index":546,"title":{},"body":{"classes/UserResponse.html":{}}}],["this.status",{"_index":292,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.taskrepository",{"_index":446,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.delete(id",{"_index":463,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.find",{"_index":445,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.findoneby",{"_index":453,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save",{"_index":440,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save(task",{"_index":461,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.create(createtaskdto",{"_index":365,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findall",{"_index":366,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findallbyuser(id",{"_index":370,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findone(id",{"_index":372,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.remove(id",{"_index":378,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.update(id",{"_index":374,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatestatus(id",{"_index":376,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.title",{"_index":290,"title":{},"body":{"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["this.user",{"_index":293,"title":{},"body":{"entities/Task.html":{}}}],["this.user_id",{"_index":402,"title":{},"body":{"classes/TaskResponseDto.html":{}}}],["this.username",{"_index":547,"title":{},"body":{"classes/UserResponse.html":{}}}],["this.userrepository.delete(id",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":443,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":526,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":527,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":530,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":532,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":531,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":456,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["throws",{"_index":452,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["title",{"_index":100,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{}}}],["title(value",{"_index":271,"title":{},"body":{"entities/Task.html":{}}}],["to_do",{"_index":626,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["touch",{"_index":684,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["transformer",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{}}}],["twitter",{"_index":690,"title":{},"body":{"index.html":{}}}],["type",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":702,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":226,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":383,"title":{},"body":{"modules/TaskModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":537,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":471,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":647,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":252,"title":{},"body":{"entities/Task.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["unique",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"classes/TaskResponseDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":662,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":317,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":701,"title":{},"body":{"properties.html":{}}}],["update",{"_index":310,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":373,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":341,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":346,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updates",{"_index":345,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatestatus",{"_index":311,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatestatus(id",{"_index":347,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatetaskdto",{"_index":342,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updatetaskstatusdto",{"_index":348,"title":{"classes/UpdateTaskStatusDto.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":474,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updating",{"_index":465,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["uppercase",{"_index":167,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["use",{"_index":282,"title":{},"body":{"entities/Task.html":{}}}],["used",{"_index":138,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user",{"_index":52,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user's",{"_index":150,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user(value",{"_index":284,"title":{},"body":{"entities/Task.html":{}}}],["user.controller",{"_index":536,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":477,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":137,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:28",{"_index":157,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":185,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:53",{"_index":174,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:60",{"_index":149,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":552,"title":{},"body":{"classes/UserResponse.html":{}}}],["user.id",{"_index":451,"title":{},"body":{"injectables/TaskService.html":{}}}],["user.name",{"_index":550,"title":{},"body":{"classes/UserResponse.html":{}}}],["user.service",{"_index":521,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.tasks",{"_index":256,"title":{},"body":{"entities/Task.html":{}}}],["user.username",{"_index":551,"title":{},"body":{"classes/UserResponse.html":{}}}],["user/entities/user.entity",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["user[key",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["user_id",{"_index":101,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TaskResponseDto.html":{},"classes/UpdateTaskDto.html":{}}}],["usercontroller",{"_index":506,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":41,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["username(value",{"_index":497,"title":{},"body":{"entities/User.html":{}}}],["userrepository",{"_index":416,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["userresponse",{"_index":513,"title":{"classes/UserResponse.html":{}},"body":{"controllers/UserController.html":{},"classes/UserResponse.html":{},"coverage.html":{}}}],["userresponse(user.id",{"_index":549,"title":{},"body":{"classes/UserResponse.html":{}}}],["userresponse.of(await",{"_index":525,"title":{},"body":{"controllers/UserController.html":{}}}],["userresponse.of(user",{"_index":529,"title":{},"body":{"controllers/UserController.html":{}}}],["users",{"_index":508,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.map((user",{"_index":528,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":520,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":115,"title":{},"body":{"classes/CreateTaskDto.html":{},"entities/Task.html":{},"entities/User.html":{}}}],["valid",{"_index":148,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":139,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{}}}],["validate(value",{"_index":219,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validation",{"_index":97,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["validation/unique/is",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["validationarguments",{"_index":216,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validationarguments.property",{"_index":237,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validationoptions",{"_index":633,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":125,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/IsUniqueConstraint.html":{},"classes/UpdateTaskStatusDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":224,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["validatorconstraintinterface",{"_index":225,"title":{},"body":{"injectables/IsUniqueConstraint.html":{}}}],["value",{"_index":222,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":248,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["variable",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":705,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":624,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":699,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":657,"title":{},"body":{"index.html":{}}}],["way",{"_index":277,"title":{},"body":{"entities/Task.html":{}}}],["website",{"_index":688,"title":{},"body":{"index.html":{}}}],["where('user.id",{"_index":449,"title":{},"body":{"injectables/TaskService.html":{}}}],["whose",{"_index":426,"title":{},"body":{"injectables/TaskService.html":{}}}],["work",{"_index":279,"title":{},"body":{"entities/Task.html":{}}}],["world",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["wrapped",{"_index":318,"title":{},"body":{"controllers/TaskController.html":{}}}],["yes",{"_index":218,"title":{},"body":{"injectables/IsUniqueConstraint.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":678,"title":{},"body":{"index.html":{}}}],["z])(?=.*[a",{"_index":196,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\w",{"_index":197,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nIsUniqueConstraint\n\nIsUniqueConstraint\n\nAppModule -->\n\nIsUniqueConstraint->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            IsUniqueConstraint\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TaskModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './user/user.module';\nimport { User } from './user/entities/user.entity';\nimport { TaskModule } from './task/task.module';\nimport { Task } from './task/entities/task.entity';\nimport { IsUniqueConstraint } from './validation/unique/is-unique-constraint';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: 'localhost',\n      port: 5432,\n      password: 'admin',\n      username: 'postgres',\n      entities: [User, Task],\n      database: 'awesome_todo-list',\n      synchronize: true,\n      logging: true,\n    }),\n    UserModule,\n    TaskModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, IsUniqueConstraint],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/create-task.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new task.\nThis DTO ensures that the data sent to the API for creating a task\nadheres to the necessary validation rules.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(5, {message: 'Description must have 60 or less characters'})@IsNotEmpty({message: 'Description is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:30\n                        \n                    \n\n            \n                \n                    The description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(60, {message: 'Title must have 60 or less characters'})@IsNotEmpty({message: 'Title is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:22\n                        \n                    \n\n            \n                \n                    The title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(36, 36, {message: 'User ID must match UUID length'})@IsNotEmpty({message: 'Description is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/create-task.dto.ts:41\n                        \n                    \n\n            \n                \n                    The ID of the user to whom the task is assigned.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  MinLength,\n  MaxLength,\n  IsNotEmpty,\n  IsEnum,\n  Length,\n} from 'class-validator';\n\n/**\n * DTO for creating a new task.\n * This DTO ensures that the data sent to the API for creating a task\n * adheres to the necessary validation rules.\n */\nexport class CreateTaskDto {\n  /**\n   * The title of the task.\n   */\n  @IsString()\n  @MaxLength(60, { message: 'Title must have 60 or less characters' })\n  @IsNotEmpty({ message: 'Title is mandatory' })\n  title: string;\n\n  /**\n   * The description of the task.\n   */\n  @IsString()\n  @MinLength(5, { message: 'Description must have 60 or less characters' })\n  @IsNotEmpty({ message: 'Description is mandatory' })\n  description: string;\n\n  //@IsEnum(TaskStatus, { message: 'Status must be part of TaskStatus' })\n  //state: TaskStatus;\n\n  /**\n   * The ID of the user to whom the task is assigned.\n   */\n  @IsString()\n  @Length(36, 36, { message: 'User ID must match UUID length' })\n  @IsNotEmpty({ message: 'Description is mandatory' })\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\nThis class is used to validate the input data when a new user is created.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Email is mandatory'})@IsEmail({}, {message: 'Please provide valid Email.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:60\n                        \n                    \n\n            \n                \n                    The user's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(2, {message: 'Name must have atleast 2 characters.'})@MaxLength(30, {message: 'Name must have 30 or less characters'})@IsNotEmpty({message: 'Name is mandatory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    The user's full name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password is mandatory'})@Matches(passwordRegEx, {message: Password must contain one digit from 1 to 9, one lowercase letter, one uppercase letter, one special character, no space, and it must be 8-16 characters long.})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    The user's password.\nPassword must contain one digit from 1 to 9,\none lowercase letter, one uppercase letter,\none special character, no space,\nand it must be 8-16 characters long.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Username is mandatory'})@MinLength(3, {message: 'Username must have atleast 3 characters.'})@MaxLength(30, {message: 'Username must have 30 or less characters'})@IsAlphanumeric('es-ES', {message: 'Username only allows alpha numeric chars.'})@IsUnique({tableName: 'user', column: '_username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:40\n                        \n                    \n\n            \n                \n                    The user's unique username.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { IsUnique } from 'src/validation/unique/is-unique-decorator';\n\nconst passwordRegEx =\n  /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/;\n\n/**\n * DTO for creating a new user.\n * This class is used to validate the input data when a new user is created.\n */\nexport class CreateUserDto {\n  /**\n   * The user's full name.\n   */\n  @IsString()\n  @MinLength(2, { message: 'Name must have atleast 2 characters.' })\n  @MaxLength(30, { message: 'Name must have 30 or less characters' })\n  @IsNotEmpty({ message: 'Name is mandatory' })\n  name: string;\n\n  /**\n   * The user's unique username.\n   */\n  @IsNotEmpty({ message: 'Username is mandatory' })\n  @MinLength(3, { message: 'Username must have atleast 3 characters.' })\n  @MaxLength(30, { message: 'Username must have 30 or less characters' })\n  @IsAlphanumeric('es-ES', {\n    message: 'Username only allows alpha numeric chars.',\n  })\n  @IsUnique({ tableName: 'user', column: '_username' })\n  username: string;\n\n  /**\n   * The user's password.\n   * Password must contain one digit from 1 to 9,\n   * one lowercase letter, one uppercase letter,\n   * one special character, no space,\n   * and it must be 8-16 characters long.\n   */\n  @IsNotEmpty({ message: 'Password is mandatory' })\n  @Matches(passwordRegEx, {\n    message: `Password must contain one digit from 1 to 9, one lowercase letter, one uppercase letter, one special character, no space, and it must be 8-16 characters long.`,\n  })\n  password: string;\n\n  /**\n   * The user's email address.\n   */\n  @IsNotEmpty({ message: 'Email is mandatory' })\n  @IsEmail({}, { message: 'Please provide valid Email.' })\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsUniqueConstraint.html":{"url":"injectables/IsUniqueConstraint.html","title":"injectable - IsUniqueConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsUniqueConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/unique/is-unique-constraint.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityManager: EntityManager)\n                    \n                \n                        \n                            \n                                Defined in src/validation/unique/is-unique-constraint.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/unique/is-unique-constraint.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationArguments\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(value: any, args?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/unique/is-unique-constraint.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { EntityManager } from 'typeorm';\nimport { IsUniqeInterface } from './is-unique-decorator';\n\n@ValidatorConstraint({ name: 'IsUniqueConstraint', async: true })\n@Injectable()\nexport class IsUniqueConstraint implements ValidatorConstraintInterface {\n  constructor(private readonly entityManager: EntityManager) {}\n  async validate(value: any, args?: ValidationArguments): Promise {\n    const { tableName, column }: IsUniqeInterface = args.constraints[0];\n\n    const dataExist = await this.entityManager\n      .getRepository(tableName)\n      .createQueryBuilder(tableName)\n      .where({ [column]: value })\n      .getExists();\n\n    return !dataExist;\n  }\n\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    const field: string = validationArguments.property;\n    return `${field} already exist`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Task.html":{"url":"entities/Task.html","title":"entity - Task","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/entities/task.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Task entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                _description\n                            \n                            \n                                    \n                                    Private\n                                _status\n                            \n                            \n                                    \n                                    Private\n                                _title\n                            \n                            \n                                    \n                                    Private\n                                _user\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:32\n                        \n                    \n\n            \n                \n                    The description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TaskStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:44\n                        \n                    \n\n            \n                \n                    The status of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:20\n                        \n                    \n\n            \n                \n                    The title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.tasks, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:58\n                        \n                    \n\n            \n                \n                    The user who is associated with the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/entities/task.entity.ts:14\n                        \n                    \n\n            \n                \n                    Unique identifier for each task, generated as a UUID.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/user/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { TaskStatus } from '../taskStatus';\n\n/**\n * Task entity\n */\n@Entity()\nexport class Task {\n  /**\n   * Unique identifier for each task, generated as a UUID.\n   */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * The title of the task.\n   */\n  @Column({ type: 'varchar', length: 60 })\n  private _title: string;\n  public get title(): string {\n    return this._title;\n  }\n  public set title(value: string) {\n    this._title = value;\n  }\n\n  /**\n   * The description of the task.\n   */\n  @Column({ type: 'varchar' })\n  private _description: string;\n  public get description(): string {\n    return this._description;\n  }\n  public set description(value: string) {\n    this._description = value;\n  }\n\n  /**\n   * The status of the task.\n   */\n  @Column({ type: 'enum', enum: TaskStatus, default: TaskStatus.TO_DO })\n  private _status: TaskStatus;\n  public get status(): TaskStatus {\n    return this._status;\n  }\n  public set status(value: TaskStatus) {\n    this._status = value;\n  }\n\n  //There should be a way to make it work in deafault,\n  //but since is a ManyToOne is not problematic to use eager\n  /**\n   * The user who is associated with the task.\n   */\n  @ManyToOne(() => User, (user: User) => user.tasks, { eager: true })\n  private _user: User;\n  public get user(): User {\n    return this._user;\n  }\n  public set user(value: User) {\n    this._user = value;\n  }\n\n  /**\n   * Constructs a new task instance with the given title, description, and associated user.\n   *\n   * @param {string} title - The title of the task.\n   * @param {string} description - The description of the task.\n   * @param {User} user - The user associated with this task.\n   */\n  constructor(title: string, description: string, user: User) {\n    this.title = title;\n    this.description = description;\n    this.status = TaskStatus.TO_DO;\n    this.user = user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling task-related requests.\nDefines the routes and methods for CRUD operations on tasks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing data for creating a new task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created task wrapped in a TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of tasks wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks associated with a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user for whom to retrieve tasks.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of tasks for the specified user, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The task with the specified ID, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Deletes a task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise indicating the completion of the deletion operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Updates a task with new data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to update.\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing updated data for the task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: UpdateTaskStatusDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('status/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Updates the status of a task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the task to update.\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DTO containing the new status for the task.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task with the new status, wrapped in TaskResponseDto.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TaskResponseDto } from './dto/task-response.dto';\nimport { Task } from './entities/task.entity';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\n\n/**\n * Controller for handling task-related requests.\n * Defines the routes and methods for CRUD operations on tasks.\n */\n@Controller('task')\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  /**\n   * Creates a new task.\n   * @param {CreateTaskDto} createTaskDto The DTO containing data for creating a new task.\n   * @returns {TaskResponseDto} The created task wrapped in a TaskResponseDto.\n   */\n  @Post()\n  async create(@Body() createTaskDto: CreateTaskDto) {\n    return TaskResponseDto.of(await this.taskService.create(createTaskDto));\n  }\n\n  /**\n   * Retrieves all tasks.\n   * @returns {TaskResponseDto[]} An array of tasks wrapped in TaskResponseDto.\n   */\n  @Get()\n  async findAll() {\n    const tasks: Task[] = await this.taskService.findAll();\n    return tasks.map((task) => TaskResponseDto.of(task));\n  }\n\n  /**\n   * Retrieves all tasks associated with a specific user.\n   * @param {string} id The ID of the user for whom to retrieve tasks.\n   * @returns {TaskResponseDto[]} An array of tasks for the specified user, wrapped in TaskResponseDto.\n   */\n  @Get('user/:id')\n  async findAllByUser(@Param('id') id: string) {\n    const tasks: Task[] = await this.taskService.findAllByUser(id);\n    return tasks.map((task) => TaskResponseDto.of(task));\n  }\n\n  /**\n   * Retrieves a specific task by its ID.\n   * @param {string} id The ID of the task to retrieve.\n   * @returns {TaskResponseDto} The task with the specified ID, wrapped in TaskResponseDto.\n   */\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return TaskResponseDto.of(await this.taskService.findOne(id));\n  }\n\n  /**\n   * Updates a task with new data.\n   * @param {string} id The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto The DTO containing updated data for the task.\n   * @returns {TaskResponseDto} The updated task wrapped in TaskResponseDto.\n   */\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto) {\n    return TaskResponseDto.of(await this.taskService.update(id, updateTaskDto));\n  }\n\n  /**\n   * Updates the status of a task.\n   * @param {string} id The ID of the task to update.\n   * @param {UpdateTaskStatusDto} status The DTO containing the new status for the task.\n   * @returns {TaskResponseDto} The updated task with the new status, wrapped in TaskResponseDto.\n   */\n  @Patch('status/:id')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() status: UpdateTaskStatusDto,\n  ) {\n    return TaskResponseDto.of(await this.taskService.updateStatus(id, status));\n  }\n\n  /**\n   * Deletes a task by its ID.\n   * @param {string} id The ID of the task to delete.\n   * @returns A promise indicating the completion of the deletion operation.\n   */\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.taskService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nTaskService\n\nTaskService\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Task } from './entities/task.entity';\nimport { User } from 'src/user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task, User])],\n  controllers: [TaskController],\n  providers: [TaskService],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskResponseDto.html":{"url":"classes/TaskResponseDto.html","title":"class - TaskResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/task-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for Task Response.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                description\n                            \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                status\n                            \n                            \n                                    Private\n                                title\n                            \n                            \n                                    Private\n                                user_id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, title: string, description: string, status: TaskStatus, user_id: string)\n                    \n                \n                        \n                            \n                                Defined in src/task/dto/task-response.dto.ts:31\n                            \n                        \n\n                \n                    \n                            Constructs a TaskResponseDto object with the provided parameters.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe title of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe description of the task.\n\n\n                                                        \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        TaskStatus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe current status of the task (enum TaskStatus).\n\n\n                                                        \n                                                \n                                                \n                                                        user_id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the user associated with the task.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    Description of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:26\n                        \n                    \n\n            \n                \n                    Current status of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:16\n                        \n                    \n\n            \n                \n                    Title of the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/task/dto/task-response.dto.ts:31\n                        \n                    \n\n            \n                \n                    Unique identifier of the user associated with the task.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        of\n                        \n                    \n                \n            \n            \n                \n                        \n                    of(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/dto/task-response.dto.ts:62\n                        \n                    \n\n\n            \n                \n                        Static factory method to create a TaskResponseDto from a Task entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Task entity from which to create the DTO.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TaskResponseDto\n\n                        \n                            \n                                A new instance of TaskResponseDto.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Task } from '../entities/task.entity';\nimport { TaskStatus } from '../taskStatus';\n\n/**\n * DTO for Task Response.\n */\nexport class TaskResponseDto {\n  /**\n   * Unique identifier of the task.\n   */\n  private id: string;\n\n  /**\n   * Title of the task.\n   */\n  private title: string;\n\n  /**\n   * Description of the task.\n   */\n  private description: string;\n\n  /**\n   * Current status of the task.\n   */\n  private status: TaskStatus;\n\n  /**\n   * Unique identifier of the user associated with the task.\n   */\n  private user_id: string;\n\n  /**\n   * Constructs a TaskResponseDto object with the provided parameters.\n   *\n   * @param {string} id - The unique identifier of the task.\n   * @param {string} title - The title of the task.\n   * @param {string} description - The description of the task.\n   * @param {TaskStatus} status - The current status of the task (enum TaskStatus).\n   * @param {string} user_id - The unique identifier of the user associated with the task.\n   */\n  constructor(\n    id: string,\n    title: string,\n    description: string,\n    status: TaskStatus,\n    user_id: string,\n  ) {\n    this.id = id;\n    this.title = title;\n    this.description = description;\n    this.status = status;\n    this.user_id = user_id;\n  }\n\n  /**\n   * Static factory method to create a TaskResponseDto from a Task entity.\n   *\n   * @param {Task} task - The Task entity from which to create the DTO.\n   * @returns A new instance of TaskResponseDto.\n   */\n  public static of(task: Task): TaskResponseDto {\n    return new TaskResponseDto(\n      task.id,\n      task.title,\n      task.description,\n      task.status,\n      task.user.id,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that handles business logic related to tasks.\nIt interacts with the Task repository for data operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllByUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a new task and saves it in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing task creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks from the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of tasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \nfindAllByUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Retrieves all tasks associated with a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose tasks are to be retrieved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of tasks associated with the user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Retrieves a single task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The found task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Deletes a task by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the task is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Updates an existing task with new data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the updated task details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: UpdateTaskStatusDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/task/task.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Updates the status of a specific task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the new status of the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated task.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Task } from './entities/task.entity';\nimport { User } from 'src/user/entities/user.entity';\nimport { TaskStatus } from './taskStatus';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\n\n/**\n * Service that handles business logic related to tasks.\n * It interacts with the Task repository for data operations.\n */\n@Injectable()\nexport class TaskService {\n  constructor(\n    @InjectRepository(Task) private readonly taskRepository: Repository,\n    @InjectRepository(User) private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new task and saves it in the database.\n   *\n   * @param {CreateTaskDto} createTaskDto - DTO containing task creation details.\n   * @returns {Task} The created task.\n   */\n  async create(createTaskDto: CreateTaskDto) {\n    return this.taskRepository.save(\n      new Task(\n        createTaskDto.title,\n        createTaskDto.description,\n        await this.userRepository.findOneBy({ id: createTaskDto.user_id }),\n      ),\n    );\n  }\n\n  /**\n   * Retrieves all tasks from the database.\n   *\n   * @returns {Promise}  A promise that resolves to an array of tasks.\n   */\n  findAll(): Promise {\n    return this.taskRepository.find();\n  }\n\n  /**\n   * Retrieves all tasks associated with a specific user.\n   *\n   * @param {string} id - The ID of the user whose tasks are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of tasks associated with the user.\n   */\n  findAllByUser(id: string): Promise {\n    return this.taskRepository\n      .createQueryBuilder('task')\n      .leftJoinAndSelect('task._user', 'user')\n      .where('user.id = :id', { id })\n      .getMany();\n    //return this.taskRepository.find({ where: { user: { id: id } } });\n    // return this.taskRepository.find({\n    //   where: {\n    //     user.id: id\n    //   },\n    // });\n  }\n\n  /**\n   * Retrieves a single task by its ID.\n   *\n   * @param {string} id - The ID of the task to retrieve.\n   * @returns {Task} The found task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async findOne(id: string) {\n    let task = await this.taskRepository.findOneBy({ id });\n    console.log(task);\n    if (task !== null) {\n      return task;\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Updates an existing task with new data.\n   *\n   * @param {string} id - The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto - DTO containing the updated task details.\n   * @returns {Task} The updated task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async update(id: string, updateTaskDto: UpdateTaskDto) {\n    let task = await this.taskRepository.findOneBy({ id });\n\n    if (task !== null) {\n      for (const [key, value] of Object.entries(updateTaskDto)) {\n        if (value !== undefined) {\n          task[key] = value;\n        }\n      }\n\n      return this.taskRepository.save(task);\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Updates the status of a specific task.\n   *\n   * @param {string} id - The ID of the task to update.\n   * @param {UpdateTaskStatusDto} status - DTO containing the new status of the task.\n   * @returns {Promise} The updated task.\n   * @throws {NotFoundException} NotFoundException if no task is found with the given ID.\n   */\n  async updateStatus(id: string, status: UpdateTaskStatusDto) {\n    let task = await this.taskRepository.findOneBy({ id });\n\n    if (task !== null) {\n      task.status = status.status;\n\n      return this.taskRepository.save(task);\n    } else {\n      throw new NotFoundException('No task was found');\n    }\n  }\n\n  /**\n   * Deletes a task by its ID.\n   *\n   * @param {String} id - The ID of the task to delete.\n   * @returns A promise that resolves when the task is deleted.\n   */\n  remove(id: string) {\n    return this.taskRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/update-task.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing task.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateTaskDto, ['user_id'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskDto } from './create-task.dto';\n\n/**\n * DTO for updating an existing task.\n */\nexport class UpdateTaskDto extends PartialType(\n  OmitType(CreateTaskDto, ['user_id'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskStatusDto.html":{"url":"classes/UpdateTaskStatusDto.html","title":"class - UpdateTaskStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/dto/update-task-status.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating the status of a task.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(TaskStatus, {message: 'Status must be part of TaskStatus.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task/dto/update-task-status.dto.ts:14\n                        \n                    \n\n            \n                \n                    The status of the task.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { TaskStatus } from '../taskStatus';\n\n/**\n * DTO for updating the status of a task.\n */\nexport class UpdateTaskStatusDto {\n  /**\n   * The status of the task.\n   */\n  @IsEnum(TaskStatus, {\n    message: 'Status must be part of TaskStatus.',\n  })\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing user.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an existing user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                _email\n                            \n                            \n                                    \n                                    Private\n                                _name\n                            \n                            \n                                    \n                                    Private\n                                _password\n                            \n                            \n                                    \n                                    Private\n                                _tasks\n                            \n                            \n                                    \n                                    Private\n                                _username\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 15})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    The password of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, task => task.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:67\n                        \n                    \n\n            \n                \n                    The list of tasks associated with the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        _username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    The username of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for each User, generated as a UUID.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Task } from 'src/task/entities/task.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * User entity\n */\n@Entity()\nexport class User {\n  /**\n   * Unique identifier for each User, generated as a UUID.\n   */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * The name of the user.\n   */\n  @Column({ type: 'varchar', length: 30 })\n  private _name: string;\n  public get name(): string {\n    return this._name;\n  }\n  public set name(value: string) {\n    this._name = value;\n  }\n\n  /**\n   * The username of the user.\n   */\n  @Column({ type: 'varchar', length: 30 })\n  private _username: string;\n  public get username(): string {\n    return this._username;\n  }\n  public set username(value: string) {\n    this._username = value;\n  }\n\n  /**\n   * The password of the user.\n   */\n  @Column({ type: 'varchar', length: 15 })\n  private _password: string;\n  public get password(): string {\n    return this._password;\n  }\n  public set password(value: string) {\n    this._password = value;\n  }\n\n  /**\n   * The email of the user.\n   */\n  @Column({ type: 'varchar', length: 30 })\n  private _email: string;\n  public get email(): string {\n    return this._email;\n  }\n  public set email(value: string) {\n    this._email = value;\n  }\n\n  /**\n   * The list of tasks associated with the user.\n   */\n  @OneToMany(() => Task, (task: Task) => task.user)\n  private _tasks: Task[];\n  public get tasks(): Task[] {\n    return this._tasks;\n  }\n  public set tasks(value: Task[]) {\n    this._tasks = value;\n  }\n\n  /**\n   * Constructor to initialize a new User instance.\n   *\n   * @param {string} name - The name of the user.\n   * @param {string} username - The username of the user.\n   * @param {string} password - The password of the user.\n   * @param {string} email - The email of the user.\n   */\n  constructor(name: string, username: string, password: string, email: string) {\n    this._name = name;\n    this._username = username;\n    this._password = password;\n    this._email = email;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling user-related requests.\nDefines the routes and methods for CRUD operations on users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the user creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created user, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of all users.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all users, each formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user with the specified ID, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:76\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty response, indicating the user was successfully deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Updates an existing user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the updated user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated user, formatted as a UserResponse.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserResponse } from './dto/user-response.dto';\nimport { User } from './entities/user.entity';\n\n/**\n * Controller for handling user-related requests.\n * Defines the routes and methods for CRUD operations on users.\n */\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * Creates a new user.\n   *\n   * @param {CreateUserDto} createUserDto - DTO containing the user creation details.\n   * @returns {Promise} The newly created user, formatted as a UserResponse.\n   */\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto): Promise {\n    return UserResponse.of(await this.userService.create(createUserDto));\n  }\n\n  /**\n   * Retrieves a list of all users.\n   *\n   * @returns {Promise} An array of all users, each formatted as a UserResponse.\n   */\n  @Get()\n  async findAll() {\n    const users: User[] = await this.userService.findAll();\n    return users.map((user) => UserResponse.of(user));\n  }\n\n  /**\n   * Retrieves a single user by ID.\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Promise} The user with the specified ID, formatted as a UserResponse.\n   */\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return UserResponse.of(await this.userService.findOne(id));\n  }\n\n  /**\n   * Updates an existing user by ID.\n   *\n   * @param {string} id - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - DTO containing the updated user details.\n   * @returns {Promise} The updated user, formatted as a UserResponse.\n   */\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return UserResponse.of(await this.userService.update(id, updateUserDto));\n  }\n\n  /**\n   * Deletes a user by ID.\n   *\n   * @param {string} id - The ID of the user to delete.\n   * @returns An empty response, indicating the user was successfully deleted.\n   */\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponse.html":{"url":"classes/UserResponse.html","title":"class - UserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for User Response.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                email\n                            \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                name\n                            \n                            \n                                    Private\n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, name: string, username: string, email: string)\n                    \n                \n                        \n                            \n                                Defined in src/user/dto/user-response.dto.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserResponse.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe unique identifier of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe username of the user.\n\n\n                                                        \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe email of the user.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:10\n                        \n                    \n\n            \n                \n                    The unique identifier of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-response.dto.ts:20\n                        \n                    \n\n            \n                \n                    The username of the user.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        of\n                        \n                    \n                \n            \n            \n                \n                        \n                    of(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/dto/user-response.dto.ts:48\n                        \n                    \n\n\n            \n                \n                        Creates a UserResponse object from a User entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity from which to create the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserResponse\n\n                        \n                            \n                                \nA new instance of UserResponse populated with user data.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for User Response.\n */\nexport class UserResponse {\n  /**\n   * The unique identifier of the user.\n   */\n  private id: string;\n\n  /**\n   * The name of the user.\n   */\n  private name: string;\n\n  /**\n   * The username of the user.\n   */\n  private username: string;\n\n  /**\n   * The email of the user.\n   */\n  private email: string;\n\n  /**\n   * Creates an instance of UserResponse.\n   *\n   * @param {string} id - The unique identifier of the user.\n   * @param {string} name - The name of the user.\n   * @param {string} username - The username of the user.\n   * @param {string} email - The email of the user.\n   */\n  constructor(id: string, name: string, username: string, email: string) {\n    this.id = id;\n    this.name = name;\n    this.username = username;\n    this.email = email;\n  }\n\n  /**\n   * Creates a UserResponse object from a User entity.\n   *\n   * @param {User} user - The user entity from which to create the response.\n   * @returns {UserResponse} - A new instance of UserResponse populated with user data.\n   */\n  public static of(user: User): UserResponse {\n    return new UserResponse(user.id, user.name, user.username, user.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The UserService handles all operations related to users,\nincluding creating, finding, updating, and deleting user records.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Creates a new user record in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO containing the details for the new user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The newly created User entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all users from the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of User entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the User entity if found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Deletes a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Updates an existing user record.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the updated user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the updated User entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\n\n/**\n * The UserService handles all operations related to users,\n * including creating, finding, updating, and deleting user records.\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new user record in the database.\n   *\n   * @param {CreateUserDto} createUserDto - The DTO containing the details for the new user.\n   * @returns {Promise} The newly created User entity.\n   */\n  create(createUserDto: CreateUserDto) {\n    return this.userRepository.save(\n      new User(\n        createUserDto.name,\n        createUserDto.username,\n        createUserDto.password,\n        createUserDto.email,\n      ),\n    );\n  }\n\n  /**\n   * Retrieves all users from the database.\n   *\n   * @returns {Promise} A promise that resolves to an array of User entities.\n   */\n  findAll(): Promise {\n    return this.userRepository.find();\n  }\n\n  /**\n   * Retrieves a single user by their ID.\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Promise} A promise that resolves to the User entity if found.\n   * @throws {NotFoundException} NotFoundException if no user is found with the given ID.\n   */\n  async findOne(id: string): Promise {\n    let user = await this.userRepository.findOneBy({ id });\n    if (user !== null) {\n      return user;\n    } else {\n      throw new NotFoundException('No user was found');\n    }\n  }\n\n  /**\n   * Updates an existing user record.\n   *\n   * @param {string} id - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - The data transfer object containing the updated user details.\n   * @returns {Promise} A promise that resolves to the updated User entity.\n   * @throws {NotFoundException} NotFoundException if no user is found with the given ID.\n   */\n  async update(id: string, updateUserDto: UpdateUserDto): Promise {\n    let user = await this.userRepository.findOneBy({ id });\n\n    if (user !== null) {\n      for (const [key, value] of Object.entries(updateUserDto)) {\n        if (value !== undefined) {\n          user[key] = value;\n        }\n      }\n\n      return this.userRepository.save(user);\n    } else {\n      throw new NotFoundException('No user was found');\n    }\n  }\n\n  /**\n   * Deletes a user by their ID.\n   *\n   * @param {string} id - The ID of the user to delete.\n   * @returns A promise that resolves to the result of the delete operation.\n   */\n  remove(id: string) {\n    return this.userRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/task/dto/task-response.dto.ts\n            \n            class\n            TaskResponseDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/task/dto/update-task-status.dto.ts\n            \n            class\n            UpdateTaskStatusDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/task/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/task/entities/task.entity.ts\n            \n            entity\n            Task\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            variable\n            passwordRegEx\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/dto/user-response.dto.ts\n            \n            class\n            UserResponse\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/validation/unique/is-unique-constraint.ts\n            \n            injectable\n            IsUniqueConstraint\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/validation/unique/is-unique-decorator.ts\n            \n            function\n            IsUnique\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../taskStatus.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/task/taskStatus.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                    \n                        \n                            Enum representing the various statuses of a task.\n\n                        \n                    \n                        \n                            \n                                 TO_DO\n                            \n                        \n                        \n                            \n                                Value : TO-DO\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsUnique   (src/.../is-unique-decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/validation/unique/is-unique-decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUnique\n                        \n                    \n                \n            \n            \n                \nIsUnique(options: IsUniqeInterface, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            IsUniqeInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nIsUniqueConstraint\n\nIsUniqueConstraint\n\nAppModule -->\n\nIsUniqueConstraint->AppModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IsUniqeInterface   (src/.../is-unique-decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/validation/unique/is-unique-decorator.ts\n    \n    \n        \n            \n                \n                    \n                    IsUniqeInterface\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            passwordRegEx   (src/.../create-user.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/dto/create-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        passwordRegEx\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
